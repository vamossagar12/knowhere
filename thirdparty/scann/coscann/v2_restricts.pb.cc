// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/coscann/v2_restricts.proto

#include "scann/coscann/v2_restricts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto;
namespace research_scann {
namespace coscann {
class TokenGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenGroup> _instance;
} _TokenGroup_default_instance_;
class DisjunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Disjunction> _instance;
} _Disjunction_default_instance_;
class ConjunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conjunction> _instance;
} _Conjunction_default_instance_;
class RestrictDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictDefinition> _instance;
} _RestrictDefinition_default_instance_;
class RestrictTokensV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictTokensV2> _instance;
} _RestrictTokensV2_default_instance_;
class PackedOptimizationStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackedOptimizationStatistics> _instance;
} _PackedOptimizationStatistics_default_instance_;
class EasyDisjunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EasyDisjunction> _instance;
} _EasyDisjunction_default_instance_;
class EasyConjunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EasyConjunction> _instance;
} _EasyConjunction_default_instance_;
class EasyRestrictDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EasyRestrictDefinition> _instance;
} _EasyRestrictDefinition_default_instance_;
}  // namespace coscann
}  // namespace research_scann
static void InitDefaultsscc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_Conjunction_default_instance_;
    new (ptr) ::research_scann::coscann::Conjunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::Conjunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto}, {}};

static void InitDefaultsscc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_Disjunction_default_instance_;
    new (ptr) ::research_scann::coscann::Disjunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::Disjunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_EasyConjunction_default_instance_;
    new (ptr) ::research_scann::coscann::EasyConjunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::EasyConjunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_EasyDisjunction_default_instance_;
    new (ptr) ::research_scann::coscann::EasyDisjunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::EasyDisjunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_EasyRestrictDefinition_default_instance_;
    new (ptr) ::research_scann::coscann::EasyRestrictDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::EasyRestrictDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_PackedOptimizationStatistics_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_PackedOptimizationStatistics_default_instance_;
    new (ptr) ::research_scann::coscann::PackedOptimizationStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::PackedOptimizationStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackedOptimizationStatistics_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PackedOptimizationStatistics_scann_2fcoscann_2fv2_5frestricts_2eproto}, {}};

static void InitDefaultsscc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_RestrictDefinition_default_instance_;
    new (ptr) ::research_scann::coscann::RestrictDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::RestrictDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
      &scc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_RestrictTokensV2_default_instance_;
    new (ptr) ::research_scann::coscann::RestrictTokensV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::RestrictTokensV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto}, {
      &scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static void InitDefaultsscc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::coscann::_TokenGroup_default_instance_;
    new (ptr) ::research_scann::coscann::TokenGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::coscann::TokenGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fcoscann_2fv2_5frestricts_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fcoscann_2fv2_5frestricts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fcoscann_2fv2_5frestricts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::TokenGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::TokenGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::TokenGroup, name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::TokenGroup, tokens_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::TokenGroup, debug_token_strings_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Disjunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Disjunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Disjunction, key_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Disjunction, token_groups_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Conjunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Conjunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Conjunction, disjunction_id_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::Conjunction, is_positive_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictDefinition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictDefinition, subs_key_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictDefinition, disjunctions_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictDefinition, conjunctions_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictTokensV2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictTokensV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::RestrictTokensV2, token_groups_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::PackedOptimizationStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::PackedOptimizationStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::PackedOptimizationStatistics, disjunction_keys_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::PackedOptimizationStatistics, disjunction_freqs_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyDisjunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyDisjunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyDisjunction, is_positive_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyDisjunction, token_groups_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyConjunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyConjunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyConjunction, disjunctions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyRestrictDefinition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyRestrictDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::coscann::EasyRestrictDefinition, conjunctions_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::research_scann::coscann::TokenGroup)},
  { 11, 18, sizeof(::research_scann::coscann::Disjunction)},
  { 20, 27, sizeof(::research_scann::coscann::Conjunction)},
  { 29, 37, sizeof(::research_scann::coscann::RestrictDefinition)},
  { 40, 46, sizeof(::research_scann::coscann::RestrictTokensV2)},
  { 47, 54, sizeof(::research_scann::coscann::PackedOptimizationStatistics)},
  { 56, 63, sizeof(::research_scann::coscann::EasyDisjunction)},
  { 65, 71, sizeof(::research_scann::coscann::EasyConjunction)},
  { 72, 78, sizeof(::research_scann::coscann::EasyRestrictDefinition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_TokenGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_Disjunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_Conjunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_RestrictDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_RestrictTokensV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_PackedOptimizationStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_EasyDisjunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_EasyConjunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::coscann::_EasyRestrictDefinition_default_instance_),
};

const char descriptor_table_protodef_scann_2fcoscann_2fv2_5frestricts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n scann/coscann/v2_restricts.proto\022\026rese"
  "arch_scann.coscann\"S\n\nTokenGroup\022\020\n\004name"
  "\030\001 \001(\tB\002\010\002\022\022\n\006tokens\030\002 \003(\006B\002\020\001\022\037\n\023debug_"
  "token_strings\030\003 \003(\tB\002\010\002\"T\n\013Disjunction\022\013"
  "\n\003key\030\001 \001(\006\0228\n\014token_groups\030\002 \003(\0132\".rese"
  "arch_scann.coscann.TokenGroup\"B\n\013Conjunc"
  "tion\022\032\n\016disjunction_id\030\001 \003(\006B\002\020\001\022\027\n\013is_p"
  "ositive\030\002 \003(\010B\002\020\001\"\234\001\n\022RestrictDefinition"
  "\022\020\n\010subs_key\030\001 \001(\006\0229\n\014disjunctions\030\003 \003(\013"
  "2#.research_scann.coscann.Disjunction\0229\n"
  "\014conjunctions\030\004 \003(\0132#.research_scann.cos"
  "cann.Conjunction\"L\n\020RestrictTokensV2\0228\n\014"
  "token_groups\030\001 \003(\0132\".research_scann.cosc"
  "ann.TokenGroup\"[\n\034PackedOptimizationStat"
  "istics\022\034\n\020disjunction_keys\030\001 \003(\006B\002\020\001\022\035\n\021"
  "disjunction_freqs\030\002 \003(\002B\002\020\001\"f\n\017EasyDisju"
  "nction\022\031\n\013is_positive\030\001 \001(\010:\004true\0228\n\014tok"
  "en_groups\030\002 \003(\0132\".research_scann.coscann"
  ".TokenGroup\"P\n\017EasyConjunction\022=\n\014disjun"
  "ctions\030\001 \003(\0132\'.research_scann.coscann.Ea"
  "syDisjunction\"W\n\026EasyRestrictDefinition\022"
  "=\n\014conjunctions\030\001 \003(\0132\'.research_scann.c"
  "oscann.EasyConjunctionB\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_sccs[9] = {
  &scc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_PackedOptimizationStatistics_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
  &scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_once;
static bool descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto = {
  &descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_initialized, descriptor_table_protodef_scann_2fcoscann_2fv2_5frestricts_2eproto, "scann/coscann/v2_restricts.proto", 907,
  &descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_once, descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_sccs, descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto::offsets,
  file_level_metadata_scann_2fcoscann_2fv2_5frestricts_2eproto, 9, file_level_enum_descriptors_scann_2fcoscann_2fv2_5frestricts_2eproto, file_level_service_descriptors_scann_2fcoscann_2fv2_5frestricts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fcoscann_2fv2_5frestricts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto), true);
namespace research_scann {
namespace coscann {

// ===================================================================

void TokenGroup::InitAsDefaultInstance() {
}
class TokenGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenGroup>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenGroup::TokenGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.TokenGroup)
}
TokenGroup::TokenGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tokens_(arena),
  debug_token_strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.TokenGroup)
}
TokenGroup::TokenGroup(const TokenGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_),
      debug_token_strings_(from.debug_token_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.TokenGroup)
}

void TokenGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenGroup::~TokenGroup() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.TokenGroup)
  SharedDtor();
}

void TokenGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenGroup::ArenaDtor(void* object) {
  TokenGroup* _this = reinterpret_cast< TokenGroup* >(object);
  (void)_this;
}
void TokenGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenGroup& TokenGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenGroup_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void TokenGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.TokenGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  debug_token_strings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [ctype = STRING_PIECE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "research_scann.coscann.TokenGroup.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 tokens = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_tokens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          add_tokens(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_debug_token_strings(), ptr, ctx, "research_scann.coscann.TokenGroup.debug_token_strings");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.TokenGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [ctype = STRING_PIECE];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.coscann.TokenGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 tokens = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_tokens())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 18u, input, this->mutable_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_debug_token_strings()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_token_strings(this->debug_token_strings_size() - 1).data(),
            static_cast<int>(this->debug_token_strings(this->debug_token_strings_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.coscann.TokenGroup.debug_token_strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.TokenGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.TokenGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.TokenGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.coscann.TokenGroup.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated fixed64 tokens = 2 [packed = true];
  if (this->tokens_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tokens_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->tokens().data(), this->tokens_size(), output);
  }

  // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
  for (int i = 0, n = this->debug_token_strings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_token_strings(i).data(), static_cast<int>(this->debug_token_strings(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.coscann.TokenGroup.debug_token_strings");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->debug_token_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.TokenGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.TokenGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.coscann.TokenGroup.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated fixed64 tokens = 2 [packed = true];
  if (this->tokens_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tokens_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->tokens_, target);
  }

  // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
  for (int i = 0, n = this->debug_token_strings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_token_strings(i).data(), static_cast<int>(this->debug_token_strings(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.coscann.TokenGroup.debug_token_strings");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->debug_token_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.TokenGroup)
  return target;
}

size_t TokenGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.TokenGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 tokens = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tokens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->debug_token_strings_size());
  for (int i = 0, n = this->debug_token_strings_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->debug_token_strings(i));
  }

  // optional string name = 1 [ctype = STRING_PIECE];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.TokenGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.TokenGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.TokenGroup)
    MergeFrom(*source);
  }
}

void TokenGroup::MergeFrom(const TokenGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.TokenGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  debug_token_strings_.MergeFrom(from.debug_token_strings_);
  if (from.has_name()) {
    set_name(from.name());
  }
}

void TokenGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.TokenGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenGroup::CopyFrom(const TokenGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.TokenGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenGroup::IsInitialized() const {
  return true;
}

void TokenGroup::InternalSwap(TokenGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(&other->tokens_);
  debug_token_strings_.InternalSwap(CastToBase(&other->debug_token_strings_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Disjunction::InitAsDefaultInstance() {
}
class Disjunction::_Internal {
 public:
  using HasBits = decltype(std::declval<Disjunction>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Disjunction::Disjunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.Disjunction)
}
Disjunction::Disjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  token_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.Disjunction)
}
Disjunction::Disjunction(const Disjunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      token_groups_(from.token_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.Disjunction)
}

void Disjunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  key_ = PROTOBUF_ULONGLONG(0);
}

Disjunction::~Disjunction() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.Disjunction)
  SharedDtor();
}

void Disjunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Disjunction::ArenaDtor(void* object) {
  Disjunction* _this = reinterpret_cast< Disjunction* >(object);
  (void)_this;
}
void Disjunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Disjunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Disjunction& Disjunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Disjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void Disjunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.Disjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_groups_.Clear();
  key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Disjunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.coscann.TokenGroup token_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_token_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Disjunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.Disjunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.coscann.TokenGroup token_groups = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_token_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.Disjunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.Disjunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Disjunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.Disjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->key(), output);
  }

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->token_groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.Disjunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* Disjunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.Disjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->key(), target);
  }

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->token_groups(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.Disjunction)
  return target;
}

size_t Disjunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.Disjunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->token_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->token_groups(static_cast<int>(i)));
    }
  }

  // optional fixed64 key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Disjunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.Disjunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Disjunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Disjunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.Disjunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.Disjunction)
    MergeFrom(*source);
  }
}

void Disjunction::MergeFrom(const Disjunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.Disjunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_groups_.MergeFrom(from.token_groups_);
  if (from.has_key()) {
    set_key(from.key());
  }
}

void Disjunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.Disjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disjunction::CopyFrom(const Disjunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.Disjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disjunction::IsInitialized() const {
  return true;
}

void Disjunction::InternalSwap(Disjunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&token_groups_)->InternalSwap(CastToBase(&other->token_groups_));
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disjunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conjunction::InitAsDefaultInstance() {
}
class Conjunction::_Internal {
 public:
  using HasBits = decltype(std::declval<Conjunction>()._has_bits_);
};

Conjunction::Conjunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.Conjunction)
}
Conjunction::Conjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  disjunction_id_(arena),
  is_positive_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.Conjunction)
}
Conjunction::Conjunction(const Conjunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disjunction_id_(from.disjunction_id_),
      is_positive_(from.is_positive_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.Conjunction)
}

void Conjunction::SharedCtor() {
}

Conjunction::~Conjunction() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.Conjunction)
  SharedDtor();
}

void Conjunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Conjunction::ArenaDtor(void* object) {
  Conjunction* _this = reinterpret_cast< Conjunction* >(object);
  (void)_this;
}
void Conjunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Conjunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conjunction& Conjunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void Conjunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.Conjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disjunction_id_.Clear();
  is_positive_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Conjunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 disjunction_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_disjunction_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_disjunction_id(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated bool is_positive = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_is_positive(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_is_positive(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Conjunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.Conjunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 disjunction_id = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_disjunction_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 10u, input, this->mutable_disjunction_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool is_positive = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_positive())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_is_positive())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.Conjunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.Conjunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Conjunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.Conjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 disjunction_id = 1 [packed = true];
  if (this->disjunction_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_disjunction_id_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->disjunction_id().data(), this->disjunction_id_size(), output);
  }

  // repeated bool is_positive = 2 [packed = true];
  if (this->is_positive_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_is_positive_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->is_positive().data(), this->is_positive_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.Conjunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* Conjunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.Conjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 disjunction_id = 1 [packed = true];
  if (this->disjunction_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _disjunction_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->disjunction_id_, target);
  }

  // repeated bool is_positive = 2 [packed = true];
  if (this->is_positive_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _is_positive_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->is_positive_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.Conjunction)
  return target;
}

size_t Conjunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.Conjunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 disjunction_id = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->disjunction_id_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _disjunction_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool is_positive = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->is_positive_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_positive_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conjunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.Conjunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Conjunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conjunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.Conjunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.Conjunction)
    MergeFrom(*source);
  }
}

void Conjunction::MergeFrom(const Conjunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.Conjunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disjunction_id_.MergeFrom(from.disjunction_id_);
  is_positive_.MergeFrom(from.is_positive_);
}

void Conjunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.Conjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conjunction::CopyFrom(const Conjunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.Conjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conjunction::IsInitialized() const {
  return true;
}

void Conjunction::InternalSwap(Conjunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disjunction_id_.InternalSwap(&other->disjunction_id_);
  is_positive_.InternalSwap(&other->is_positive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conjunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictDefinition::InitAsDefaultInstance() {
}
class RestrictDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictDefinition>()._has_bits_);
  static void set_has_subs_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RestrictDefinition::RestrictDefinition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.RestrictDefinition)
}
RestrictDefinition::RestrictDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  disjunctions_(arena),
  conjunctions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.RestrictDefinition)
}
RestrictDefinition::RestrictDefinition(const RestrictDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disjunctions_(from.disjunctions_),
      conjunctions_(from.conjunctions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subs_key_ = from.subs_key_;
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.RestrictDefinition)
}

void RestrictDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  subs_key_ = PROTOBUF_ULONGLONG(0);
}

RestrictDefinition::~RestrictDefinition() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.RestrictDefinition)
  SharedDtor();
}

void RestrictDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RestrictDefinition::ArenaDtor(void* object) {
  RestrictDefinition* _this = reinterpret_cast< RestrictDefinition* >(object);
  (void)_this;
}
void RestrictDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestrictDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictDefinition& RestrictDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void RestrictDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.RestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disjunctions_.Clear();
  conjunctions_.Clear();
  subs_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 subs_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_subs_key(&has_bits);
          subs_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.coscann.Disjunction disjunctions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_disjunctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.coscann.Conjunction conjunctions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_conjunctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictDefinition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.RestrictDefinition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subs_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_subs_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subs_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.coscann.Disjunction disjunctions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_disjunctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.coscann.Conjunction conjunctions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_conjunctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.RestrictDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.RestrictDefinition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictDefinition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.RestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subs_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->subs_key(), output);
  }

  // repeated .research_scann.coscann.Disjunction disjunctions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disjunctions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->disjunctions(static_cast<int>(i)),
      output);
  }

  // repeated .research_scann.coscann.Conjunction conjunctions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conjunctions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->conjunctions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.RestrictDefinition)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictDefinition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.RestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subs_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->subs_key(), target);
  }

  // repeated .research_scann.coscann.Disjunction disjunctions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disjunctions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->disjunctions(static_cast<int>(i)), target);
  }

  // repeated .research_scann.coscann.Conjunction conjunctions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conjunctions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->conjunctions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.RestrictDefinition)
  return target;
}

size_t RestrictDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.RestrictDefinition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.Disjunction disjunctions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->disjunctions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->disjunctions(static_cast<int>(i)));
    }
  }

  // repeated .research_scann.coscann.Conjunction conjunctions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->conjunctions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->conjunctions(static_cast<int>(i)));
    }
  }

  // optional fixed64 subs_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.RestrictDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.RestrictDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.RestrictDefinition)
    MergeFrom(*source);
  }
}

void RestrictDefinition::MergeFrom(const RestrictDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.RestrictDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disjunctions_.MergeFrom(from.disjunctions_);
  conjunctions_.MergeFrom(from.conjunctions_);
  if (from.has_subs_key()) {
    set_subs_key(from.subs_key());
  }
}

void RestrictDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.RestrictDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictDefinition::CopyFrom(const RestrictDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.RestrictDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictDefinition::IsInitialized() const {
  return true;
}

void RestrictDefinition::InternalSwap(RestrictDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&disjunctions_)->InternalSwap(CastToBase(&other->disjunctions_));
  CastToBase(&conjunctions_)->InternalSwap(CastToBase(&other->conjunctions_));
  swap(subs_key_, other->subs_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictTokensV2::InitAsDefaultInstance() {
}
class RestrictTokensV2::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictTokensV2>()._has_bits_);
};

RestrictTokensV2::RestrictTokensV2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.RestrictTokensV2)
}
RestrictTokensV2::RestrictTokensV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  token_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.RestrictTokensV2)
}
RestrictTokensV2::RestrictTokensV2(const RestrictTokensV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      token_groups_(from.token_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.RestrictTokensV2)
}

void RestrictTokensV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
}

RestrictTokensV2::~RestrictTokensV2() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.RestrictTokensV2)
  SharedDtor();
}

void RestrictTokensV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RestrictTokensV2::ArenaDtor(void* object) {
  RestrictTokensV2* _this = reinterpret_cast< RestrictTokensV2* >(object);
  (void)_this;
}
void RestrictTokensV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestrictTokensV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictTokensV2& RestrictTokensV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void RestrictTokensV2::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.RestrictTokensV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_groups_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictTokensV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.coscann.TokenGroup token_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_token_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictTokensV2::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.RestrictTokensV2)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.coscann.TokenGroup token_groups = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_token_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.RestrictTokensV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.RestrictTokensV2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictTokensV2::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.RestrictTokensV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.TokenGroup token_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->token_groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.RestrictTokensV2)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictTokensV2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.RestrictTokensV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.TokenGroup token_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->token_groups(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.RestrictTokensV2)
  return target;
}

size_t RestrictTokensV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.RestrictTokensV2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.TokenGroup token_groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->token_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->token_groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictTokensV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.RestrictTokensV2)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictTokensV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictTokensV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.RestrictTokensV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.RestrictTokensV2)
    MergeFrom(*source);
  }
}

void RestrictTokensV2::MergeFrom(const RestrictTokensV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.RestrictTokensV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_groups_.MergeFrom(from.token_groups_);
}

void RestrictTokensV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.RestrictTokensV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictTokensV2::CopyFrom(const RestrictTokensV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.RestrictTokensV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictTokensV2::IsInitialized() const {
  return true;
}

void RestrictTokensV2::InternalSwap(RestrictTokensV2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&token_groups_)->InternalSwap(CastToBase(&other->token_groups_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictTokensV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PackedOptimizationStatistics::InitAsDefaultInstance() {
}
class PackedOptimizationStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<PackedOptimizationStatistics>()._has_bits_);
};

PackedOptimizationStatistics::PackedOptimizationStatistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.PackedOptimizationStatistics)
}
PackedOptimizationStatistics::PackedOptimizationStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  disjunction_keys_(arena),
  disjunction_freqs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.PackedOptimizationStatistics)
}
PackedOptimizationStatistics::PackedOptimizationStatistics(const PackedOptimizationStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disjunction_keys_(from.disjunction_keys_),
      disjunction_freqs_(from.disjunction_freqs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.PackedOptimizationStatistics)
}

void PackedOptimizationStatistics::SharedCtor() {
}

PackedOptimizationStatistics::~PackedOptimizationStatistics() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.PackedOptimizationStatistics)
  SharedDtor();
}

void PackedOptimizationStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PackedOptimizationStatistics::ArenaDtor(void* object) {
  PackedOptimizationStatistics* _this = reinterpret_cast< PackedOptimizationStatistics* >(object);
  (void)_this;
}
void PackedOptimizationStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackedOptimizationStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackedOptimizationStatistics& PackedOptimizationStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackedOptimizationStatistics_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void PackedOptimizationStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.PackedOptimizationStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disjunction_keys_.Clear();
  disjunction_freqs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PackedOptimizationStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 disjunction_keys = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_disjunction_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_disjunction_keys(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated float disjunction_freqs = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_disjunction_freqs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_disjunction_freqs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PackedOptimizationStatistics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.PackedOptimizationStatistics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 disjunction_keys = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_disjunction_keys())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 10u, input, this->mutable_disjunction_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float disjunction_freqs = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_disjunction_freqs())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_disjunction_freqs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.PackedOptimizationStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.PackedOptimizationStatistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PackedOptimizationStatistics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.PackedOptimizationStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 disjunction_keys = 1 [packed = true];
  if (this->disjunction_keys_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_disjunction_keys_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->disjunction_keys().data(), this->disjunction_keys_size(), output);
  }

  // repeated float disjunction_freqs = 2 [packed = true];
  if (this->disjunction_freqs_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_disjunction_freqs_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->disjunction_freqs().data(), this->disjunction_freqs_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.PackedOptimizationStatistics)
}

::PROTOBUF_NAMESPACE_ID::uint8* PackedOptimizationStatistics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.PackedOptimizationStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 disjunction_keys = 1 [packed = true];
  if (this->disjunction_keys_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _disjunction_keys_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->disjunction_keys_, target);
  }

  // repeated float disjunction_freqs = 2 [packed = true];
  if (this->disjunction_freqs_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _disjunction_freqs_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->disjunction_freqs_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.PackedOptimizationStatistics)
  return target;
}

size_t PackedOptimizationStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.PackedOptimizationStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 disjunction_keys = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->disjunction_keys_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _disjunction_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float disjunction_freqs = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->disjunction_freqs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _disjunction_freqs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackedOptimizationStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.PackedOptimizationStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const PackedOptimizationStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackedOptimizationStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.PackedOptimizationStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.PackedOptimizationStatistics)
    MergeFrom(*source);
  }
}

void PackedOptimizationStatistics::MergeFrom(const PackedOptimizationStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.PackedOptimizationStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disjunction_keys_.MergeFrom(from.disjunction_keys_);
  disjunction_freqs_.MergeFrom(from.disjunction_freqs_);
}

void PackedOptimizationStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.PackedOptimizationStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackedOptimizationStatistics::CopyFrom(const PackedOptimizationStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.PackedOptimizationStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedOptimizationStatistics::IsInitialized() const {
  return true;
}

void PackedOptimizationStatistics::InternalSwap(PackedOptimizationStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disjunction_keys_.InternalSwap(&other->disjunction_keys_);
  disjunction_freqs_.InternalSwap(&other->disjunction_freqs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackedOptimizationStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EasyDisjunction::InitAsDefaultInstance() {
}
class EasyDisjunction::_Internal {
 public:
  using HasBits = decltype(std::declval<EasyDisjunction>()._has_bits_);
  static void set_has_is_positive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EasyDisjunction::EasyDisjunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.EasyDisjunction)
}
EasyDisjunction::EasyDisjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  token_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.EasyDisjunction)
}
EasyDisjunction::EasyDisjunction(const EasyDisjunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      token_groups_(from.token_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_positive_ = from.is_positive_;
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.EasyDisjunction)
}

void EasyDisjunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  is_positive_ = true;
}

EasyDisjunction::~EasyDisjunction() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.EasyDisjunction)
  SharedDtor();
}

void EasyDisjunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void EasyDisjunction::ArenaDtor(void* object) {
  EasyDisjunction* _this = reinterpret_cast< EasyDisjunction* >(object);
  (void)_this;
}
void EasyDisjunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyDisjunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EasyDisjunction& EasyDisjunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EasyDisjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void EasyDisjunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.EasyDisjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_groups_.Clear();
  is_positive_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EasyDisjunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_positive = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_positive(&has_bits);
          is_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.coscann.TokenGroup token_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_token_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EasyDisjunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.EasyDisjunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_positive = 1 [default = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_positive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.coscann.TokenGroup token_groups = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_token_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.EasyDisjunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.EasyDisjunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EasyDisjunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.EasyDisjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_positive = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_positive(), output);
  }

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->token_groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.EasyDisjunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyDisjunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.EasyDisjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_positive = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_positive(), target);
  }

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_groups_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->token_groups(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.EasyDisjunction)
  return target;
}

size_t EasyDisjunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.EasyDisjunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->token_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->token_groups(static_cast<int>(i)));
    }
  }

  // optional bool is_positive = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasyDisjunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.EasyDisjunction)
  GOOGLE_DCHECK_NE(&from, this);
  const EasyDisjunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EasyDisjunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.EasyDisjunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.EasyDisjunction)
    MergeFrom(*source);
  }
}

void EasyDisjunction::MergeFrom(const EasyDisjunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.EasyDisjunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_groups_.MergeFrom(from.token_groups_);
  if (from.has_is_positive()) {
    set_is_positive(from.is_positive());
  }
}

void EasyDisjunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.EasyDisjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasyDisjunction::CopyFrom(const EasyDisjunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.EasyDisjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyDisjunction::IsInitialized() const {
  return true;
}

void EasyDisjunction::InternalSwap(EasyDisjunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&token_groups_)->InternalSwap(CastToBase(&other->token_groups_));
  swap(is_positive_, other->is_positive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyDisjunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EasyConjunction::InitAsDefaultInstance() {
}
class EasyConjunction::_Internal {
 public:
  using HasBits = decltype(std::declval<EasyConjunction>()._has_bits_);
};

EasyConjunction::EasyConjunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.EasyConjunction)
}
EasyConjunction::EasyConjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  disjunctions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.EasyConjunction)
}
EasyConjunction::EasyConjunction(const EasyConjunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disjunctions_(from.disjunctions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.EasyConjunction)
}

void EasyConjunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
}

EasyConjunction::~EasyConjunction() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.EasyConjunction)
  SharedDtor();
}

void EasyConjunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void EasyConjunction::ArenaDtor(void* object) {
  EasyConjunction* _this = reinterpret_cast< EasyConjunction* >(object);
  (void)_this;
}
void EasyConjunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyConjunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EasyConjunction& EasyConjunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EasyConjunction_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void EasyConjunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.EasyConjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disjunctions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EasyConjunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_disjunctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EasyConjunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.EasyConjunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_disjunctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.EasyConjunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.EasyConjunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EasyConjunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.EasyConjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disjunctions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->disjunctions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.EasyConjunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyConjunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.EasyConjunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disjunctions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->disjunctions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.EasyConjunction)
  return target;
}

size_t EasyConjunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.EasyConjunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->disjunctions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->disjunctions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasyConjunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.EasyConjunction)
  GOOGLE_DCHECK_NE(&from, this);
  const EasyConjunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EasyConjunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.EasyConjunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.EasyConjunction)
    MergeFrom(*source);
  }
}

void EasyConjunction::MergeFrom(const EasyConjunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.EasyConjunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disjunctions_.MergeFrom(from.disjunctions_);
}

void EasyConjunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.EasyConjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasyConjunction::CopyFrom(const EasyConjunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.EasyConjunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyConjunction::IsInitialized() const {
  return true;
}

void EasyConjunction::InternalSwap(EasyConjunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&disjunctions_)->InternalSwap(CastToBase(&other->disjunctions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyConjunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EasyRestrictDefinition::InitAsDefaultInstance() {
}
class EasyRestrictDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<EasyRestrictDefinition>()._has_bits_);
};

EasyRestrictDefinition::EasyRestrictDefinition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.coscann.EasyRestrictDefinition)
}
EasyRestrictDefinition::EasyRestrictDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  conjunctions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.coscann.EasyRestrictDefinition)
}
EasyRestrictDefinition::EasyRestrictDefinition(const EasyRestrictDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      conjunctions_(from.conjunctions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.coscann.EasyRestrictDefinition)
}

void EasyRestrictDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
}

EasyRestrictDefinition::~EasyRestrictDefinition() {
  // @@protoc_insertion_point(destructor:research_scann.coscann.EasyRestrictDefinition)
  SharedDtor();
}

void EasyRestrictDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void EasyRestrictDefinition::ArenaDtor(void* object) {
  EasyRestrictDefinition* _this = reinterpret_cast< EasyRestrictDefinition* >(object);
  (void)_this;
}
void EasyRestrictDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyRestrictDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EasyRestrictDefinition& EasyRestrictDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base);
  return *internal_default_instance();
}


void EasyRestrictDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.coscann.EasyRestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conjunctions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EasyRestrictDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_conjunctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EasyRestrictDefinition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.coscann.EasyRestrictDefinition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_conjunctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.coscann.EasyRestrictDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.coscann.EasyRestrictDefinition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EasyRestrictDefinition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.coscann.EasyRestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conjunctions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->conjunctions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.coscann.EasyRestrictDefinition)
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyRestrictDefinition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.coscann.EasyRestrictDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conjunctions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->conjunctions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.coscann.EasyRestrictDefinition)
  return target;
}

size_t EasyRestrictDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.coscann.EasyRestrictDefinition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->conjunctions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->conjunctions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EasyRestrictDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.coscann.EasyRestrictDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const EasyRestrictDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EasyRestrictDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.coscann.EasyRestrictDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.coscann.EasyRestrictDefinition)
    MergeFrom(*source);
  }
}

void EasyRestrictDefinition::MergeFrom(const EasyRestrictDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.coscann.EasyRestrictDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conjunctions_.MergeFrom(from.conjunctions_);
}

void EasyRestrictDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.coscann.EasyRestrictDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EasyRestrictDefinition::CopyFrom(const EasyRestrictDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.coscann.EasyRestrictDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyRestrictDefinition::IsInitialized() const {
  return true;
}

void EasyRestrictDefinition::InternalSwap(EasyRestrictDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&conjunctions_)->InternalSwap(CastToBase(&other->conjunctions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyRestrictDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coscann
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::coscann::TokenGroup* Arena::CreateMaybeMessage< ::research_scann::coscann::TokenGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::TokenGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::Disjunction* Arena::CreateMaybeMessage< ::research_scann::coscann::Disjunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::Disjunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::Conjunction* Arena::CreateMaybeMessage< ::research_scann::coscann::Conjunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::Conjunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::RestrictDefinition* Arena::CreateMaybeMessage< ::research_scann::coscann::RestrictDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::RestrictDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::RestrictTokensV2* Arena::CreateMaybeMessage< ::research_scann::coscann::RestrictTokensV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::RestrictTokensV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::PackedOptimizationStatistics* Arena::CreateMaybeMessage< ::research_scann::coscann::PackedOptimizationStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::PackedOptimizationStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::EasyDisjunction* Arena::CreateMaybeMessage< ::research_scann::coscann::EasyDisjunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::EasyDisjunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::EasyConjunction* Arena::CreateMaybeMessage< ::research_scann::coscann::EasyConjunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::EasyConjunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::coscann::EasyRestrictDefinition* Arena::CreateMaybeMessage< ::research_scann::coscann::EasyRestrictDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::coscann::EasyRestrictDefinition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
