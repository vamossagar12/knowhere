// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/coscann/v2_restricts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fcoscann_2fv2_5frestricts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fcoscann_2fv2_5frestricts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto;
namespace research_scann {
namespace coscann {
class Conjunction;
class ConjunctionDefaultTypeInternal;
extern ConjunctionDefaultTypeInternal _Conjunction_default_instance_;
class Disjunction;
class DisjunctionDefaultTypeInternal;
extern DisjunctionDefaultTypeInternal _Disjunction_default_instance_;
class EasyConjunction;
class EasyConjunctionDefaultTypeInternal;
extern EasyConjunctionDefaultTypeInternal _EasyConjunction_default_instance_;
class EasyDisjunction;
class EasyDisjunctionDefaultTypeInternal;
extern EasyDisjunctionDefaultTypeInternal _EasyDisjunction_default_instance_;
class EasyRestrictDefinition;
class EasyRestrictDefinitionDefaultTypeInternal;
extern EasyRestrictDefinitionDefaultTypeInternal _EasyRestrictDefinition_default_instance_;
class PackedOptimizationStatistics;
class PackedOptimizationStatisticsDefaultTypeInternal;
extern PackedOptimizationStatisticsDefaultTypeInternal _PackedOptimizationStatistics_default_instance_;
class RestrictDefinition;
class RestrictDefinitionDefaultTypeInternal;
extern RestrictDefinitionDefaultTypeInternal _RestrictDefinition_default_instance_;
class RestrictTokensV2;
class RestrictTokensV2DefaultTypeInternal;
extern RestrictTokensV2DefaultTypeInternal _RestrictTokensV2_default_instance_;
class TokenGroup;
class TokenGroupDefaultTypeInternal;
extern TokenGroupDefaultTypeInternal _TokenGroup_default_instance_;
}  // namespace coscann
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::coscann::Conjunction* Arena::CreateMaybeMessage<::research_scann::coscann::Conjunction>(Arena*);
template<> ::research_scann::coscann::Disjunction* Arena::CreateMaybeMessage<::research_scann::coscann::Disjunction>(Arena*);
template<> ::research_scann::coscann::EasyConjunction* Arena::CreateMaybeMessage<::research_scann::coscann::EasyConjunction>(Arena*);
template<> ::research_scann::coscann::EasyDisjunction* Arena::CreateMaybeMessage<::research_scann::coscann::EasyDisjunction>(Arena*);
template<> ::research_scann::coscann::EasyRestrictDefinition* Arena::CreateMaybeMessage<::research_scann::coscann::EasyRestrictDefinition>(Arena*);
template<> ::research_scann::coscann::PackedOptimizationStatistics* Arena::CreateMaybeMessage<::research_scann::coscann::PackedOptimizationStatistics>(Arena*);
template<> ::research_scann::coscann::RestrictDefinition* Arena::CreateMaybeMessage<::research_scann::coscann::RestrictDefinition>(Arena*);
template<> ::research_scann::coscann::RestrictTokensV2* Arena::CreateMaybeMessage<::research_scann::coscann::RestrictTokensV2>(Arena*);
template<> ::research_scann::coscann::TokenGroup* Arena::CreateMaybeMessage<::research_scann::coscann::TokenGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {
namespace coscann {

// ===================================================================

class TokenGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.TokenGroup) */ {
 public:
  TokenGroup();
  virtual ~TokenGroup();

  TokenGroup(const TokenGroup& from);
  TokenGroup(TokenGroup&& from) noexcept
    : TokenGroup() {
    *this = ::std::move(from);
  }

  inline TokenGroup& operator=(const TokenGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenGroup& operator=(TokenGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenGroup* internal_default_instance() {
    return reinterpret_cast<const TokenGroup*>(
               &_TokenGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenGroup& a, TokenGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenGroup* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenGroup* New() const final {
    return CreateMaybeMessage<TokenGroup>(nullptr);
  }

  TokenGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenGroup& from);
  void MergeFrom(const TokenGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.TokenGroup";
  }
  protected:
  explicit TokenGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kDebugTokenStringsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated fixed64 tokens = 2 [packed = true];
  int tokens_size() const;
  void clear_tokens();
  ::PROTOBUF_NAMESPACE_ID::uint64 tokens(int index) const;
  void set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_tokens();

  // repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
  int debug_token_strings_size() const;
  void clear_debug_token_strings();
 private:
  // Hidden due to unknown ctype option.
  const std::string& debug_token_strings(int index) const;
  std::string* mutable_debug_token_strings(int index);
  void set_debug_token_strings(int index, const std::string& value);
  void set_debug_token_strings(int index, std::string&& value);
  void set_debug_token_strings(int index, const char* value);
  void set_debug_token_strings(int index, const char* value, size_t size);
  std::string* add_debug_token_strings();
  void add_debug_token_strings(const std::string& value);
  void add_debug_token_strings(std::string&& value);
  void add_debug_token_strings(const char* value);
  void add_debug_token_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& debug_token_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_debug_token_strings();
 public:

  // optional string name = 1 [ctype = STRING_PIECE];
  bool has_name() const;
  void clear_name();
 private:
  // Hidden due to unknown ctype option.
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
 public:

  // @@protoc_insertion_point(class_scope:research_scann.coscann.TokenGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > tokens_;
  mutable std::atomic<int> _tokens_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> debug_token_strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class Disjunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.Disjunction) */ {
 public:
  Disjunction();
  virtual ~Disjunction();

  Disjunction(const Disjunction& from);
  Disjunction(Disjunction&& from) noexcept
    : Disjunction() {
    *this = ::std::move(from);
  }

  inline Disjunction& operator=(const Disjunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disjunction& operator=(Disjunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Disjunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Disjunction* internal_default_instance() {
    return reinterpret_cast<const Disjunction*>(
               &_Disjunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Disjunction& a, Disjunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Disjunction* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disjunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Disjunction* New() const final {
    return CreateMaybeMessage<Disjunction>(nullptr);
  }

  Disjunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Disjunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Disjunction& from);
  void MergeFrom(const Disjunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disjunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.Disjunction";
  }
  protected:
  explicit Disjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenGroupsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  int token_groups_size() const;
  void clear_token_groups();
  ::research_scann::coscann::TokenGroup* mutable_token_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
      mutable_token_groups();
  const ::research_scann::coscann::TokenGroup& token_groups(int index) const;
  ::research_scann::coscann::TokenGroup* add_token_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
      token_groups() const;

  // optional fixed64 key = 1;
  bool has_key() const;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:research_scann.coscann.Disjunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup > token_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class Conjunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.Conjunction) */ {
 public:
  Conjunction();
  virtual ~Conjunction();

  Conjunction(const Conjunction& from);
  Conjunction(Conjunction&& from) noexcept
    : Conjunction() {
    *this = ::std::move(from);
  }

  inline Conjunction& operator=(const Conjunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conjunction& operator=(Conjunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conjunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conjunction* internal_default_instance() {
    return reinterpret_cast<const Conjunction*>(
               &_Conjunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Conjunction& a, Conjunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Conjunction* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conjunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conjunction* New() const final {
    return CreateMaybeMessage<Conjunction>(nullptr);
  }

  Conjunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conjunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conjunction& from);
  void MergeFrom(const Conjunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conjunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.Conjunction";
  }
  protected:
  explicit Conjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisjunctionIdFieldNumber = 1,
    kIsPositiveFieldNumber = 2,
  };
  // repeated fixed64 disjunction_id = 1 [packed = true];
  int disjunction_id_size() const;
  void clear_disjunction_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 disjunction_id(int index) const;
  void set_disjunction_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_disjunction_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      disjunction_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_disjunction_id();

  // repeated bool is_positive = 2 [packed = true];
  int is_positive_size() const;
  void clear_is_positive();
  bool is_positive(int index) const;
  void set_is_positive(int index, bool value);
  void add_is_positive(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_positive() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_positive();

  // @@protoc_insertion_point(class_scope:research_scann.coscann.Conjunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > disjunction_id_;
  mutable std::atomic<int> _disjunction_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_positive_;
  mutable std::atomic<int> _is_positive_cached_byte_size_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class RestrictDefinition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.RestrictDefinition) */ {
 public:
  RestrictDefinition();
  virtual ~RestrictDefinition();

  RestrictDefinition(const RestrictDefinition& from);
  RestrictDefinition(RestrictDefinition&& from) noexcept
    : RestrictDefinition() {
    *this = ::std::move(from);
  }

  inline RestrictDefinition& operator=(const RestrictDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictDefinition& operator=(RestrictDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictDefinition* internal_default_instance() {
    return reinterpret_cast<const RestrictDefinition*>(
               &_RestrictDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RestrictDefinition& a, RestrictDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictDefinition* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictDefinition* New() const final {
    return CreateMaybeMessage<RestrictDefinition>(nullptr);
  }

  RestrictDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictDefinition& from);
  void MergeFrom(const RestrictDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.RestrictDefinition";
  }
  protected:
  explicit RestrictDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisjunctionsFieldNumber = 3,
    kConjunctionsFieldNumber = 4,
    kSubsKeyFieldNumber = 1,
  };
  // repeated .research_scann.coscann.Disjunction disjunctions = 3;
  int disjunctions_size() const;
  void clear_disjunctions();
  ::research_scann::coscann::Disjunction* mutable_disjunctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Disjunction >*
      mutable_disjunctions();
  const ::research_scann::coscann::Disjunction& disjunctions(int index) const;
  ::research_scann::coscann::Disjunction* add_disjunctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Disjunction >&
      disjunctions() const;

  // repeated .research_scann.coscann.Conjunction conjunctions = 4;
  int conjunctions_size() const;
  void clear_conjunctions();
  ::research_scann::coscann::Conjunction* mutable_conjunctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Conjunction >*
      mutable_conjunctions();
  const ::research_scann::coscann::Conjunction& conjunctions(int index) const;
  ::research_scann::coscann::Conjunction* add_conjunctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Conjunction >&
      conjunctions() const;

  // optional fixed64 subs_key = 1;
  bool has_subs_key() const;
  void clear_subs_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 subs_key() const;
  void set_subs_key(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:research_scann.coscann.RestrictDefinition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Disjunction > disjunctions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Conjunction > conjunctions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subs_key_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class RestrictTokensV2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.RestrictTokensV2) */ {
 public:
  RestrictTokensV2();
  virtual ~RestrictTokensV2();

  RestrictTokensV2(const RestrictTokensV2& from);
  RestrictTokensV2(RestrictTokensV2&& from) noexcept
    : RestrictTokensV2() {
    *this = ::std::move(from);
  }

  inline RestrictTokensV2& operator=(const RestrictTokensV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictTokensV2& operator=(RestrictTokensV2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictTokensV2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictTokensV2* internal_default_instance() {
    return reinterpret_cast<const RestrictTokensV2*>(
               &_RestrictTokensV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RestrictTokensV2& a, RestrictTokensV2& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictTokensV2* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictTokensV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictTokensV2* New() const final {
    return CreateMaybeMessage<RestrictTokensV2>(nullptr);
  }

  RestrictTokensV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictTokensV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictTokensV2& from);
  void MergeFrom(const RestrictTokensV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictTokensV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.RestrictTokensV2";
  }
  protected:
  explicit RestrictTokensV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenGroupsFieldNumber = 1,
  };
  // repeated .research_scann.coscann.TokenGroup token_groups = 1;
  int token_groups_size() const;
  void clear_token_groups();
  ::research_scann::coscann::TokenGroup* mutable_token_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
      mutable_token_groups();
  const ::research_scann::coscann::TokenGroup& token_groups(int index) const;
  ::research_scann::coscann::TokenGroup* add_token_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
      token_groups() const;

  // @@protoc_insertion_point(class_scope:research_scann.coscann.RestrictTokensV2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup > token_groups_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class PackedOptimizationStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.PackedOptimizationStatistics) */ {
 public:
  PackedOptimizationStatistics();
  virtual ~PackedOptimizationStatistics();

  PackedOptimizationStatistics(const PackedOptimizationStatistics& from);
  PackedOptimizationStatistics(PackedOptimizationStatistics&& from) noexcept
    : PackedOptimizationStatistics() {
    *this = ::std::move(from);
  }

  inline PackedOptimizationStatistics& operator=(const PackedOptimizationStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackedOptimizationStatistics& operator=(PackedOptimizationStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackedOptimizationStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackedOptimizationStatistics* internal_default_instance() {
    return reinterpret_cast<const PackedOptimizationStatistics*>(
               &_PackedOptimizationStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PackedOptimizationStatistics& a, PackedOptimizationStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(PackedOptimizationStatistics* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackedOptimizationStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackedOptimizationStatistics* New() const final {
    return CreateMaybeMessage<PackedOptimizationStatistics>(nullptr);
  }

  PackedOptimizationStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackedOptimizationStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackedOptimizationStatistics& from);
  void MergeFrom(const PackedOptimizationStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackedOptimizationStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.PackedOptimizationStatistics";
  }
  protected:
  explicit PackedOptimizationStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisjunctionKeysFieldNumber = 1,
    kDisjunctionFreqsFieldNumber = 2,
  };
  // repeated fixed64 disjunction_keys = 1 [packed = true];
  int disjunction_keys_size() const;
  void clear_disjunction_keys();
  ::PROTOBUF_NAMESPACE_ID::uint64 disjunction_keys(int index) const;
  void set_disjunction_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_disjunction_keys(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      disjunction_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_disjunction_keys();

  // repeated float disjunction_freqs = 2 [packed = true];
  int disjunction_freqs_size() const;
  void clear_disjunction_freqs();
  float disjunction_freqs(int index) const;
  void set_disjunction_freqs(int index, float value);
  void add_disjunction_freqs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      disjunction_freqs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_disjunction_freqs();

  // @@protoc_insertion_point(class_scope:research_scann.coscann.PackedOptimizationStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > disjunction_keys_;
  mutable std::atomic<int> _disjunction_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > disjunction_freqs_;
  mutable std::atomic<int> _disjunction_freqs_cached_byte_size_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class EasyDisjunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.EasyDisjunction) */ {
 public:
  EasyDisjunction();
  virtual ~EasyDisjunction();

  EasyDisjunction(const EasyDisjunction& from);
  EasyDisjunction(EasyDisjunction&& from) noexcept
    : EasyDisjunction() {
    *this = ::std::move(from);
  }

  inline EasyDisjunction& operator=(const EasyDisjunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EasyDisjunction& operator=(EasyDisjunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EasyDisjunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasyDisjunction* internal_default_instance() {
    return reinterpret_cast<const EasyDisjunction*>(
               &_EasyDisjunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EasyDisjunction& a, EasyDisjunction& b) {
    a.Swap(&b);
  }
  inline void Swap(EasyDisjunction* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EasyDisjunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EasyDisjunction* New() const final {
    return CreateMaybeMessage<EasyDisjunction>(nullptr);
  }

  EasyDisjunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EasyDisjunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EasyDisjunction& from);
  void MergeFrom(const EasyDisjunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasyDisjunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.EasyDisjunction";
  }
  protected:
  explicit EasyDisjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenGroupsFieldNumber = 2,
    kIsPositiveFieldNumber = 1,
  };
  // repeated .research_scann.coscann.TokenGroup token_groups = 2;
  int token_groups_size() const;
  void clear_token_groups();
  ::research_scann::coscann::TokenGroup* mutable_token_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
      mutable_token_groups();
  const ::research_scann::coscann::TokenGroup& token_groups(int index) const;
  ::research_scann::coscann::TokenGroup* add_token_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
      token_groups() const;

  // optional bool is_positive = 1 [default = true];
  bool has_is_positive() const;
  void clear_is_positive();
  bool is_positive() const;
  void set_is_positive(bool value);

  // @@protoc_insertion_point(class_scope:research_scann.coscann.EasyDisjunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup > token_groups_;
  bool is_positive_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class EasyConjunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.EasyConjunction) */ {
 public:
  EasyConjunction();
  virtual ~EasyConjunction();

  EasyConjunction(const EasyConjunction& from);
  EasyConjunction(EasyConjunction&& from) noexcept
    : EasyConjunction() {
    *this = ::std::move(from);
  }

  inline EasyConjunction& operator=(const EasyConjunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EasyConjunction& operator=(EasyConjunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EasyConjunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasyConjunction* internal_default_instance() {
    return reinterpret_cast<const EasyConjunction*>(
               &_EasyConjunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EasyConjunction& a, EasyConjunction& b) {
    a.Swap(&b);
  }
  inline void Swap(EasyConjunction* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EasyConjunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EasyConjunction* New() const final {
    return CreateMaybeMessage<EasyConjunction>(nullptr);
  }

  EasyConjunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EasyConjunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EasyConjunction& from);
  void MergeFrom(const EasyConjunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasyConjunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.EasyConjunction";
  }
  protected:
  explicit EasyConjunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisjunctionsFieldNumber = 1,
  };
  // repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
  int disjunctions_size() const;
  void clear_disjunctions();
  ::research_scann::coscann::EasyDisjunction* mutable_disjunctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyDisjunction >*
      mutable_disjunctions();
  const ::research_scann::coscann::EasyDisjunction& disjunctions(int index) const;
  ::research_scann::coscann::EasyDisjunction* add_disjunctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyDisjunction >&
      disjunctions() const;

  // @@protoc_insertion_point(class_scope:research_scann.coscann.EasyConjunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyDisjunction > disjunctions_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// -------------------------------------------------------------------

class EasyRestrictDefinition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.coscann.EasyRestrictDefinition) */ {
 public:
  EasyRestrictDefinition();
  virtual ~EasyRestrictDefinition();

  EasyRestrictDefinition(const EasyRestrictDefinition& from);
  EasyRestrictDefinition(EasyRestrictDefinition&& from) noexcept
    : EasyRestrictDefinition() {
    *this = ::std::move(from);
  }

  inline EasyRestrictDefinition& operator=(const EasyRestrictDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EasyRestrictDefinition& operator=(EasyRestrictDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EasyRestrictDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EasyRestrictDefinition* internal_default_instance() {
    return reinterpret_cast<const EasyRestrictDefinition*>(
               &_EasyRestrictDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EasyRestrictDefinition& a, EasyRestrictDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(EasyRestrictDefinition* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EasyRestrictDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EasyRestrictDefinition* New() const final {
    return CreateMaybeMessage<EasyRestrictDefinition>(nullptr);
  }

  EasyRestrictDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EasyRestrictDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EasyRestrictDefinition& from);
  void MergeFrom(const EasyRestrictDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasyRestrictDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.coscann.EasyRestrictDefinition";
  }
  protected:
  explicit EasyRestrictDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto);
    return ::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConjunctionsFieldNumber = 1,
  };
  // repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
  int conjunctions_size() const;
  void clear_conjunctions();
  ::research_scann::coscann::EasyConjunction* mutable_conjunctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyConjunction >*
      mutable_conjunctions();
  const ::research_scann::coscann::EasyConjunction& conjunctions(int index) const;
  ::research_scann::coscann::EasyConjunction* add_conjunctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyConjunction >&
      conjunctions() const;

  // @@protoc_insertion_point(class_scope:research_scann.coscann.EasyRestrictDefinition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyConjunction > conjunctions_;
  friend struct ::TableStruct_scann_2fcoscann_2fv2_5frestricts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenGroup

// optional string name = 1 [ctype = STRING_PIECE];
inline bool TokenGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenGroup::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenGroup::name() const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.TokenGroup.name)
  return name_.Get();
}
inline void TokenGroup::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.coscann.TokenGroup.name)
}
inline void TokenGroup::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.coscann.TokenGroup.name)
}
inline void TokenGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.coscann.TokenGroup.name)
}
inline void TokenGroup::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.coscann.TokenGroup.name)
}
inline std::string* TokenGroup::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.TokenGroup.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TokenGroup::release_name() {
  // @@protoc_insertion_point(field_release:research_scann.coscann.TokenGroup.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TokenGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.coscann.TokenGroup.name)
}
inline std::string* TokenGroup::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.coscann.TokenGroup.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TokenGroup::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.coscann.TokenGroup.name)
}

// repeated fixed64 tokens = 2 [packed = true];
inline int TokenGroup::tokens_size() const {
  return tokens_.size();
}
inline void TokenGroup::clear_tokens() {
  tokens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenGroup::tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.TokenGroup.tokens)
  return tokens_.Get(index);
}
inline void TokenGroup::set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.coscann.TokenGroup.tokens)
}
inline void TokenGroup::add_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  tokens_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.TokenGroup.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TokenGroup::tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.TokenGroup.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TokenGroup::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.TokenGroup.tokens)
  return &tokens_;
}

// repeated string debug_token_strings = 3 [ctype = STRING_PIECE];
inline int TokenGroup::debug_token_strings_size() const {
  return debug_token_strings_.size();
}
inline void TokenGroup::clear_debug_token_strings() {
  debug_token_strings_.Clear();
}
inline const std::string& TokenGroup::debug_token_strings(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.TokenGroup.debug_token_strings)
  return debug_token_strings_.Get(index);
}
inline std::string* TokenGroup::mutable_debug_token_strings(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.TokenGroup.debug_token_strings)
  return debug_token_strings_.Mutable(index);
}
inline void TokenGroup::set_debug_token_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:research_scann.coscann.TokenGroup.debug_token_strings)
  debug_token_strings_.Mutable(index)->assign(value);
}
inline void TokenGroup::set_debug_token_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:research_scann.coscann.TokenGroup.debug_token_strings)
  debug_token_strings_.Mutable(index)->assign(std::move(value));
}
inline void TokenGroup::set_debug_token_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_token_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline void TokenGroup::set_debug_token_strings(int index, const char* value, size_t size) {
  debug_token_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline std::string* TokenGroup::add_debug_token_strings() {
  // @@protoc_insertion_point(field_add_mutable:research_scann.coscann.TokenGroup.debug_token_strings)
  return debug_token_strings_.Add();
}
inline void TokenGroup::add_debug_token_strings(const std::string& value) {
  debug_token_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline void TokenGroup::add_debug_token_strings(std::string&& value) {
  debug_token_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline void TokenGroup::add_debug_token_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_token_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline void TokenGroup::add_debug_token_strings(const char* value, size_t size) {
  debug_token_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:research_scann.coscann.TokenGroup.debug_token_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenGroup::debug_token_strings() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.TokenGroup.debug_token_strings)
  return debug_token_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenGroup::mutable_debug_token_strings() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.TokenGroup.debug_token_strings)
  return &debug_token_strings_;
}

// -------------------------------------------------------------------

// Disjunction

// optional fixed64 key = 1;
inline bool Disjunction::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Disjunction::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Disjunction::key() const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.Disjunction.key)
  return key_;
}
inline void Disjunction::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  key_ = value;
  // @@protoc_insertion_point(field_set:research_scann.coscann.Disjunction.key)
}

// repeated .research_scann.coscann.TokenGroup token_groups = 2;
inline int Disjunction::token_groups_size() const {
  return token_groups_.size();
}
inline void Disjunction::clear_token_groups() {
  token_groups_.Clear();
}
inline ::research_scann::coscann::TokenGroup* Disjunction::mutable_token_groups(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.Disjunction.token_groups)
  return token_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
Disjunction::mutable_token_groups() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.Disjunction.token_groups)
  return &token_groups_;
}
inline const ::research_scann::coscann::TokenGroup& Disjunction::token_groups(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.Disjunction.token_groups)
  return token_groups_.Get(index);
}
inline ::research_scann::coscann::TokenGroup* Disjunction::add_token_groups() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.Disjunction.token_groups)
  return token_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
Disjunction::token_groups() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.Disjunction.token_groups)
  return token_groups_;
}

// -------------------------------------------------------------------

// Conjunction

// repeated fixed64 disjunction_id = 1 [packed = true];
inline int Conjunction::disjunction_id_size() const {
  return disjunction_id_.size();
}
inline void Conjunction::clear_disjunction_id() {
  disjunction_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conjunction::disjunction_id(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.Conjunction.disjunction_id)
  return disjunction_id_.Get(index);
}
inline void Conjunction::set_disjunction_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  disjunction_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.coscann.Conjunction.disjunction_id)
}
inline void Conjunction::add_disjunction_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  disjunction_id_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.Conjunction.disjunction_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Conjunction::disjunction_id() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.Conjunction.disjunction_id)
  return disjunction_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Conjunction::mutable_disjunction_id() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.Conjunction.disjunction_id)
  return &disjunction_id_;
}

// repeated bool is_positive = 2 [packed = true];
inline int Conjunction::is_positive_size() const {
  return is_positive_.size();
}
inline void Conjunction::clear_is_positive() {
  is_positive_.Clear();
}
inline bool Conjunction::is_positive(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.Conjunction.is_positive)
  return is_positive_.Get(index);
}
inline void Conjunction::set_is_positive(int index, bool value) {
  is_positive_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.coscann.Conjunction.is_positive)
}
inline void Conjunction::add_is_positive(bool value) {
  is_positive_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.Conjunction.is_positive)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Conjunction::is_positive() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.Conjunction.is_positive)
  return is_positive_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Conjunction::mutable_is_positive() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.Conjunction.is_positive)
  return &is_positive_;
}

// -------------------------------------------------------------------

// RestrictDefinition

// optional fixed64 subs_key = 1;
inline bool RestrictDefinition::has_subs_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestrictDefinition::clear_subs_key() {
  subs_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestrictDefinition::subs_key() const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.RestrictDefinition.subs_key)
  return subs_key_;
}
inline void RestrictDefinition::set_subs_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  subs_key_ = value;
  // @@protoc_insertion_point(field_set:research_scann.coscann.RestrictDefinition.subs_key)
}

// repeated .research_scann.coscann.Disjunction disjunctions = 3;
inline int RestrictDefinition::disjunctions_size() const {
  return disjunctions_.size();
}
inline void RestrictDefinition::clear_disjunctions() {
  disjunctions_.Clear();
}
inline ::research_scann::coscann::Disjunction* RestrictDefinition::mutable_disjunctions(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.RestrictDefinition.disjunctions)
  return disjunctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Disjunction >*
RestrictDefinition::mutable_disjunctions() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.RestrictDefinition.disjunctions)
  return &disjunctions_;
}
inline const ::research_scann::coscann::Disjunction& RestrictDefinition::disjunctions(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.RestrictDefinition.disjunctions)
  return disjunctions_.Get(index);
}
inline ::research_scann::coscann::Disjunction* RestrictDefinition::add_disjunctions() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.RestrictDefinition.disjunctions)
  return disjunctions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Disjunction >&
RestrictDefinition::disjunctions() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.RestrictDefinition.disjunctions)
  return disjunctions_;
}

// repeated .research_scann.coscann.Conjunction conjunctions = 4;
inline int RestrictDefinition::conjunctions_size() const {
  return conjunctions_.size();
}
inline void RestrictDefinition::clear_conjunctions() {
  conjunctions_.Clear();
}
inline ::research_scann::coscann::Conjunction* RestrictDefinition::mutable_conjunctions(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.RestrictDefinition.conjunctions)
  return conjunctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Conjunction >*
RestrictDefinition::mutable_conjunctions() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.RestrictDefinition.conjunctions)
  return &conjunctions_;
}
inline const ::research_scann::coscann::Conjunction& RestrictDefinition::conjunctions(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.RestrictDefinition.conjunctions)
  return conjunctions_.Get(index);
}
inline ::research_scann::coscann::Conjunction* RestrictDefinition::add_conjunctions() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.RestrictDefinition.conjunctions)
  return conjunctions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::Conjunction >&
RestrictDefinition::conjunctions() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.RestrictDefinition.conjunctions)
  return conjunctions_;
}

// -------------------------------------------------------------------

// RestrictTokensV2

// repeated .research_scann.coscann.TokenGroup token_groups = 1;
inline int RestrictTokensV2::token_groups_size() const {
  return token_groups_.size();
}
inline void RestrictTokensV2::clear_token_groups() {
  token_groups_.Clear();
}
inline ::research_scann::coscann::TokenGroup* RestrictTokensV2::mutable_token_groups(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.RestrictTokensV2.token_groups)
  return token_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
RestrictTokensV2::mutable_token_groups() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.RestrictTokensV2.token_groups)
  return &token_groups_;
}
inline const ::research_scann::coscann::TokenGroup& RestrictTokensV2::token_groups(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.RestrictTokensV2.token_groups)
  return token_groups_.Get(index);
}
inline ::research_scann::coscann::TokenGroup* RestrictTokensV2::add_token_groups() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.RestrictTokensV2.token_groups)
  return token_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
RestrictTokensV2::token_groups() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.RestrictTokensV2.token_groups)
  return token_groups_;
}

// -------------------------------------------------------------------

// PackedOptimizationStatistics

// repeated fixed64 disjunction_keys = 1 [packed = true];
inline int PackedOptimizationStatistics::disjunction_keys_size() const {
  return disjunction_keys_.size();
}
inline void PackedOptimizationStatistics::clear_disjunction_keys() {
  disjunction_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PackedOptimizationStatistics::disjunction_keys(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.PackedOptimizationStatistics.disjunction_keys)
  return disjunction_keys_.Get(index);
}
inline void PackedOptimizationStatistics::set_disjunction_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  disjunction_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.coscann.PackedOptimizationStatistics.disjunction_keys)
}
inline void PackedOptimizationStatistics::add_disjunction_keys(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  disjunction_keys_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.PackedOptimizationStatistics.disjunction_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PackedOptimizationStatistics::disjunction_keys() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.PackedOptimizationStatistics.disjunction_keys)
  return disjunction_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PackedOptimizationStatistics::mutable_disjunction_keys() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.PackedOptimizationStatistics.disjunction_keys)
  return &disjunction_keys_;
}

// repeated float disjunction_freqs = 2 [packed = true];
inline int PackedOptimizationStatistics::disjunction_freqs_size() const {
  return disjunction_freqs_.size();
}
inline void PackedOptimizationStatistics::clear_disjunction_freqs() {
  disjunction_freqs_.Clear();
}
inline float PackedOptimizationStatistics::disjunction_freqs(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.PackedOptimizationStatistics.disjunction_freqs)
  return disjunction_freqs_.Get(index);
}
inline void PackedOptimizationStatistics::set_disjunction_freqs(int index, float value) {
  disjunction_freqs_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.coscann.PackedOptimizationStatistics.disjunction_freqs)
}
inline void PackedOptimizationStatistics::add_disjunction_freqs(float value) {
  disjunction_freqs_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.coscann.PackedOptimizationStatistics.disjunction_freqs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PackedOptimizationStatistics::disjunction_freqs() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.PackedOptimizationStatistics.disjunction_freqs)
  return disjunction_freqs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PackedOptimizationStatistics::mutable_disjunction_freqs() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.PackedOptimizationStatistics.disjunction_freqs)
  return &disjunction_freqs_;
}

// -------------------------------------------------------------------

// EasyDisjunction

// optional bool is_positive = 1 [default = true];
inline bool EasyDisjunction::has_is_positive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasyDisjunction::clear_is_positive() {
  is_positive_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool EasyDisjunction::is_positive() const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.EasyDisjunction.is_positive)
  return is_positive_;
}
inline void EasyDisjunction::set_is_positive(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_positive_ = value;
  // @@protoc_insertion_point(field_set:research_scann.coscann.EasyDisjunction.is_positive)
}

// repeated .research_scann.coscann.TokenGroup token_groups = 2;
inline int EasyDisjunction::token_groups_size() const {
  return token_groups_.size();
}
inline void EasyDisjunction::clear_token_groups() {
  token_groups_.Clear();
}
inline ::research_scann::coscann::TokenGroup* EasyDisjunction::mutable_token_groups(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.EasyDisjunction.token_groups)
  return token_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >*
EasyDisjunction::mutable_token_groups() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.EasyDisjunction.token_groups)
  return &token_groups_;
}
inline const ::research_scann::coscann::TokenGroup& EasyDisjunction::token_groups(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.EasyDisjunction.token_groups)
  return token_groups_.Get(index);
}
inline ::research_scann::coscann::TokenGroup* EasyDisjunction::add_token_groups() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.EasyDisjunction.token_groups)
  return token_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::TokenGroup >&
EasyDisjunction::token_groups() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.EasyDisjunction.token_groups)
  return token_groups_;
}

// -------------------------------------------------------------------

// EasyConjunction

// repeated .research_scann.coscann.EasyDisjunction disjunctions = 1;
inline int EasyConjunction::disjunctions_size() const {
  return disjunctions_.size();
}
inline void EasyConjunction::clear_disjunctions() {
  disjunctions_.Clear();
}
inline ::research_scann::coscann::EasyDisjunction* EasyConjunction::mutable_disjunctions(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.EasyConjunction.disjunctions)
  return disjunctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyDisjunction >*
EasyConjunction::mutable_disjunctions() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.EasyConjunction.disjunctions)
  return &disjunctions_;
}
inline const ::research_scann::coscann::EasyDisjunction& EasyConjunction::disjunctions(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.EasyConjunction.disjunctions)
  return disjunctions_.Get(index);
}
inline ::research_scann::coscann::EasyDisjunction* EasyConjunction::add_disjunctions() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.EasyConjunction.disjunctions)
  return disjunctions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyDisjunction >&
EasyConjunction::disjunctions() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.EasyConjunction.disjunctions)
  return disjunctions_;
}

// -------------------------------------------------------------------

// EasyRestrictDefinition

// repeated .research_scann.coscann.EasyConjunction conjunctions = 1;
inline int EasyRestrictDefinition::conjunctions_size() const {
  return conjunctions_.size();
}
inline void EasyRestrictDefinition::clear_conjunctions() {
  conjunctions_.Clear();
}
inline ::research_scann::coscann::EasyConjunction* EasyRestrictDefinition::mutable_conjunctions(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.coscann.EasyRestrictDefinition.conjunctions)
  return conjunctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyConjunction >*
EasyRestrictDefinition::mutable_conjunctions() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.coscann.EasyRestrictDefinition.conjunctions)
  return &conjunctions_;
}
inline const ::research_scann::coscann::EasyConjunction& EasyRestrictDefinition::conjunctions(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.coscann.EasyRestrictDefinition.conjunctions)
  return conjunctions_.Get(index);
}
inline ::research_scann::coscann::EasyConjunction* EasyRestrictDefinition::add_conjunctions() {
  // @@protoc_insertion_point(field_add:research_scann.coscann.EasyRestrictDefinition.conjunctions)
  return conjunctions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::coscann::EasyConjunction >&
EasyRestrictDefinition::conjunctions() const {
  // @@protoc_insertion_point(field_list:research_scann.coscann.EasyRestrictDefinition.conjunctions)
  return conjunctions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coscann
}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fcoscann_2fv2_5frestricts_2eproto
