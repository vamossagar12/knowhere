// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/data_format/features.proto

#include "scann/data_format/features.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fdata_5fformat_2ffeatures_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fdata_5fformat_2ffeatures_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fdata_5fformat_2ffeatures_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fcoscann_2fv2_5frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto;
namespace research_scann {
class GenericFeatureVector_CrowdingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericFeatureVector_Crowding> _instance;
} _GenericFeatureVector_Crowding_default_instance_;
class GenericFeatureVector_RestrictTokensDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericFeatureVector_RestrictTokens> _instance;
  const ::research_scann::coscann::EasyRestrictDefinition* easy_definition_;
  const ::research_scann::coscann::RestrictTokensV2* tokens_;
  const ::research_scann::coscann::RestrictDefinition* definition_;
} _GenericFeatureVector_RestrictTokens_default_instance_;
class GenericFeatureVector_FixedPointMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericFeatureVector_FixedPointMetadata> _instance;
} _GenericFeatureVector_FixedPointMetadata_default_instance_;
class GenericFeatureVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericFeatureVector> _instance;
} _GenericFeatureVector_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_GenericFeatureVector_default_instance_;
    new (ptr) ::research_scann::GenericFeatureVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::GenericFeatureVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto}, {
      &scc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto.base,
      &scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto.base,
      &scc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_GenericFeatureVector_Crowding_default_instance_;
    new (ptr) ::research_scann::GenericFeatureVector_Crowding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::GenericFeatureVector_Crowding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto}, {}};

static void InitDefaultsscc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_GenericFeatureVector_FixedPointMetadata_default_instance_;
    new (ptr) ::research_scann::GenericFeatureVector_FixedPointMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::GenericFeatureVector_FixedPointMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto}, {}};

static void InitDefaultsscc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_;
    new (ptr) ::research_scann::GenericFeatureVector_RestrictTokens();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::GenericFeatureVector_RestrictTokens::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto}, {
      &scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto.base,
      &scc_info_EasyRestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
      &scc_info_RestrictTokensV2_scann_2fcoscann_2fv2_5frestricts_2eproto.base,
      &scc_info_RestrictDefinition_scann_2fcoscann_2fv2_5frestricts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fdata_5fformat_2ffeatures_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_Crowding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_Crowding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_Crowding, crowding_attribute_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, v3_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, token_membership_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, whitelist_token_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, blacklist_token_),
  offsetof(::research_scann::GenericFeatureVector_RestrictTokensDefaultTypeInternal, easy_definition_),
  offsetof(::research_scann::GenericFeatureVector_RestrictTokensDefaultTypeInternal, tokens_),
  offsetof(::research_scann::GenericFeatureVector_RestrictTokensDefaultTypeInternal, definition_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, v3_compatible_namespace_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_RestrictTokens, v2_restricts_),
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_FixedPointMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_FixedPointMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector_FixedPointMetadata, squared_l2_norm_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, data_id_str_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_value_float_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_value_double_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_value_int64_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_value_string_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_index_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, norm_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, class_label_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, crowding_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, restrict_tokens_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, fixed_point_metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, userinfo_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, expiration_timestamp_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, feature_dim_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, weight_),
  PROTOBUF_FIELD_OFFSET(::research_scann::GenericFeatureVector, tokens_),
  8,
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  10,
  2,
  5,
  4,
  6,
  3,
  7,
  11,
  9,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::research_scann::GenericFeatureVector_Crowding)},
  { 7, 21, sizeof(::research_scann::GenericFeatureVector_RestrictTokens)},
  { 29, 35, sizeof(::research_scann::GenericFeatureVector_FixedPointMetadata)},
  { 36, 58, sizeof(::research_scann::GenericFeatureVector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_GenericFeatureVector_Crowding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_GenericFeatureVector_FixedPointMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_GenericFeatureVector_default_instance_),
};

const char descriptor_table_protodef_scann_2fdata_5fformat_2ffeatures_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n scann/data_format/features.proto\022\016rese"
  "arch_scann\032\037google/protobuf/timestamp.pr"
  "oto\032 scann/coscann/v2_restricts.proto\032\033s"
  "cann/proto/restricts.proto\"\217\013\n\024GenericFe"
  "atureVector\022F\n\014feature_type\030\001 \002(\01620.rese"
  "arch_scann.GenericFeatureVector.FeatureT"
  "ype\022\023\n\013data_id_str\030\002 \001(\014\022\037\n\023feature_valu"
  "e_float\030\004 \003(\002B\002\020\001\022 \n\024feature_value_doubl"
  "e\030\005 \003(\001B\002\020\001\022\037\n\023feature_value_int64\030\003 \003(\003"
  "B\002\020\001\022\034\n\024feature_value_string\030\r \001(\014\022\031\n\rfe"
  "ature_index\030\006 \003(\004B\002\020\001\022I\n\tnorm_type\030\t \001(\016"
  "20.research_scann.GenericFeatureVector.F"
  "eatureNorm:\004NONE\022\023\n\013class_label\030\020 \001(\t\022\?\n"
  "\010crowding\030\022 \001(\0132-.research_scann.Generic"
  "FeatureVector.Crowding\022L\n\017restrict_token"
  "s\030\017 \001(\01323.research_scann.GenericFeatureV"
  "ector.RestrictTokens\022U\n\024fixed_point_meta"
  "data\030\023 \001(\01327.research_scann.GenericFeatu"
  "reVector.FixedPointMetadata\022\024\n\010userinfo\030"
  "\021 \001(\014B\002\010\001\0228\n\024expiration_timestamp\030\024 \001(\0132"
  "\032.google.protobuf.Timestamp\022-\n\013feature_d"
  "im\030\n \001(\004:\02418446744073709551615B\002\030\001\022\022\n\006we"
  "ight\030\010 \001(\002B\002\030\001\022\024\n\006tokens\030\016 \003(\005B\004\020\001\030\001\032&\n\010"
  "Crowding\022\032\n\022crowding_attribute\030\001 \001(\003\032\212\003\n"
  "\016RestrictTokens\022&\n\002v3\030\007 \001(\0132\032.research_s"
  "cann.V3Restrict\022\034\n\020token_membership\030\001 \003("
  "\003B\002\020\001\022\033\n\017whitelist_token\030\002 \003(\003B\002\020\001\022\033\n\017bl"
  "acklist_token\030\003 \003(\003B\002\020\001\022I\n\017easy_definiti"
  "on\030\006 \001(\0132..research_scann.coscann.EasyRe"
  "strictDefinitionH\000\022:\n\006tokens\030\005 \001(\0132(.res"
  "earch_scann.coscann.RestrictTokensV2H\000\022@"
  "\n\ndefinition\030\004 \001(\0132*.research_scann.cosc"
  "ann.RestrictDefinitionH\000\022\037\n\027v3_compatibl"
  "e_namespace\030\010 \001(\tB\016\n\014v2_restricts\032-\n\022Fix"
  "edPointMetadata\022\027\n\017squared_l2_norm\030\001 \001(\002"
  "\"T\n\013FeatureType\022\013\n\007UNKNOWN\020\000\022\t\n\005INT64\020\001\022"
  "\t\n\005FLOAT\020\002\022\n\n\006DOUBLE\020\003\022\n\n\006STRING\020\004\022\n\n\006BI"
  "NARY\020\005\"I\n\013FeatureNorm\022\010\n\004NONE\020\000\022\016\n\nUNITL"
  "2NORM\020\001\022\020\n\014STDGAUSSNORM\020\002\022\016\n\nUNITL1NORM\020"
  "\003*\t\010\350\007\020\200\200\200\200\002B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_scann_2fcoscann_2fv2_5frestricts_2eproto,
  &::descriptor_table_scann_2fproto_2frestricts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_sccs[4] = {
  &scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto.base,
  &scc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto.base,
  &scc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto.base,
  &scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_once;
static bool descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto = {
  &descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_initialized, descriptor_table_protodef_scann_2fdata_5fformat_2ffeatures_2eproto, "scann/data_format/features.proto", 1577,
  &descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_once, descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_sccs, descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto::offsets,
  file_level_metadata_scann_2fdata_5fformat_2ffeatures_2eproto, 4, file_level_enum_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto, file_level_service_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fdata_5fformat_2ffeatures_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto), true);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericFeatureVector_FeatureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto);
  return file_level_enum_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto[0];
}
bool GenericFeatureVector_FeatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::UNKNOWN;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::INT64;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::FLOAT;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::DOUBLE;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::STRING;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::BINARY;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::FeatureType_MIN;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector::FeatureType_MAX;
constexpr int GenericFeatureVector::FeatureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericFeatureVector_FeatureNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto);
  return file_level_enum_descriptors_scann_2fdata_5fformat_2ffeatures_2eproto[1];
}
bool GenericFeatureVector_FeatureNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::NONE;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::UNITL2NORM;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::STDGAUSSNORM;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::UNITL1NORM;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::FeatureNorm_MIN;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector::FeatureNorm_MAX;
constexpr int GenericFeatureVector::FeatureNorm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GenericFeatureVector_Crowding::InitAsDefaultInstance() {
}
class GenericFeatureVector_Crowding::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericFeatureVector_Crowding>()._has_bits_);
  static void set_has_crowding_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GenericFeatureVector_Crowding::GenericFeatureVector_Crowding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.GenericFeatureVector.Crowding)
}
GenericFeatureVector_Crowding::GenericFeatureVector_Crowding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.GenericFeatureVector.Crowding)
}
GenericFeatureVector_Crowding::GenericFeatureVector_Crowding(const GenericFeatureVector_Crowding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crowding_attribute_ = from.crowding_attribute_;
  // @@protoc_insertion_point(copy_constructor:research_scann.GenericFeatureVector.Crowding)
}

void GenericFeatureVector_Crowding::SharedCtor() {
  crowding_attribute_ = PROTOBUF_LONGLONG(0);
}

GenericFeatureVector_Crowding::~GenericFeatureVector_Crowding() {
  // @@protoc_insertion_point(destructor:research_scann.GenericFeatureVector.Crowding)
  SharedDtor();
}

void GenericFeatureVector_Crowding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GenericFeatureVector_Crowding::ArenaDtor(void* object) {
  GenericFeatureVector_Crowding* _this = reinterpret_cast< GenericFeatureVector_Crowding* >(object);
  (void)_this;
}
void GenericFeatureVector_Crowding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericFeatureVector_Crowding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericFeatureVector_Crowding& GenericFeatureVector_Crowding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericFeatureVector_Crowding_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  return *internal_default_instance();
}


void GenericFeatureVector_Crowding::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.GenericFeatureVector.Crowding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crowding_attribute_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericFeatureVector_Crowding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 crowding_attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crowding_attribute(&has_bits);
          crowding_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericFeatureVector_Crowding::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.GenericFeatureVector.Crowding)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 crowding_attribute = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_crowding_attribute(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &crowding_attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.GenericFeatureVector.Crowding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.GenericFeatureVector.Crowding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericFeatureVector_Crowding::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.GenericFeatureVector.Crowding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 crowding_attribute = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->crowding_attribute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.GenericFeatureVector.Crowding)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericFeatureVector_Crowding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.GenericFeatureVector.Crowding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 crowding_attribute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->crowding_attribute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.GenericFeatureVector.Crowding)
  return target;
}

size_t GenericFeatureVector_Crowding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.GenericFeatureVector.Crowding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 crowding_attribute = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->crowding_attribute());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericFeatureVector_Crowding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.GenericFeatureVector.Crowding)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericFeatureVector_Crowding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericFeatureVector_Crowding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.GenericFeatureVector.Crowding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.GenericFeatureVector.Crowding)
    MergeFrom(*source);
  }
}

void GenericFeatureVector_Crowding::MergeFrom(const GenericFeatureVector_Crowding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.GenericFeatureVector.Crowding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crowding_attribute()) {
    set_crowding_attribute(from.crowding_attribute());
  }
}

void GenericFeatureVector_Crowding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.GenericFeatureVector.Crowding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFeatureVector_Crowding::CopyFrom(const GenericFeatureVector_Crowding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.GenericFeatureVector.Crowding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFeatureVector_Crowding::IsInitialized() const {
  return true;
}

void GenericFeatureVector_Crowding::InternalSwap(GenericFeatureVector_Crowding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crowding_attribute_, other->crowding_attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericFeatureVector_Crowding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericFeatureVector_RestrictTokens::InitAsDefaultInstance() {
  ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_._instance.get_mutable()->v3_ = const_cast< ::research_scann::V3Restrict*>(
      ::research_scann::V3Restrict::internal_default_instance());
  ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_.easy_definition_ = const_cast< ::research_scann::coscann::EasyRestrictDefinition*>(
      ::research_scann::coscann::EasyRestrictDefinition::internal_default_instance());
  ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_.tokens_ = const_cast< ::research_scann::coscann::RestrictTokensV2*>(
      ::research_scann::coscann::RestrictTokensV2::internal_default_instance());
  ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_.definition_ = const_cast< ::research_scann::coscann::RestrictDefinition*>(
      ::research_scann::coscann::RestrictDefinition::internal_default_instance());
}
class GenericFeatureVector_RestrictTokens::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericFeatureVector_RestrictTokens>()._has_bits_);
  static const ::research_scann::V3Restrict& v3(const GenericFeatureVector_RestrictTokens* msg);
  static void set_has_v3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::coscann::EasyRestrictDefinition& easy_definition(const GenericFeatureVector_RestrictTokens* msg);
  static const ::research_scann::coscann::RestrictTokensV2& tokens(const GenericFeatureVector_RestrictTokens* msg);
  static const ::research_scann::coscann::RestrictDefinition& definition(const GenericFeatureVector_RestrictTokens* msg);
  static void set_has_v3_compatible_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::research_scann::V3Restrict&
GenericFeatureVector_RestrictTokens::_Internal::v3(const GenericFeatureVector_RestrictTokens* msg) {
  return *msg->v3_;
}
const ::research_scann::coscann::EasyRestrictDefinition&
GenericFeatureVector_RestrictTokens::_Internal::easy_definition(const GenericFeatureVector_RestrictTokens* msg) {
  return *msg->v2_restricts_.easy_definition_;
}
const ::research_scann::coscann::RestrictTokensV2&
GenericFeatureVector_RestrictTokens::_Internal::tokens(const GenericFeatureVector_RestrictTokens* msg) {
  return *msg->v2_restricts_.tokens_;
}
const ::research_scann::coscann::RestrictDefinition&
GenericFeatureVector_RestrictTokens::_Internal::definition(const GenericFeatureVector_RestrictTokens* msg) {
  return *msg->v2_restricts_.definition_;
}
void GenericFeatureVector_RestrictTokens::unsafe_arena_set_allocated_v3(
    ::research_scann::V3Restrict* v3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete v3_;
  }
  v3_ = v3;
  if (v3) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.v3)
}
void GenericFeatureVector_RestrictTokens::clear_v3() {
  if (v3_ != nullptr) v3_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GenericFeatureVector_RestrictTokens::set_allocated_easy_definition(::research_scann::coscann::EasyRestrictDefinition* easy_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_v2_restricts();
  if (easy_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(easy_definition)->GetArena();
    if (message_arena != submessage_arena) {
      easy_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, easy_definition, submessage_arena);
    }
    set_has_easy_definition();
    v2_restricts_.easy_definition_ = easy_definition;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
}
void GenericFeatureVector_RestrictTokens::clear_easy_definition() {
  if (has_easy_definition()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete v2_restricts_.easy_definition_;
    }
    clear_has_v2_restricts();
  }
}
void GenericFeatureVector_RestrictTokens::set_allocated_tokens(::research_scann::coscann::RestrictTokensV2* tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_v2_restricts();
  if (tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokens)->GetArena();
    if (message_arena != submessage_arena) {
      tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokens, submessage_arena);
    }
    set_has_tokens();
    v2_restricts_.tokens_ = tokens;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.tokens)
}
void GenericFeatureVector_RestrictTokens::clear_tokens() {
  if (has_tokens()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete v2_restricts_.tokens_;
    }
    clear_has_v2_restricts();
  }
}
void GenericFeatureVector_RestrictTokens::set_allocated_definition(::research_scann::coscann::RestrictDefinition* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_v2_restricts();
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(definition)->GetArena();
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    set_has_definition();
    v2_restricts_.definition_ = definition;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.definition)
}
void GenericFeatureVector_RestrictTokens::clear_definition() {
  if (has_definition()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete v2_restricts_.definition_;
    }
    clear_has_v2_restricts();
  }
}
GenericFeatureVector_RestrictTokens::GenericFeatureVector_RestrictTokens()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.GenericFeatureVector.RestrictTokens)
}
GenericFeatureVector_RestrictTokens::GenericFeatureVector_RestrictTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  token_membership_(arena),
  whitelist_token_(arena),
  blacklist_token_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.GenericFeatureVector.RestrictTokens)
}
GenericFeatureVector_RestrictTokens::GenericFeatureVector_RestrictTokens(const GenericFeatureVector_RestrictTokens& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      token_membership_(from.token_membership_),
      whitelist_token_(from.whitelist_token_),
      blacklist_token_(from.blacklist_token_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  v3_compatible_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_v3_compatible_namespace()) {
    v3_compatible_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v3_compatible_namespace(),
      GetArenaNoVirtual());
  }
  if (from.has_v3()) {
    v3_ = new ::research_scann::V3Restrict(*from.v3_);
  } else {
    v3_ = nullptr;
  }
  clear_has_v2_restricts();
  switch (from.v2_restricts_case()) {
    case kEasyDefinition: {
      mutable_easy_definition()->::research_scann::coscann::EasyRestrictDefinition::MergeFrom(from.easy_definition());
      break;
    }
    case kTokens: {
      mutable_tokens()->::research_scann::coscann::RestrictTokensV2::MergeFrom(from.tokens());
      break;
    }
    case kDefinition: {
      mutable_definition()->::research_scann::coscann::RestrictDefinition::MergeFrom(from.definition());
      break;
    }
    case V2_RESTRICTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.GenericFeatureVector.RestrictTokens)
}

void GenericFeatureVector_RestrictTokens::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  v3_compatible_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v3_ = nullptr;
  clear_has_v2_restricts();
}

GenericFeatureVector_RestrictTokens::~GenericFeatureVector_RestrictTokens() {
  // @@protoc_insertion_point(destructor:research_scann.GenericFeatureVector.RestrictTokens)
  SharedDtor();
}

void GenericFeatureVector_RestrictTokens::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  v3_compatible_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete v3_;
  if (has_v2_restricts()) {
    clear_v2_restricts();
  }
}

void GenericFeatureVector_RestrictTokens::ArenaDtor(void* object) {
  GenericFeatureVector_RestrictTokens* _this = reinterpret_cast< GenericFeatureVector_RestrictTokens* >(object);
  (void)_this;
}
void GenericFeatureVector_RestrictTokens::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericFeatureVector_RestrictTokens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericFeatureVector_RestrictTokens& GenericFeatureVector_RestrictTokens::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericFeatureVector_RestrictTokens_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  return *internal_default_instance();
}


void GenericFeatureVector_RestrictTokens::clear_v2_restricts() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.GenericFeatureVector.RestrictTokens)
  switch (v2_restricts_case()) {
    case kEasyDefinition: {
      if (GetArenaNoVirtual() == nullptr) {
        delete v2_restricts_.easy_definition_;
      }
      break;
    }
    case kTokens: {
      if (GetArenaNoVirtual() == nullptr) {
        delete v2_restricts_.tokens_;
      }
      break;
    }
    case kDefinition: {
      if (GetArenaNoVirtual() == nullptr) {
        delete v2_restricts_.definition_;
      }
      break;
    }
    case V2_RESTRICTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V2_RESTRICTS_NOT_SET;
}


void GenericFeatureVector_RestrictTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.GenericFeatureVector.RestrictTokens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_membership_.Clear();
  whitelist_token_.Clear();
  blacklist_token_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      v3_compatible_namespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(v3_ != nullptr);
      v3_->Clear();
    }
  }
  clear_v2_restricts();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericFeatureVector_RestrictTokens::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 token_membership = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_token_membership(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_token_membership(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 whitelist_token = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_whitelist_token(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_whitelist_token(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 blacklist_token = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_blacklist_token(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_blacklist_token(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.coscann.RestrictDefinition definition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.coscann.RestrictTokensV2 tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.coscann.EasyRestrictDefinition easy_definition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_easy_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.V3Restrict v3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_v3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string v3_compatible_namespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_v3_compatible_namespace(), ptr, ctx, "research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericFeatureVector_RestrictTokens::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.GenericFeatureVector.RestrictTokens)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 token_membership = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_token_membership())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_token_membership())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 whitelist_token = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_whitelist_token())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_whitelist_token())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 blacklist_token = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_blacklist_token())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_blacklist_token())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.coscann.RestrictDefinition definition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_definition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.coscann.RestrictTokensV2 tokens = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.coscann.EasyRestrictDefinition easy_definition = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_easy_definition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.V3Restrict v3 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_v3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string v3_compatible_namespace = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_v3_compatible_namespace()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v3_compatible_namespace().data(), static_cast<int>(this->v3_compatible_namespace().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.GenericFeatureVector.RestrictTokens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.GenericFeatureVector.RestrictTokens)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericFeatureVector_RestrictTokens::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.GenericFeatureVector.RestrictTokens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 token_membership = 1 [packed = true];
  if (this->token_membership_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_token_membership_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->token_membership_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->token_membership(i), output);
  }

  // repeated int64 whitelist_token = 2 [packed = true];
  if (this->whitelist_token_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_whitelist_token_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->whitelist_token_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->whitelist_token(i), output);
  }

  // repeated int64 blacklist_token = 3 [packed = true];
  if (this->blacklist_token_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_blacklist_token_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->blacklist_token_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->blacklist_token(i), output);
  }

  switch (v2_restricts_case()) {
    case kDefinition:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::definition(this), output);
      break;
    case kTokens:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::tokens(this), output);
      break;
    case kEasyDefinition:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::easy_definition(this), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .research_scann.V3Restrict v3 = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::v3(this), output);
  }

  // optional string v3_compatible_namespace = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v3_compatible_namespace().data(), static_cast<int>(this->v3_compatible_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->v3_compatible_namespace(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.GenericFeatureVector.RestrictTokens)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericFeatureVector_RestrictTokens::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.GenericFeatureVector.RestrictTokens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 token_membership = 1 [packed = true];
  if (this->token_membership_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _token_membership_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->token_membership_, target);
  }

  // repeated int64 whitelist_token = 2 [packed = true];
  if (this->whitelist_token_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _whitelist_token_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->whitelist_token_, target);
  }

  // repeated int64 blacklist_token = 3 [packed = true];
  if (this->blacklist_token_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _blacklist_token_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->blacklist_token_, target);
  }

  switch (v2_restricts_case()) {
    case kDefinition:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::definition(this), target);
      break;
    case kTokens:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::tokens(this), target);
      break;
    case kEasyDefinition:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::easy_definition(this), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .research_scann.V3Restrict v3 = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::v3(this), target);
  }

  // optional string v3_compatible_namespace = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v3_compatible_namespace().data(), static_cast<int>(this->v3_compatible_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->v3_compatible_namespace(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.GenericFeatureVector.RestrictTokens)
  return target;
}

size_t GenericFeatureVector_RestrictTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.GenericFeatureVector.RestrictTokens)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 token_membership = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->token_membership_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _token_membership_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 whitelist_token = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->whitelist_token_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _whitelist_token_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 blacklist_token = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->blacklist_token_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _blacklist_token_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string v3_compatible_namespace = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->v3_compatible_namespace());
    }

    // optional .research_scann.V3Restrict v3 = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v3_);
    }

  }
  switch (v2_restricts_case()) {
    // optional .research_scann.coscann.EasyRestrictDefinition easy_definition = 6;
    case kEasyDefinition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v2_restricts_.easy_definition_);
      break;
    }
    // optional .research_scann.coscann.RestrictTokensV2 tokens = 5;
    case kTokens: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v2_restricts_.tokens_);
      break;
    }
    // optional .research_scann.coscann.RestrictDefinition definition = 4;
    case kDefinition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v2_restricts_.definition_);
      break;
    }
    case V2_RESTRICTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericFeatureVector_RestrictTokens::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.GenericFeatureVector.RestrictTokens)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericFeatureVector_RestrictTokens* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericFeatureVector_RestrictTokens>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.GenericFeatureVector.RestrictTokens)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.GenericFeatureVector.RestrictTokens)
    MergeFrom(*source);
  }
}

void GenericFeatureVector_RestrictTokens::MergeFrom(const GenericFeatureVector_RestrictTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.GenericFeatureVector.RestrictTokens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_membership_.MergeFrom(from.token_membership_);
  whitelist_token_.MergeFrom(from.whitelist_token_);
  blacklist_token_.MergeFrom(from.blacklist_token_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      set_v3_compatible_namespace(from.v3_compatible_namespace());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_v3()->::research_scann::V3Restrict::MergeFrom(from.v3());
    }
  }
  switch (from.v2_restricts_case()) {
    case kEasyDefinition: {
      mutable_easy_definition()->::research_scann::coscann::EasyRestrictDefinition::MergeFrom(from.easy_definition());
      break;
    }
    case kTokens: {
      mutable_tokens()->::research_scann::coscann::RestrictTokensV2::MergeFrom(from.tokens());
      break;
    }
    case kDefinition: {
      mutable_definition()->::research_scann::coscann::RestrictDefinition::MergeFrom(from.definition());
      break;
    }
    case V2_RESTRICTS_NOT_SET: {
      break;
    }
  }
}

void GenericFeatureVector_RestrictTokens::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.GenericFeatureVector.RestrictTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFeatureVector_RestrictTokens::CopyFrom(const GenericFeatureVector_RestrictTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.GenericFeatureVector.RestrictTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFeatureVector_RestrictTokens::IsInitialized() const {
  return true;
}

void GenericFeatureVector_RestrictTokens::InternalSwap(GenericFeatureVector_RestrictTokens* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_membership_.InternalSwap(&other->token_membership_);
  whitelist_token_.InternalSwap(&other->whitelist_token_);
  blacklist_token_.InternalSwap(&other->blacklist_token_);
  v3_compatible_namespace_.Swap(&other->v3_compatible_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(v3_, other->v3_);
  swap(v2_restricts_, other->v2_restricts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericFeatureVector_RestrictTokens::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericFeatureVector_FixedPointMetadata::InitAsDefaultInstance() {
}
class GenericFeatureVector_FixedPointMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericFeatureVector_FixedPointMetadata>()._has_bits_);
  static void set_has_squared_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GenericFeatureVector_FixedPointMetadata::GenericFeatureVector_FixedPointMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.GenericFeatureVector.FixedPointMetadata)
}
GenericFeatureVector_FixedPointMetadata::GenericFeatureVector_FixedPointMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.GenericFeatureVector.FixedPointMetadata)
}
GenericFeatureVector_FixedPointMetadata::GenericFeatureVector_FixedPointMetadata(const GenericFeatureVector_FixedPointMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  squared_l2_norm_ = from.squared_l2_norm_;
  // @@protoc_insertion_point(copy_constructor:research_scann.GenericFeatureVector.FixedPointMetadata)
}

void GenericFeatureVector_FixedPointMetadata::SharedCtor() {
  squared_l2_norm_ = 0;
}

GenericFeatureVector_FixedPointMetadata::~GenericFeatureVector_FixedPointMetadata() {
  // @@protoc_insertion_point(destructor:research_scann.GenericFeatureVector.FixedPointMetadata)
  SharedDtor();
}

void GenericFeatureVector_FixedPointMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GenericFeatureVector_FixedPointMetadata::ArenaDtor(void* object) {
  GenericFeatureVector_FixedPointMetadata* _this = reinterpret_cast< GenericFeatureVector_FixedPointMetadata* >(object);
  (void)_this;
}
void GenericFeatureVector_FixedPointMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericFeatureVector_FixedPointMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericFeatureVector_FixedPointMetadata& GenericFeatureVector_FixedPointMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericFeatureVector_FixedPointMetadata_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  return *internal_default_instance();
}


void GenericFeatureVector_FixedPointMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  squared_l2_norm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericFeatureVector_FixedPointMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float squared_l2_norm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_squared_l2_norm(&has_bits);
          squared_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericFeatureVector_FixedPointMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float squared_l2_norm = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_squared_l2_norm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &squared_l2_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.GenericFeatureVector.FixedPointMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.GenericFeatureVector.FixedPointMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericFeatureVector_FixedPointMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float squared_l2_norm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->squared_l2_norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.GenericFeatureVector.FixedPointMetadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericFeatureVector_FixedPointMetadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float squared_l2_norm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->squared_l2_norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.GenericFeatureVector.FixedPointMetadata)
  return target;
}

size_t GenericFeatureVector_FixedPointMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float squared_l2_norm = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericFeatureVector_FixedPointMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericFeatureVector_FixedPointMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericFeatureVector_FixedPointMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.GenericFeatureVector.FixedPointMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.GenericFeatureVector.FixedPointMetadata)
    MergeFrom(*source);
  }
}

void GenericFeatureVector_FixedPointMetadata::MergeFrom(const GenericFeatureVector_FixedPointMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_squared_l2_norm()) {
    set_squared_l2_norm(from.squared_l2_norm());
  }
}

void GenericFeatureVector_FixedPointMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFeatureVector_FixedPointMetadata::CopyFrom(const GenericFeatureVector_FixedPointMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.GenericFeatureVector.FixedPointMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFeatureVector_FixedPointMetadata::IsInitialized() const {
  return true;
}

void GenericFeatureVector_FixedPointMetadata::InternalSwap(GenericFeatureVector_FixedPointMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(squared_l2_norm_, other->squared_l2_norm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericFeatureVector_FixedPointMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericFeatureVector::InitAsDefaultInstance() {
  ::research_scann::_GenericFeatureVector_default_instance_._instance.get_mutable()->crowding_ = const_cast< ::research_scann::GenericFeatureVector_Crowding*>(
      ::research_scann::GenericFeatureVector_Crowding::internal_default_instance());
  ::research_scann::_GenericFeatureVector_default_instance_._instance.get_mutable()->restrict_tokens_ = const_cast< ::research_scann::GenericFeatureVector_RestrictTokens*>(
      ::research_scann::GenericFeatureVector_RestrictTokens::internal_default_instance());
  ::research_scann::_GenericFeatureVector_default_instance_._instance.get_mutable()->fixed_point_metadata_ = const_cast< ::research_scann::GenericFeatureVector_FixedPointMetadata*>(
      ::research_scann::GenericFeatureVector_FixedPointMetadata::internal_default_instance());
  ::research_scann::_GenericFeatureVector_default_instance_._instance.get_mutable()->expiration_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GenericFeatureVector::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericFeatureVector>()._has_bits_);
  static void set_has_feature_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_data_id_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feature_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_norm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_class_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::research_scann::GenericFeatureVector_Crowding& crowding(const GenericFeatureVector* msg);
  static void set_has_crowding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::research_scann::GenericFeatureVector_RestrictTokens& restrict_tokens(const GenericFeatureVector* msg);
  static void set_has_restrict_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::research_scann::GenericFeatureVector_FixedPointMetadata& fixed_point_metadata(const GenericFeatureVector* msg);
  static void set_has_fixed_point_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_timestamp(const GenericFeatureVector* msg);
  static void set_has_expiration_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_feature_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::research_scann::GenericFeatureVector_Crowding&
GenericFeatureVector::_Internal::crowding(const GenericFeatureVector* msg) {
  return *msg->crowding_;
}
const ::research_scann::GenericFeatureVector_RestrictTokens&
GenericFeatureVector::_Internal::restrict_tokens(const GenericFeatureVector* msg) {
  return *msg->restrict_tokens_;
}
const ::research_scann::GenericFeatureVector_FixedPointMetadata&
GenericFeatureVector::_Internal::fixed_point_metadata(const GenericFeatureVector* msg) {
  return *msg->fixed_point_metadata_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GenericFeatureVector::_Internal::expiration_timestamp(const GenericFeatureVector* msg) {
  return *msg->expiration_timestamp_;
}
void GenericFeatureVector::unsafe_arena_set_allocated_crowding(
    ::research_scann::GenericFeatureVector_Crowding* crowding) {
  if (GetArenaNoVirtual() == nullptr) {
    delete crowding_;
  }
  crowding_ = crowding;
  if (crowding) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.crowding)
}
void GenericFeatureVector::unsafe_arena_set_allocated_restrict_tokens(
    ::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens) {
  if (GetArenaNoVirtual() == nullptr) {
    delete restrict_tokens_;
  }
  restrict_tokens_ = restrict_tokens;
  if (restrict_tokens) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.restrict_tokens)
}
void GenericFeatureVector::unsafe_arena_set_allocated_fixed_point_metadata(
    ::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata) {
  if (GetArenaNoVirtual() == nullptr) {
    delete fixed_point_metadata_;
  }
  fixed_point_metadata_ = fixed_point_metadata;
  if (fixed_point_metadata) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.fixed_point_metadata)
}
void GenericFeatureVector::unsafe_arena_set_allocated_expiration_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expiration_timestamp_;
  }
  expiration_timestamp_ = expiration_timestamp;
  if (expiration_timestamp) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.expiration_timestamp)
}
void GenericFeatureVector::clear_expiration_timestamp() {
  if (expiration_timestamp_ != nullptr) expiration_timestamp_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
GenericFeatureVector::GenericFeatureVector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.GenericFeatureVector)
}
GenericFeatureVector::GenericFeatureVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena),
  feature_value_int64_(arena),
  feature_value_float_(arena),
  feature_value_double_(arena),
  feature_index_(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.GenericFeatureVector)
}
GenericFeatureVector::GenericFeatureVector(const GenericFeatureVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feature_value_int64_(from.feature_value_int64_),
      feature_value_float_(from.feature_value_float_),
      feature_value_double_(from.feature_value_double_),
      feature_index_(from.feature_index_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  data_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_id_str()) {
    data_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_id_str(),
      GetArenaNoVirtual());
  }
  feature_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_feature_value_string()) {
    feature_value_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.feature_value_string(),
      GetArenaNoVirtual());
  }
  class_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_label()) {
    class_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_label(),
      GetArenaNoVirtual());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userinfo(),
      GetArenaNoVirtual());
  }
  if (from.has_restrict_tokens()) {
    restrict_tokens_ = new ::research_scann::GenericFeatureVector_RestrictTokens(*from.restrict_tokens_);
  } else {
    restrict_tokens_ = nullptr;
  }
  if (from.has_crowding()) {
    crowding_ = new ::research_scann::GenericFeatureVector_Crowding(*from.crowding_);
  } else {
    crowding_ = nullptr;
  }
  if (from.has_fixed_point_metadata()) {
    fixed_point_metadata_ = new ::research_scann::GenericFeatureVector_FixedPointMetadata(*from.fixed_point_metadata_);
  } else {
    fixed_point_metadata_ = nullptr;
  }
  if (from.has_expiration_timestamp()) {
    expiration_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiration_timestamp_);
  } else {
    expiration_timestamp_ = nullptr;
  }
  ::memcpy(&feature_type_, &from.feature_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_dim_) -
    reinterpret_cast<char*>(&feature_type_)) + sizeof(feature_dim_));
  // @@protoc_insertion_point(copy_constructor:research_scann.GenericFeatureVector)
}

void GenericFeatureVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  data_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  feature_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&restrict_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&norm_type_) -
      reinterpret_cast<char*>(&restrict_tokens_)) + sizeof(norm_type_));
  feature_dim_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

GenericFeatureVector::~GenericFeatureVector() {
  // @@protoc_insertion_point(destructor:research_scann.GenericFeatureVector)
  SharedDtor();
}

void GenericFeatureVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  data_id_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  feature_value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete restrict_tokens_;
  if (this != internal_default_instance()) delete crowding_;
  if (this != internal_default_instance()) delete fixed_point_metadata_;
  if (this != internal_default_instance()) delete expiration_timestamp_;
}

void GenericFeatureVector::ArenaDtor(void* object) {
  GenericFeatureVector* _this = reinterpret_cast< GenericFeatureVector* >(object);
  (void)_this;
}
void GenericFeatureVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericFeatureVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericFeatureVector& GenericFeatureVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto.base);
  return *internal_default_instance();
}


void GenericFeatureVector::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.GenericFeatureVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  feature_value_int64_.Clear();
  feature_value_float_.Clear();
  feature_value_double_.Clear();
  feature_index_.Clear();
  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      data_id_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      feature_value_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      class_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(restrict_tokens_ != nullptr);
      restrict_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(crowding_ != nullptr);
      crowding_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(fixed_point_metadata_ != nullptr);
      fixed_point_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(expiration_timestamp_ != nullptr);
      expiration_timestamp_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&feature_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&norm_type_) -
        reinterpret_cast<char*>(&feature_type_)) + sizeof(norm_type_));
    feature_dim_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericFeatureVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::GenericFeatureVector_FeatureType_IsValid(val))) {
            set_feature_type(static_cast<::research_scann::GenericFeatureVector_FeatureType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes data_id_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data_id_str(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 feature_value_int64 = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_feature_value_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_feature_value_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float feature_value_float = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_feature_value_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_feature_value_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double feature_value_double = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_feature_value_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          add_feature_value_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint64 feature_index = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_feature_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_feature_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float weight = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::GenericFeatureVector_FeatureNorm_IsValid(val))) {
            set_norm_type(static_cast<::research_scann::GenericFeatureVector_FeatureNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_feature_dim(&has_bits);
          feature_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes feature_value_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_feature_value_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 tokens = 14 [packed = true, deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_tokens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          add_tokens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_restrict_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string class_label = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_class_label(), ptr, ctx, "research_scann.GenericFeatureVector.class_label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes userinfo = 17 [ctype = CORD];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_userinfo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_crowding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_fixed_point_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp expiration_timestamp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_expiration_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericFeatureVector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.GenericFeatureVector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::GenericFeatureVector_FeatureType_IsValid(value)) {
            set_feature_type(static_cast< ::research_scann::GenericFeatureVector_FeatureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data_id_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_id_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 feature_value_int64 = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_feature_value_int64())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_feature_value_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature_value_float = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_value_float())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_feature_value_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double feature_value_double = 5 [packed = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_feature_value_double())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_feature_value_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 feature_index = 6 [packed = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_feature_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 50u, input, this->mutable_feature_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::GenericFeatureVector_FeatureNorm_IsValid(value)) {
            set_norm_type(static_cast< ::research_scann::GenericFeatureVector_FeatureNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_feature_dim(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &feature_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes feature_value_string = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature_value_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 tokens = 14 [packed = true, deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tokens())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 114u, input, this->mutable_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restrict_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_label = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_label()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_label().data(), static_cast<int>(this->class_label().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.GenericFeatureVector.class_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes userinfo = 17 [ctype = CORD];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crowding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_point_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp expiration_timestamp = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.GenericFeatureVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.GenericFeatureVector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericFeatureVector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.GenericFeatureVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->feature_type(), output);
  }

  // optional bytes data_id_str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data_id_str(), output);
  }

  // repeated int64 feature_value_int64 = 3 [packed = true];
  if (this->feature_value_int64_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_value_int64_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->feature_value_int64_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->feature_value_int64(i), output);
  }

  // repeated float feature_value_float = 4 [packed = true];
  if (this->feature_value_float_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_value_float_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->feature_value_float().data(), this->feature_value_float_size(), output);
  }

  // repeated double feature_value_double = 5 [packed = true];
  if (this->feature_value_double_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_value_double_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->feature_value_double().data(), this->feature_value_double_size(), output);
  }

  // repeated uint64 feature_index = 6 [packed = true];
  if (this->feature_index_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_index_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->feature_index_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->feature_index(i), output);
  }

  // optional float weight = 8 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->weight(), output);
  }

  // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->norm_type(), output);
  }

  // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->feature_dim(), output);
  }

  // optional bytes feature_value_string = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->feature_value_string(), output);
  }

  // repeated int32 tokens = 14 [packed = true, deprecated = true];
  if (this->tokens_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(14, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tokens_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->tokens(i), output);
  }

  // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::restrict_tokens(this), output);
  }

  // optional string class_label = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_label().data(), static_cast<int>(this->class_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.GenericFeatureVector.class_label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->class_label(), output);
  }

  // optional bytes userinfo = 17 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->userinfo(), output);
  }

  // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::crowding(this), output);
  }

  // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::fixed_point_metadata(this), output);
  }

  // optional .google.protobuf.Timestamp expiration_timestamp = 20;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::expiration_timestamp(this), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.GenericFeatureVector)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericFeatureVector::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.GenericFeatureVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->feature_type(), target);
  }

  // optional bytes data_id_str = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data_id_str(), target);
  }

  // repeated int64 feature_value_int64 = 3 [packed = true];
  if (this->feature_value_int64_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_value_int64_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->feature_value_int64_, target);
  }

  // repeated float feature_value_float = 4 [packed = true];
  if (this->feature_value_float_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_value_float_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->feature_value_float_, target);
  }

  // repeated double feature_value_double = 5 [packed = true];
  if (this->feature_value_double_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_value_double_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->feature_value_double_, target);
  }

  // repeated uint64 feature_index = 6 [packed = true];
  if (this->feature_index_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _feature_index_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->feature_index_, target);
  }

  // optional float weight = 8 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->weight(), target);
  }

  // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->norm_type(), target);
  }

  // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->feature_dim(), target);
  }

  // optional bytes feature_value_string = 13;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        13, this->feature_value_string(), target);
  }

  // repeated int32 tokens = 14 [packed = true, deprecated = true];
  if (this->tokens_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      14,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tokens_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tokens_, target);
  }

  // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::restrict_tokens(this), target);
  }

  // optional string class_label = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_label().data(), static_cast<int>(this->class_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.GenericFeatureVector.class_label");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->class_label(), target);
  }

  // optional bytes userinfo = 17 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        17, this->userinfo(), target);
  }

  // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::crowding(this), target);
  }

  // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::fixed_point_metadata(this), target);
  }

  // optional .google.protobuf.Timestamp expiration_timestamp = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::expiration_timestamp(this), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.GenericFeatureVector)
  return target;
}

size_t GenericFeatureVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.GenericFeatureVector)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
  if (has_feature_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->feature_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 feature_value_int64 = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->feature_value_int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_value_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float feature_value_float = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->feature_value_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_value_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double feature_value_double = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->feature_value_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_value_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 feature_index = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->feature_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 tokens = 14 [packed = true, deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tokens_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tokens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes data_id_str = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->data_id_str());
    }

    // optional bytes feature_value_string = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->feature_value_string());
    }

    // optional string class_label = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->class_label());
    }

    // optional bytes userinfo = 17 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->userinfo());
    }

    // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrict_tokens_);
    }

    // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crowding_);
    }

    // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fixed_point_metadata_);
    }

    // optional .google.protobuf.Timestamp expiration_timestamp = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expiration_timestamp_);
    }

  }
  if (cached_has_bits & 0x00000e00u) {
    // optional float weight = 8 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->norm_type());
    }

    // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->feature_dim());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericFeatureVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.GenericFeatureVector)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericFeatureVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericFeatureVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.GenericFeatureVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.GenericFeatureVector)
    MergeFrom(*source);
  }
}

void GenericFeatureVector::MergeFrom(const GenericFeatureVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.GenericFeatureVector)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_value_int64_.MergeFrom(from.feature_value_int64_);
  feature_value_float_.MergeFrom(from.feature_value_float_);
  feature_value_double_.MergeFrom(from.feature_value_double_);
  feature_index_.MergeFrom(from.feature_index_);
  tokens_.MergeFrom(from.tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      set_data_id_str(from.data_id_str());
    }
    if (cached_has_bits & 0x00000002u) {
      set_feature_value_string(from.feature_value_string());
    }
    if (cached_has_bits & 0x00000004u) {
      set_class_label(from.class_label());
    }
    if (cached_has_bits & 0x00000008u) {
      set_userinfo(from.userinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_restrict_tokens()->::research_scann::GenericFeatureVector_RestrictTokens::MergeFrom(from.restrict_tokens());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_crowding()->::research_scann::GenericFeatureVector_Crowding::MergeFrom(from.crowding());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_fixed_point_metadata()->::research_scann::GenericFeatureVector_FixedPointMetadata::MergeFrom(from.fixed_point_metadata());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_expiration_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.expiration_timestamp());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      feature_type_ = from.feature_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      norm_type_ = from.norm_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      feature_dim_ = from.feature_dim_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericFeatureVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.GenericFeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFeatureVector::CopyFrom(const GenericFeatureVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.GenericFeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFeatureVector::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void GenericFeatureVector::InternalSwap(GenericFeatureVector* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_value_int64_.InternalSwap(&other->feature_value_int64_);
  feature_value_float_.InternalSwap(&other->feature_value_float_);
  feature_value_double_.InternalSwap(&other->feature_value_double_);
  feature_index_.InternalSwap(&other->feature_index_);
  tokens_.InternalSwap(&other->tokens_);
  data_id_str_.Swap(&other->data_id_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  feature_value_string_.Swap(&other->feature_value_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_label_.Swap(&other->class_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(restrict_tokens_, other->restrict_tokens_);
  swap(crowding_, other->crowding_);
  swap(fixed_point_metadata_, other->fixed_point_metadata_);
  swap(expiration_timestamp_, other->expiration_timestamp_);
  swap(feature_type_, other->feature_type_);
  swap(weight_, other->weight_);
  swap(norm_type_, other->norm_type_);
  swap(feature_dim_, other->feature_dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericFeatureVector::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::GenericFeatureVector_Crowding* Arena::CreateMaybeMessage< ::research_scann::GenericFeatureVector_Crowding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::GenericFeatureVector_Crowding >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::GenericFeatureVector_RestrictTokens* Arena::CreateMaybeMessage< ::research_scann::GenericFeatureVector_RestrictTokens >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::GenericFeatureVector_RestrictTokens >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::GenericFeatureVector_FixedPointMetadata* Arena::CreateMaybeMessage< ::research_scann::GenericFeatureVector_FixedPointMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::GenericFeatureVector_FixedPointMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::GenericFeatureVector* Arena::CreateMaybeMessage< ::research_scann::GenericFeatureVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::GenericFeatureVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
