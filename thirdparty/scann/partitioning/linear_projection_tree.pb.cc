// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/partitioning/linear_projection_tree.proto

#include "scann/partitioning/linear_projection_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
namespace research_scann {
class SerializedLinearProjectionTree_Node_NonLeafFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedLinearProjectionTree_Node_NonLeafFields> _instance;
} _SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_;
class SerializedLinearProjectionTree_Node_LeafFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedLinearProjectionTree_Node_LeafFields> _instance;
} _SerializedLinearProjectionTree_Node_LeafFields_default_instance_;
class SerializedLinearProjectionTree_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedLinearProjectionTree_Node> _instance;
  const ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* non_leaf_;
  const ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* leaf_;
} _SerializedLinearProjectionTree_Node_default_instance_;
class SerializedLinearProjectionTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedLinearProjectionTree> _instance;
} _SerializedLinearProjectionTree_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_SerializedLinearProjectionTree_default_instance_;
    new (ptr) ::research_scann::SerializedLinearProjectionTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::SerializedLinearProjectionTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto}, {
      &scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base,}};

static void InitDefaultsscc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_;
    new (ptr) ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::research_scann::_SerializedLinearProjectionTree_Node_default_instance_;
    new (ptr) ::research_scann::SerializedLinearProjectionTree_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields::InitAsDefaultInstance();
  ::research_scann::SerializedLinearProjectionTree_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto}, {
      &scc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base,}};

static void InitDefaultsscc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_SerializedLinearProjectionTree_Node_LeafFields_default_instance_;
    new (ptr) ::research_scann::SerializedLinearProjectionTree_Node_LeafFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::SerializedLinearProjectionTree_Node_LeafFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, projection_vector_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, left_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields, right_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_LeafFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_LeafFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node_LeafFields, leaf_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::research_scann::SerializedLinearProjectionTree_NodeDefaultTypeInternal, non_leaf_),
  offsetof(::research_scann::SerializedLinearProjectionTree_NodeDefaultTypeInternal, leaf_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree_Node, leaf_or_non_leaf_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedLinearProjectionTree, root_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields)},
  { 13, 19, sizeof(::research_scann::SerializedLinearProjectionTree_Node_LeafFields)},
  { 20, 28, sizeof(::research_scann::SerializedLinearProjectionTree_Node)},
  { 30, 36, sizeof(::research_scann::SerializedLinearProjectionTree)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedLinearProjectionTree_Node_LeafFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedLinearProjectionTree_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedLinearProjectionTree_default_instance_),
};

const char descriptor_table_protodef_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/scann/partitioning/linear_projection_t"
  "ree.proto\022\016research_scann\"\221\004\n\036Serialized"
  "LinearProjectionTree\022A\n\004root\030\001 \001(\01323.res"
  "earch_scann.SerializedLinearProjectionTr"
  "ee.Node\032\253\003\n\004Node\022U\n\010non_leaf\030\001 \001(\0132A.res"
  "earch_scann.SerializedLinearProjectionTr"
  "ee.Node.NonLeafFieldsH\000\022N\n\004leaf\030\002 \001(\0132>."
  "research_scann.SerializedLinearProjectio"
  "nTree.Node.LeafFieldsH\000\032\304\001\n\rNonLeafField"
  "s\022\031\n\021projection_vector\030\001 \003(\002\022\021\n\tthreshol"
  "d\030\002 \001(\002\022A\n\004left\030\003 \001(\01323.research_scann.S"
  "erializedLinearProjectionTree.Node\022B\n\005ri"
  "ght\030\004 \001(\01323.research_scann.SerializedLin"
  "earProjectionTree.Node\032!\n\nLeafFields\022\023\n\013"
  "leaf_number\030\005 \001(\005B\022\n\020leaf_or_non_leaf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_sccs[3] = {
  &scc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base,
  &scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base,
  &scc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_once;
static bool descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto = {
  &descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_initialized, descriptor_table_protodef_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto, "scann/partitioning/linear_projection_tree.proto", 597,
  &descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_once, descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_sccs, descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto::offsets,
  file_level_metadata_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto, 4, file_level_enum_descriptors_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto, file_level_service_descriptors_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto), true);
namespace research_scann {

// ===================================================================

void SerializedLinearProjectionTree_Node_NonLeafFields::InitAsDefaultInstance() {
  ::research_scann::_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_._instance.get_mutable()->left_ = const_cast< ::research_scann::SerializedLinearProjectionTree_Node*>(
      ::research_scann::SerializedLinearProjectionTree_Node::internal_default_instance());
  ::research_scann::_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_._instance.get_mutable()->right_ = const_cast< ::research_scann::SerializedLinearProjectionTree_Node*>(
      ::research_scann::SerializedLinearProjectionTree_Node::internal_default_instance());
}
class SerializedLinearProjectionTree_Node_NonLeafFields::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedLinearProjectionTree_Node_NonLeafFields>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::research_scann::SerializedLinearProjectionTree_Node& left(const SerializedLinearProjectionTree_Node_NonLeafFields* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::research_scann::SerializedLinearProjectionTree_Node& right(const SerializedLinearProjectionTree_Node_NonLeafFields* msg);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::research_scann::SerializedLinearProjectionTree_Node&
SerializedLinearProjectionTree_Node_NonLeafFields::_Internal::left(const SerializedLinearProjectionTree_Node_NonLeafFields* msg) {
  return *msg->left_;
}
const ::research_scann::SerializedLinearProjectionTree_Node&
SerializedLinearProjectionTree_Node_NonLeafFields::_Internal::right(const SerializedLinearProjectionTree_Node_NonLeafFields* msg) {
  return *msg->right_;
}
SerializedLinearProjectionTree_Node_NonLeafFields::SerializedLinearProjectionTree_Node_NonLeafFields()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
}
SerializedLinearProjectionTree_Node_NonLeafFields::SerializedLinearProjectionTree_Node_NonLeafFields(const SerializedLinearProjectionTree_Node_NonLeafFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      projection_vector_(from.projection_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left()) {
    left_ = new ::research_scann::SerializedLinearProjectionTree_Node(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from.has_right()) {
    right_ = new ::research_scann::SerializedLinearProjectionTree_Node(*from.right_);
  } else {
    right_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
}

void SerializedLinearProjectionTree_Node_NonLeafFields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&left_)) + sizeof(threshold_));
}

SerializedLinearProjectionTree_Node_NonLeafFields::~SerializedLinearProjectionTree_Node_NonLeafFields() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  SharedDtor();
}

void SerializedLinearProjectionTree_Node_NonLeafFields::SharedDtor() {
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void SerializedLinearProjectionTree_Node_NonLeafFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedLinearProjectionTree_Node_NonLeafFields& SerializedLinearProjectionTree_Node_NonLeafFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  return *internal_default_instance();
}


void SerializedLinearProjectionTree_Node_NonLeafFields::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projection_vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_ != nullptr);
      left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_ != nullptr);
      right_->Clear();
    }
  }
  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedLinearProjectionTree_Node_NonLeafFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float projection_vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_projection_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_projection_vector(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedLinearProjectionTree_Node_NonLeafFields::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float projection_vector = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_projection_vector())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_projection_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedLinearProjectionTree_Node_NonLeafFields::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float projection_vector = 1;
  for (int i = 0, n = this->projection_vector_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->projection_vector(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::left(this), output);
  }

  // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::right(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedLinearProjectionTree_Node_NonLeafFields::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float projection_vector = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->projection_vector_, target);

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::left(this), target);
  }

  // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::right(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  return target;
}

size_t SerializedLinearProjectionTree_Node_NonLeafFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float projection_vector = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->projection_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->projection_vector_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_);
    }

    // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_);
    }

    // optional float threshold = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedLinearProjectionTree_Node_NonLeafFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedLinearProjectionTree_Node_NonLeafFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedLinearProjectionTree_Node_NonLeafFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
    MergeFrom(*source);
  }
}

void SerializedLinearProjectionTree_Node_NonLeafFields::MergeFrom(const SerializedLinearProjectionTree_Node_NonLeafFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projection_vector_.MergeFrom(from.projection_vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left()->::research_scann::SerializedLinearProjectionTree_Node::MergeFrom(from.left());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right()->::research_scann::SerializedLinearProjectionTree_Node::MergeFrom(from.right());
    }
    if (cached_has_bits & 0x00000004u) {
      threshold_ = from.threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerializedLinearProjectionTree_Node_NonLeafFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedLinearProjectionTree_Node_NonLeafFields::CopyFrom(const SerializedLinearProjectionTree_Node_NonLeafFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedLinearProjectionTree_Node_NonLeafFields::IsInitialized() const {
  return true;
}

void SerializedLinearProjectionTree_Node_NonLeafFields::InternalSwap(SerializedLinearProjectionTree_Node_NonLeafFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  projection_vector_.InternalSwap(&other->projection_vector_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedLinearProjectionTree_Node_NonLeafFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedLinearProjectionTree_Node_LeafFields::InitAsDefaultInstance() {
}
class SerializedLinearProjectionTree_Node_LeafFields::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedLinearProjectionTree_Node_LeafFields>()._has_bits_);
  static void set_has_leaf_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SerializedLinearProjectionTree_Node_LeafFields::SerializedLinearProjectionTree_Node_LeafFields()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
}
SerializedLinearProjectionTree_Node_LeafFields::SerializedLinearProjectionTree_Node_LeafFields(const SerializedLinearProjectionTree_Node_LeafFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaf_number_ = from.leaf_number_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
}

void SerializedLinearProjectionTree_Node_LeafFields::SharedCtor() {
  leaf_number_ = 0;
}

SerializedLinearProjectionTree_Node_LeafFields::~SerializedLinearProjectionTree_Node_LeafFields() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  SharedDtor();
}

void SerializedLinearProjectionTree_Node_LeafFields::SharedDtor() {
}

void SerializedLinearProjectionTree_Node_LeafFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedLinearProjectionTree_Node_LeafFields& SerializedLinearProjectionTree_Node_LeafFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedLinearProjectionTree_Node_LeafFields_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  return *internal_default_instance();
}


void SerializedLinearProjectionTree_Node_LeafFields::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaf_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedLinearProjectionTree_Node_LeafFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 leaf_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_leaf_number(&has_bits);
          leaf_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedLinearProjectionTree_Node_LeafFields::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leaf_number = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_leaf_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaf_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedLinearProjectionTree_Node_LeafFields::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 leaf_number = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->leaf_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedLinearProjectionTree_Node_LeafFields::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 leaf_number = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->leaf_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  return target;
}

size_t SerializedLinearProjectionTree_Node_LeafFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 leaf_number = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->leaf_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedLinearProjectionTree_Node_LeafFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedLinearProjectionTree_Node_LeafFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedLinearProjectionTree_Node_LeafFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
    MergeFrom(*source);
  }
}

void SerializedLinearProjectionTree_Node_LeafFields::MergeFrom(const SerializedLinearProjectionTree_Node_LeafFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leaf_number()) {
    set_leaf_number(from.leaf_number());
  }
}

void SerializedLinearProjectionTree_Node_LeafFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedLinearProjectionTree_Node_LeafFields::CopyFrom(const SerializedLinearProjectionTree_Node_LeafFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedLinearProjectionTree_Node_LeafFields::IsInitialized() const {
  return true;
}

void SerializedLinearProjectionTree_Node_LeafFields::InternalSwap(SerializedLinearProjectionTree_Node_LeafFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leaf_number_, other->leaf_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedLinearProjectionTree_Node_LeafFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedLinearProjectionTree_Node::InitAsDefaultInstance() {
  ::research_scann::_SerializedLinearProjectionTree_Node_default_instance_.non_leaf_ = const_cast< ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields*>(
      ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields::internal_default_instance());
  ::research_scann::_SerializedLinearProjectionTree_Node_default_instance_.leaf_ = const_cast< ::research_scann::SerializedLinearProjectionTree_Node_LeafFields*>(
      ::research_scann::SerializedLinearProjectionTree_Node_LeafFields::internal_default_instance());
}
class SerializedLinearProjectionTree_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedLinearProjectionTree_Node>()._has_bits_);
  static const ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields& non_leaf(const SerializedLinearProjectionTree_Node* msg);
  static const ::research_scann::SerializedLinearProjectionTree_Node_LeafFields& leaf(const SerializedLinearProjectionTree_Node* msg);
};

const ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields&
SerializedLinearProjectionTree_Node::_Internal::non_leaf(const SerializedLinearProjectionTree_Node* msg) {
  return *msg->leaf_or_non_leaf_.non_leaf_;
}
const ::research_scann::SerializedLinearProjectionTree_Node_LeafFields&
SerializedLinearProjectionTree_Node::_Internal::leaf(const SerializedLinearProjectionTree_Node* msg) {
  return *msg->leaf_or_non_leaf_.leaf_;
}
void SerializedLinearProjectionTree_Node::set_allocated_non_leaf(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* non_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf_or_non_leaf();
  if (non_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      non_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_leaf, submessage_arena);
    }
    set_has_non_leaf();
    leaf_or_non_leaf_.non_leaf_ = non_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedLinearProjectionTree.Node.non_leaf)
}
void SerializedLinearProjectionTree_Node::set_allocated_leaf(::research_scann::SerializedLinearProjectionTree_Node_LeafFields* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf_or_non_leaf();
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    leaf_or_non_leaf_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedLinearProjectionTree.Node.leaf)
}
SerializedLinearProjectionTree_Node::SerializedLinearProjectionTree_Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SerializedLinearProjectionTree.Node)
}
SerializedLinearProjectionTree_Node::SerializedLinearProjectionTree_Node(const SerializedLinearProjectionTree_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_leaf_or_non_leaf();
  switch (from.leaf_or_non_leaf_case()) {
    case kNonLeaf: {
      mutable_non_leaf()->::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields::MergeFrom(from.non_leaf());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::research_scann::SerializedLinearProjectionTree_Node_LeafFields::MergeFrom(from.leaf());
      break;
    }
    case LEAF_OR_NON_LEAF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedLinearProjectionTree.Node)
}

void SerializedLinearProjectionTree_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  clear_has_leaf_or_non_leaf();
}

SerializedLinearProjectionTree_Node::~SerializedLinearProjectionTree_Node() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedLinearProjectionTree.Node)
  SharedDtor();
}

void SerializedLinearProjectionTree_Node::SharedDtor() {
  if (has_leaf_or_non_leaf()) {
    clear_leaf_or_non_leaf();
  }
}

void SerializedLinearProjectionTree_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedLinearProjectionTree_Node& SerializedLinearProjectionTree_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedLinearProjectionTree_Node_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  return *internal_default_instance();
}


void SerializedLinearProjectionTree_Node::clear_leaf_or_non_leaf() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.SerializedLinearProjectionTree.Node)
  switch (leaf_or_non_leaf_case()) {
    case kNonLeaf: {
      delete leaf_or_non_leaf_.non_leaf_;
      break;
    }
    case kLeaf: {
      delete leaf_or_non_leaf_.leaf_;
      break;
    }
    case LEAF_OR_NON_LEAF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_OR_NON_LEAF_NOT_SET;
}


void SerializedLinearProjectionTree_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedLinearProjectionTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_leaf_or_non_leaf();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedLinearProjectionTree_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.SerializedLinearProjectionTree.Node.NonLeafFields non_leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_non_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.SerializedLinearProjectionTree.Node.LeafFields leaf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedLinearProjectionTree_Node::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SerializedLinearProjectionTree.Node)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.SerializedLinearProjectionTree.Node.NonLeafFields non_leaf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_non_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.SerializedLinearProjectionTree.Node.LeafFields leaf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SerializedLinearProjectionTree.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SerializedLinearProjectionTree.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedLinearProjectionTree_Node::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SerializedLinearProjectionTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (leaf_or_non_leaf_case()) {
    case kNonLeaf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::non_leaf(this), output);
      break;
    case kLeaf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::leaf(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SerializedLinearProjectionTree.Node)
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedLinearProjectionTree_Node::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedLinearProjectionTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (leaf_or_non_leaf_case()) {
    case kNonLeaf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::non_leaf(this), target);
      break;
    case kLeaf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::leaf(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedLinearProjectionTree.Node)
  return target;
}

size_t SerializedLinearProjectionTree_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedLinearProjectionTree.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (leaf_or_non_leaf_case()) {
    // optional .research_scann.SerializedLinearProjectionTree.Node.NonLeafFields non_leaf = 1;
    case kNonLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leaf_or_non_leaf_.non_leaf_);
      break;
    }
    // optional .research_scann.SerializedLinearProjectionTree.Node.LeafFields leaf = 2;
    case kLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leaf_or_non_leaf_.leaf_);
      break;
    }
    case LEAF_OR_NON_LEAF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedLinearProjectionTree_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SerializedLinearProjectionTree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedLinearProjectionTree_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedLinearProjectionTree_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SerializedLinearProjectionTree.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SerializedLinearProjectionTree.Node)
    MergeFrom(*source);
  }
}

void SerializedLinearProjectionTree_Node::MergeFrom(const SerializedLinearProjectionTree_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedLinearProjectionTree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.leaf_or_non_leaf_case()) {
    case kNonLeaf: {
      mutable_non_leaf()->::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields::MergeFrom(from.non_leaf());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::research_scann::SerializedLinearProjectionTree_Node_LeafFields::MergeFrom(from.leaf());
      break;
    }
    case LEAF_OR_NON_LEAF_NOT_SET: {
      break;
    }
  }
}

void SerializedLinearProjectionTree_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SerializedLinearProjectionTree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedLinearProjectionTree_Node::CopyFrom(const SerializedLinearProjectionTree_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedLinearProjectionTree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedLinearProjectionTree_Node::IsInitialized() const {
  return true;
}

void SerializedLinearProjectionTree_Node::InternalSwap(SerializedLinearProjectionTree_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leaf_or_non_leaf_, other->leaf_or_non_leaf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedLinearProjectionTree_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SerializedLinearProjectionTree::InitAsDefaultInstance() {
  ::research_scann::_SerializedLinearProjectionTree_default_instance_._instance.get_mutable()->root_ = const_cast< ::research_scann::SerializedLinearProjectionTree_Node*>(
      ::research_scann::SerializedLinearProjectionTree_Node::internal_default_instance());
}
class SerializedLinearProjectionTree::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedLinearProjectionTree>()._has_bits_);
  static const ::research_scann::SerializedLinearProjectionTree_Node& root(const SerializedLinearProjectionTree* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::research_scann::SerializedLinearProjectionTree_Node&
SerializedLinearProjectionTree::_Internal::root(const SerializedLinearProjectionTree* msg) {
  return *msg->root_;
}
SerializedLinearProjectionTree::SerializedLinearProjectionTree()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SerializedLinearProjectionTree)
}
SerializedLinearProjectionTree::SerializedLinearProjectionTree(const SerializedLinearProjectionTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root()) {
    root_ = new ::research_scann::SerializedLinearProjectionTree_Node(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedLinearProjectionTree)
}

void SerializedLinearProjectionTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  root_ = nullptr;
}

SerializedLinearProjectionTree::~SerializedLinearProjectionTree() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedLinearProjectionTree)
  SharedDtor();
}

void SerializedLinearProjectionTree::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
}

void SerializedLinearProjectionTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedLinearProjectionTree& SerializedLinearProjectionTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedLinearProjectionTree_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.base);
  return *internal_default_instance();
}


void SerializedLinearProjectionTree::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedLinearProjectionTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_ != nullptr);
    root_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedLinearProjectionTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedLinearProjectionTree::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SerializedLinearProjectionTree)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SerializedLinearProjectionTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SerializedLinearProjectionTree)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedLinearProjectionTree::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SerializedLinearProjectionTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::root(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SerializedLinearProjectionTree)
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedLinearProjectionTree::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedLinearProjectionTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::root(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedLinearProjectionTree)
  return target;
}

size_t SerializedLinearProjectionTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedLinearProjectionTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedLinearProjectionTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SerializedLinearProjectionTree)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedLinearProjectionTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedLinearProjectionTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SerializedLinearProjectionTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SerializedLinearProjectionTree)
    MergeFrom(*source);
  }
}

void SerializedLinearProjectionTree::MergeFrom(const SerializedLinearProjectionTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedLinearProjectionTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root()) {
    mutable_root()->::research_scann::SerializedLinearProjectionTree_Node::MergeFrom(from.root());
  }
}

void SerializedLinearProjectionTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SerializedLinearProjectionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedLinearProjectionTree::CopyFrom(const SerializedLinearProjectionTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedLinearProjectionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedLinearProjectionTree::IsInitialized() const {
  return true;
}

void SerializedLinearProjectionTree::InternalSwap(SerializedLinearProjectionTree* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_, other->root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedLinearProjectionTree::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* Arena::CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* Arena::CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree_Node_LeafFields >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SerializedLinearProjectionTree_Node_LeafFields >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SerializedLinearProjectionTree_Node* Arena::CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree_Node >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SerializedLinearProjectionTree_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SerializedLinearProjectionTree* Arena::CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SerializedLinearProjectionTree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
