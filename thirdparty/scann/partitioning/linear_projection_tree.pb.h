// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/partitioning/linear_projection_tree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
namespace research_scann {
class SerializedLinearProjectionTree;
class SerializedLinearProjectionTreeDefaultTypeInternal;
extern SerializedLinearProjectionTreeDefaultTypeInternal _SerializedLinearProjectionTree_default_instance_;
class SerializedLinearProjectionTree_Node;
class SerializedLinearProjectionTree_NodeDefaultTypeInternal;
extern SerializedLinearProjectionTree_NodeDefaultTypeInternal _SerializedLinearProjectionTree_Node_default_instance_;
class SerializedLinearProjectionTree_Node_LeafFields;
class SerializedLinearProjectionTree_Node_LeafFieldsDefaultTypeInternal;
extern SerializedLinearProjectionTree_Node_LeafFieldsDefaultTypeInternal _SerializedLinearProjectionTree_Node_LeafFields_default_instance_;
class SerializedLinearProjectionTree_Node_NonLeafFields;
class SerializedLinearProjectionTree_Node_NonLeafFieldsDefaultTypeInternal;
extern SerializedLinearProjectionTree_Node_NonLeafFieldsDefaultTypeInternal _SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::SerializedLinearProjectionTree* Arena::CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree>(Arena*);
template<> ::research_scann::SerializedLinearProjectionTree_Node* Arena::CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node>(Arena*);
template<> ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* Arena::CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node_LeafFields>(Arena*);
template<> ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* Arena::CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class SerializedLinearProjectionTree_Node_NonLeafFields :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields) */ {
 public:
  SerializedLinearProjectionTree_Node_NonLeafFields();
  virtual ~SerializedLinearProjectionTree_Node_NonLeafFields();

  SerializedLinearProjectionTree_Node_NonLeafFields(const SerializedLinearProjectionTree_Node_NonLeafFields& from);
  SerializedLinearProjectionTree_Node_NonLeafFields(SerializedLinearProjectionTree_Node_NonLeafFields&& from) noexcept
    : SerializedLinearProjectionTree_Node_NonLeafFields() {
    *this = ::std::move(from);
  }

  inline SerializedLinearProjectionTree_Node_NonLeafFields& operator=(const SerializedLinearProjectionTree_Node_NonLeafFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedLinearProjectionTree_Node_NonLeafFields& operator=(SerializedLinearProjectionTree_Node_NonLeafFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedLinearProjectionTree_Node_NonLeafFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedLinearProjectionTree_Node_NonLeafFields* internal_default_instance() {
    return reinterpret_cast<const SerializedLinearProjectionTree_Node_NonLeafFields*>(
               &_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedLinearProjectionTree_Node_NonLeafFields& a, SerializedLinearProjectionTree_Node_NonLeafFields& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedLinearProjectionTree_Node_NonLeafFields* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedLinearProjectionTree_Node_NonLeafFields* New() const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node_NonLeafFields>(nullptr);
  }

  SerializedLinearProjectionTree_Node_NonLeafFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node_NonLeafFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedLinearProjectionTree_Node_NonLeafFields& from);
  void MergeFrom(const SerializedLinearProjectionTree_Node_NonLeafFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedLinearProjectionTree_Node_NonLeafFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedLinearProjectionTree.Node.NonLeafFields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto);
    return ::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionVectorFieldNumber = 1,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kThresholdFieldNumber = 2,
  };
  // repeated float projection_vector = 1;
  int projection_vector_size() const;
  void clear_projection_vector();
  float projection_vector(int index) const;
  void set_projection_vector(int index, float value);
  void add_projection_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      projection_vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_projection_vector();

  // optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
  bool has_left() const;
  void clear_left();
  const ::research_scann::SerializedLinearProjectionTree_Node& left() const;
  ::research_scann::SerializedLinearProjectionTree_Node* release_left();
  ::research_scann::SerializedLinearProjectionTree_Node* mutable_left();
  void set_allocated_left(::research_scann::SerializedLinearProjectionTree_Node* left);

  // optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
  bool has_right() const;
  void clear_right();
  const ::research_scann::SerializedLinearProjectionTree_Node& right() const;
  ::research_scann::SerializedLinearProjectionTree_Node* release_right();
  ::research_scann::SerializedLinearProjectionTree_Node* mutable_right();
  void set_allocated_right(::research_scann::SerializedLinearProjectionTree_Node* right);

  // optional float threshold = 2;
  bool has_threshold() const;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > projection_vector_;
  ::research_scann::SerializedLinearProjectionTree_Node* left_;
  ::research_scann::SerializedLinearProjectionTree_Node* right_;
  float threshold_;
  friend struct ::TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
};
// -------------------------------------------------------------------

class SerializedLinearProjectionTree_Node_LeafFields :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedLinearProjectionTree.Node.LeafFields) */ {
 public:
  SerializedLinearProjectionTree_Node_LeafFields();
  virtual ~SerializedLinearProjectionTree_Node_LeafFields();

  SerializedLinearProjectionTree_Node_LeafFields(const SerializedLinearProjectionTree_Node_LeafFields& from);
  SerializedLinearProjectionTree_Node_LeafFields(SerializedLinearProjectionTree_Node_LeafFields&& from) noexcept
    : SerializedLinearProjectionTree_Node_LeafFields() {
    *this = ::std::move(from);
  }

  inline SerializedLinearProjectionTree_Node_LeafFields& operator=(const SerializedLinearProjectionTree_Node_LeafFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedLinearProjectionTree_Node_LeafFields& operator=(SerializedLinearProjectionTree_Node_LeafFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedLinearProjectionTree_Node_LeafFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedLinearProjectionTree_Node_LeafFields* internal_default_instance() {
    return reinterpret_cast<const SerializedLinearProjectionTree_Node_LeafFields*>(
               &_SerializedLinearProjectionTree_Node_LeafFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedLinearProjectionTree_Node_LeafFields& a, SerializedLinearProjectionTree_Node_LeafFields& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedLinearProjectionTree_Node_LeafFields* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedLinearProjectionTree_Node_LeafFields* New() const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node_LeafFields>(nullptr);
  }

  SerializedLinearProjectionTree_Node_LeafFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node_LeafFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedLinearProjectionTree_Node_LeafFields& from);
  void MergeFrom(const SerializedLinearProjectionTree_Node_LeafFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedLinearProjectionTree_Node_LeafFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedLinearProjectionTree.Node.LeafFields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto);
    return ::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeafNumberFieldNumber = 5,
  };
  // optional int32 leaf_number = 5;
  bool has_leaf_number() const;
  void clear_leaf_number();
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_number() const;
  void set_leaf_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.SerializedLinearProjectionTree.Node.LeafFields)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_number_;
  friend struct ::TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
};
// -------------------------------------------------------------------

class SerializedLinearProjectionTree_Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedLinearProjectionTree.Node) */ {
 public:
  SerializedLinearProjectionTree_Node();
  virtual ~SerializedLinearProjectionTree_Node();

  SerializedLinearProjectionTree_Node(const SerializedLinearProjectionTree_Node& from);
  SerializedLinearProjectionTree_Node(SerializedLinearProjectionTree_Node&& from) noexcept
    : SerializedLinearProjectionTree_Node() {
    *this = ::std::move(from);
  }

  inline SerializedLinearProjectionTree_Node& operator=(const SerializedLinearProjectionTree_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedLinearProjectionTree_Node& operator=(SerializedLinearProjectionTree_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedLinearProjectionTree_Node& default_instance();

  enum LeafOrNonLeafCase {
    kNonLeaf = 1,
    kLeaf = 2,
    LEAF_OR_NON_LEAF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedLinearProjectionTree_Node* internal_default_instance() {
    return reinterpret_cast<const SerializedLinearProjectionTree_Node*>(
               &_SerializedLinearProjectionTree_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedLinearProjectionTree_Node& a, SerializedLinearProjectionTree_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedLinearProjectionTree_Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedLinearProjectionTree_Node* New() const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node>(nullptr);
  }

  SerializedLinearProjectionTree_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedLinearProjectionTree_Node& from);
  void MergeFrom(const SerializedLinearProjectionTree_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedLinearProjectionTree_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedLinearProjectionTree.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto);
    return ::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SerializedLinearProjectionTree_Node_NonLeafFields NonLeafFields;
  typedef SerializedLinearProjectionTree_Node_LeafFields LeafFields;

  // accessors -------------------------------------------------------

  enum : int {
    kNonLeafFieldNumber = 1,
    kLeafFieldNumber = 2,
  };
  // optional .research_scann.SerializedLinearProjectionTree.Node.NonLeafFields non_leaf = 1;
  bool has_non_leaf() const;
  void clear_non_leaf();
  const ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields& non_leaf() const;
  ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* release_non_leaf();
  ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* mutable_non_leaf();
  void set_allocated_non_leaf(::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* non_leaf);

  // optional .research_scann.SerializedLinearProjectionTree.Node.LeafFields leaf = 2;
  bool has_leaf() const;
  void clear_leaf();
  const ::research_scann::SerializedLinearProjectionTree_Node_LeafFields& leaf() const;
  ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* release_leaf();
  ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* mutable_leaf();
  void set_allocated_leaf(::research_scann::SerializedLinearProjectionTree_Node_LeafFields* leaf);

  void clear_leaf_or_non_leaf();
  LeafOrNonLeafCase leaf_or_non_leaf_case() const;
  // @@protoc_insertion_point(class_scope:research_scann.SerializedLinearProjectionTree.Node)
 private:
  class _Internal;
  void set_has_non_leaf();
  void set_has_leaf();

  inline bool has_leaf_or_non_leaf() const;
  inline void clear_has_leaf_or_non_leaf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union LeafOrNonLeafUnion {
    LeafOrNonLeafUnion() {}
    ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* non_leaf_;
    ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* leaf_;
  } leaf_or_non_leaf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
};
// -------------------------------------------------------------------

class SerializedLinearProjectionTree :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedLinearProjectionTree) */ {
 public:
  SerializedLinearProjectionTree();
  virtual ~SerializedLinearProjectionTree();

  SerializedLinearProjectionTree(const SerializedLinearProjectionTree& from);
  SerializedLinearProjectionTree(SerializedLinearProjectionTree&& from) noexcept
    : SerializedLinearProjectionTree() {
    *this = ::std::move(from);
  }

  inline SerializedLinearProjectionTree& operator=(const SerializedLinearProjectionTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedLinearProjectionTree& operator=(SerializedLinearProjectionTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedLinearProjectionTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedLinearProjectionTree* internal_default_instance() {
    return reinterpret_cast<const SerializedLinearProjectionTree*>(
               &_SerializedLinearProjectionTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedLinearProjectionTree& a, SerializedLinearProjectionTree& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedLinearProjectionTree* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedLinearProjectionTree* New() const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree>(nullptr);
  }

  SerializedLinearProjectionTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedLinearProjectionTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedLinearProjectionTree& from);
  void MergeFrom(const SerializedLinearProjectionTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedLinearProjectionTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedLinearProjectionTree";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto);
    return ::descriptor_table_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SerializedLinearProjectionTree_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
  bool has_root() const;
  void clear_root();
  const ::research_scann::SerializedLinearProjectionTree_Node& root() const;
  ::research_scann::SerializedLinearProjectionTree_Node* release_root();
  ::research_scann::SerializedLinearProjectionTree_Node* mutable_root();
  void set_allocated_root(::research_scann::SerializedLinearProjectionTree_Node* root);

  // @@protoc_insertion_point(class_scope:research_scann.SerializedLinearProjectionTree)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::SerializedLinearProjectionTree_Node* root_;
  friend struct ::TableStruct_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedLinearProjectionTree_Node_NonLeafFields

// repeated float projection_vector = 1;
inline int SerializedLinearProjectionTree_Node_NonLeafFields::projection_vector_size() const {
  return projection_vector_.size();
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::clear_projection_vector() {
  projection_vector_.Clear();
}
inline float SerializedLinearProjectionTree_Node_NonLeafFields::projection_vector(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.projection_vector)
  return projection_vector_.Get(index);
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::set_projection_vector(int index, float value) {
  projection_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.projection_vector)
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::add_projection_vector(float value) {
  projection_vector_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.projection_vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedLinearProjectionTree_Node_NonLeafFields::projection_vector() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.projection_vector)
  return projection_vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedLinearProjectionTree_Node_NonLeafFields::mutable_projection_vector() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.projection_vector)
  return &projection_vector_;
}

// optional float threshold = 2;
inline bool SerializedLinearProjectionTree_Node_NonLeafFields::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::clear_threshold() {
  threshold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SerializedLinearProjectionTree_Node_NonLeafFields::threshold() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.threshold)
  return threshold_;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::set_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  threshold_ = value;
  // @@protoc_insertion_point(field_set:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.threshold)
}

// optional .research_scann.SerializedLinearProjectionTree.Node left = 3;
inline bool SerializedLinearProjectionTree_Node_NonLeafFields::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::SerializedLinearProjectionTree_Node& SerializedLinearProjectionTree_Node_NonLeafFields::left() const {
  const ::research_scann::SerializedLinearProjectionTree_Node* p = left_;
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.left)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::SerializedLinearProjectionTree_Node*>(
      &::research_scann::_SerializedLinearProjectionTree_Node_default_instance_);
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree_Node_NonLeafFields::release_left() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.left)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedLinearProjectionTree_Node* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree_Node_NonLeafFields::mutable_left() {
  _has_bits_[0] |= 0x00000001u;
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node>(GetArenaNoVirtual());
    left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.left)
  return left_;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::set_allocated_left(::research_scann::SerializedLinearProjectionTree_Node* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.left)
}

// optional .research_scann.SerializedLinearProjectionTree.Node right = 4;
inline bool SerializedLinearProjectionTree_Node_NonLeafFields::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::clear_right() {
  if (right_ != nullptr) right_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::research_scann::SerializedLinearProjectionTree_Node& SerializedLinearProjectionTree_Node_NonLeafFields::right() const {
  const ::research_scann::SerializedLinearProjectionTree_Node* p = right_;
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.right)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::SerializedLinearProjectionTree_Node*>(
      &::research_scann::_SerializedLinearProjectionTree_Node_default_instance_);
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree_Node_NonLeafFields::release_right() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.right)
  _has_bits_[0] &= ~0x00000002u;
  ::research_scann::SerializedLinearProjectionTree_Node* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree_Node_NonLeafFields::mutable_right() {
  _has_bits_[0] |= 0x00000002u;
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node>(GetArenaNoVirtual());
    right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.right)
  return right_;
}
inline void SerializedLinearProjectionTree_Node_NonLeafFields::set_allocated_right(::research_scann::SerializedLinearProjectionTree_Node* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedLinearProjectionTree.Node.NonLeafFields.right)
}

// -------------------------------------------------------------------

// SerializedLinearProjectionTree_Node_LeafFields

// optional int32 leaf_number = 5;
inline bool SerializedLinearProjectionTree_Node_LeafFields::has_leaf_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedLinearProjectionTree_Node_LeafFields::clear_leaf_number() {
  leaf_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedLinearProjectionTree_Node_LeafFields::leaf_number() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.LeafFields.leaf_number)
  return leaf_number_;
}
inline void SerializedLinearProjectionTree_Node_LeafFields::set_leaf_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  leaf_number_ = value;
  // @@protoc_insertion_point(field_set:research_scann.SerializedLinearProjectionTree.Node.LeafFields.leaf_number)
}

// -------------------------------------------------------------------

// SerializedLinearProjectionTree_Node

// optional .research_scann.SerializedLinearProjectionTree.Node.NonLeafFields non_leaf = 1;
inline bool SerializedLinearProjectionTree_Node::has_non_leaf() const {
  return leaf_or_non_leaf_case() == kNonLeaf;
}
inline void SerializedLinearProjectionTree_Node::set_has_non_leaf() {
  _oneof_case_[0] = kNonLeaf;
}
inline void SerializedLinearProjectionTree_Node::clear_non_leaf() {
  if (has_non_leaf()) {
    delete leaf_or_non_leaf_.non_leaf_;
    clear_has_leaf_or_non_leaf();
  }
}
inline ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* SerializedLinearProjectionTree_Node::release_non_leaf() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedLinearProjectionTree.Node.non_leaf)
  if (has_non_leaf()) {
    clear_has_leaf_or_non_leaf();
      ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* temp = leaf_or_non_leaf_.non_leaf_;
    leaf_or_non_leaf_.non_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields& SerializedLinearProjectionTree_Node::non_leaf() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.non_leaf)
  return has_non_leaf()
      ? *leaf_or_non_leaf_.non_leaf_
      : *reinterpret_cast< ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields*>(&::research_scann::_SerializedLinearProjectionTree_Node_NonLeafFields_default_instance_);
}
inline ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields* SerializedLinearProjectionTree_Node::mutable_non_leaf() {
  if (!has_non_leaf()) {
    clear_leaf_or_non_leaf();
    set_has_non_leaf();
    leaf_or_non_leaf_.non_leaf_ = CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree_Node_NonLeafFields >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedLinearProjectionTree.Node.non_leaf)
  return leaf_or_non_leaf_.non_leaf_;
}

// optional .research_scann.SerializedLinearProjectionTree.Node.LeafFields leaf = 2;
inline bool SerializedLinearProjectionTree_Node::has_leaf() const {
  return leaf_or_non_leaf_case() == kLeaf;
}
inline void SerializedLinearProjectionTree_Node::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
inline void SerializedLinearProjectionTree_Node::clear_leaf() {
  if (has_leaf()) {
    delete leaf_or_non_leaf_.leaf_;
    clear_has_leaf_or_non_leaf();
  }
}
inline ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* SerializedLinearProjectionTree_Node::release_leaf() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedLinearProjectionTree.Node.leaf)
  if (has_leaf()) {
    clear_has_leaf_or_non_leaf();
      ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* temp = leaf_or_non_leaf_.leaf_;
    leaf_or_non_leaf_.leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::SerializedLinearProjectionTree_Node_LeafFields& SerializedLinearProjectionTree_Node::leaf() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.Node.leaf)
  return has_leaf()
      ? *leaf_or_non_leaf_.leaf_
      : *reinterpret_cast< ::research_scann::SerializedLinearProjectionTree_Node_LeafFields*>(&::research_scann::_SerializedLinearProjectionTree_Node_LeafFields_default_instance_);
}
inline ::research_scann::SerializedLinearProjectionTree_Node_LeafFields* SerializedLinearProjectionTree_Node::mutable_leaf() {
  if (!has_leaf()) {
    clear_leaf_or_non_leaf();
    set_has_leaf();
    leaf_or_non_leaf_.leaf_ = CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree_Node_LeafFields >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedLinearProjectionTree.Node.leaf)
  return leaf_or_non_leaf_.leaf_;
}

inline bool SerializedLinearProjectionTree_Node::has_leaf_or_non_leaf() const {
  return leaf_or_non_leaf_case() != LEAF_OR_NON_LEAF_NOT_SET;
}
inline void SerializedLinearProjectionTree_Node::clear_has_leaf_or_non_leaf() {
  _oneof_case_[0] = LEAF_OR_NON_LEAF_NOT_SET;
}
inline SerializedLinearProjectionTree_Node::LeafOrNonLeafCase SerializedLinearProjectionTree_Node::leaf_or_non_leaf_case() const {
  return SerializedLinearProjectionTree_Node::LeafOrNonLeafCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SerializedLinearProjectionTree

// optional .research_scann.SerializedLinearProjectionTree.Node root = 1;
inline bool SerializedLinearProjectionTree::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedLinearProjectionTree::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::SerializedLinearProjectionTree_Node& SerializedLinearProjectionTree::root() const {
  const ::research_scann::SerializedLinearProjectionTree_Node* p = root_;
  // @@protoc_insertion_point(field_get:research_scann.SerializedLinearProjectionTree.root)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::SerializedLinearProjectionTree_Node*>(
      &::research_scann::_SerializedLinearProjectionTree_Node_default_instance_);
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree::release_root() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedLinearProjectionTree.root)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedLinearProjectionTree_Node* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::research_scann::SerializedLinearProjectionTree_Node* SerializedLinearProjectionTree::mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::SerializedLinearProjectionTree_Node>(GetArenaNoVirtual());
    root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedLinearProjectionTree.root)
  return root_;
}
inline void SerializedLinearProjectionTree::set_allocated_root(::research_scann::SerializedLinearProjectionTree_Node* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedLinearProjectionTree.root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2flinear_5fprojection_5ftree_2eproto
