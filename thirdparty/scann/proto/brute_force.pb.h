// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/brute_force.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fbrute_5fforce_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fbrute_5fforce_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/proto/exact_reordering.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fbrute_5fforce_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fbrute_5fforce_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fbrute_5fforce_2eproto;
namespace research_scann {
class BruteForceConfig;
class BruteForceConfigDefaultTypeInternal;
extern BruteForceConfigDefaultTypeInternal _BruteForceConfig_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::BruteForceConfig* Arena::CreateMaybeMessage<::research_scann::BruteForceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class BruteForceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.BruteForceConfig) */ {
 public:
  BruteForceConfig();
  virtual ~BruteForceConfig();

  BruteForceConfig(const BruteForceConfig& from);
  BruteForceConfig(BruteForceConfig&& from) noexcept
    : BruteForceConfig() {
    *this = ::std::move(from);
  }

  inline BruteForceConfig& operator=(const BruteForceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BruteForceConfig& operator=(BruteForceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BruteForceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BruteForceConfig* internal_default_instance() {
    return reinterpret_cast<const BruteForceConfig*>(
               &_BruteForceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BruteForceConfig& a, BruteForceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BruteForceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BruteForceConfig* New() const final {
    return CreateMaybeMessage<BruteForceConfig>(nullptr);
  }

  BruteForceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BruteForceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BruteForceConfig& from);
  void MergeFrom(const BruteForceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BruteForceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.BruteForceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fbrute_5fforce_2eproto);
    return ::descriptor_table_scann_2fproto_2fbrute_5fforce_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedPointFieldNumber = 4,
    kScalarQuantizedFieldNumber = 1,
    kScalarQuantizationMultiplierQuantileFieldNumber = 2,
    kScalarQuantizationNoiseShapingThresholdFieldNumber = 3,
  };
  // optional .research_scann.FixedPoint fixed_point = 4;
  bool has_fixed_point() const;
  void clear_fixed_point();
  const ::research_scann::FixedPoint& fixed_point() const;
  ::research_scann::FixedPoint* release_fixed_point();
  ::research_scann::FixedPoint* mutable_fixed_point();
  void set_allocated_fixed_point(::research_scann::FixedPoint* fixed_point);

  // optional bool scalar_quantized = 1 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_scalar_quantized() const;
  PROTOBUF_DEPRECATED void clear_scalar_quantized();
  PROTOBUF_DEPRECATED bool scalar_quantized() const;
  PROTOBUF_DEPRECATED void set_scalar_quantized(bool value);

  // optional float scalar_quantization_multiplier_quantile = 2 [default = 1, deprecated = true];
  PROTOBUF_DEPRECATED bool has_scalar_quantization_multiplier_quantile() const;
  PROTOBUF_DEPRECATED void clear_scalar_quantization_multiplier_quantile();
  PROTOBUF_DEPRECATED float scalar_quantization_multiplier_quantile() const;
  PROTOBUF_DEPRECATED void set_scalar_quantization_multiplier_quantile(float value);

  // optional float scalar_quantization_noise_shaping_threshold = 3 [default = nan];
  bool has_scalar_quantization_noise_shaping_threshold() const;
  void clear_scalar_quantization_noise_shaping_threshold();
  float scalar_quantization_noise_shaping_threshold() const;
  void set_scalar_quantization_noise_shaping_threshold(float value);

  // @@protoc_insertion_point(class_scope:research_scann.BruteForceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::FixedPoint* fixed_point_;
  bool scalar_quantized_;
  float scalar_quantization_multiplier_quantile_;
  float scalar_quantization_noise_shaping_threshold_;
  friend struct ::TableStruct_scann_2fproto_2fbrute_5fforce_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BruteForceConfig

// optional bool scalar_quantized = 1 [default = false, deprecated = true];
inline bool BruteForceConfig::has_scalar_quantized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BruteForceConfig::clear_scalar_quantized() {
  scalar_quantized_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BruteForceConfig::scalar_quantized() const {
  // @@protoc_insertion_point(field_get:research_scann.BruteForceConfig.scalar_quantized)
  return scalar_quantized_;
}
inline void BruteForceConfig::set_scalar_quantized(bool value) {
  _has_bits_[0] |= 0x00000002u;
  scalar_quantized_ = value;
  // @@protoc_insertion_point(field_set:research_scann.BruteForceConfig.scalar_quantized)
}

// optional .research_scann.FixedPoint fixed_point = 4;
inline bool BruteForceConfig::has_fixed_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::research_scann::FixedPoint& BruteForceConfig::fixed_point() const {
  const ::research_scann::FixedPoint* p = fixed_point_;
  // @@protoc_insertion_point(field_get:research_scann.BruteForceConfig.fixed_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::FixedPoint*>(
      &::research_scann::_FixedPoint_default_instance_);
}
inline ::research_scann::FixedPoint* BruteForceConfig::release_fixed_point() {
  // @@protoc_insertion_point(field_release:research_scann.BruteForceConfig.fixed_point)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::FixedPoint* temp = fixed_point_;
  fixed_point_ = nullptr;
  return temp;
}
inline ::research_scann::FixedPoint* BruteForceConfig::mutable_fixed_point() {
  _has_bits_[0] |= 0x00000001u;
  if (fixed_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::FixedPoint>(GetArenaNoVirtual());
    fixed_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.BruteForceConfig.fixed_point)
  return fixed_point_;
}
inline void BruteForceConfig::set_allocated_fixed_point(::research_scann::FixedPoint* fixed_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_point_);
  }
  if (fixed_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fixed_point_ = fixed_point;
  // @@protoc_insertion_point(field_set_allocated:research_scann.BruteForceConfig.fixed_point)
}

// optional float scalar_quantization_multiplier_quantile = 2 [default = 1, deprecated = true];
inline bool BruteForceConfig::has_scalar_quantization_multiplier_quantile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BruteForceConfig::clear_scalar_quantization_multiplier_quantile() {
  scalar_quantization_multiplier_quantile_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float BruteForceConfig::scalar_quantization_multiplier_quantile() const {
  // @@protoc_insertion_point(field_get:research_scann.BruteForceConfig.scalar_quantization_multiplier_quantile)
  return scalar_quantization_multiplier_quantile_;
}
inline void BruteForceConfig::set_scalar_quantization_multiplier_quantile(float value) {
  _has_bits_[0] |= 0x00000004u;
  scalar_quantization_multiplier_quantile_ = value;
  // @@protoc_insertion_point(field_set:research_scann.BruteForceConfig.scalar_quantization_multiplier_quantile)
}

// optional float scalar_quantization_noise_shaping_threshold = 3 [default = nan];
inline bool BruteForceConfig::has_scalar_quantization_noise_shaping_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BruteForceConfig::clear_scalar_quantization_noise_shaping_threshold() {
  scalar_quantization_noise_shaping_threshold_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000008u;
}
inline float BruteForceConfig::scalar_quantization_noise_shaping_threshold() const {
  // @@protoc_insertion_point(field_get:research_scann.BruteForceConfig.scalar_quantization_noise_shaping_threshold)
  return scalar_quantization_noise_shaping_threshold_;
}
inline void BruteForceConfig::set_scalar_quantization_noise_shaping_threshold(float value) {
  _has_bits_[0] |= 0x00000008u;
  scalar_quantization_noise_shaping_threshold_ = value;
  // @@protoc_insertion_point(field_set:research_scann.BruteForceConfig.scalar_quantization_noise_shaping_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fbrute_5fforce_2eproto
