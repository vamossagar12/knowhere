// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/centers.proto

#include "scann/proto/centers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fcenters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fdata_5fformat_2ffeatures_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto;
namespace research_scann {
class CentersForAllSubspacesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CentersForAllSubspaces> _instance;
} _CentersForAllSubspaces_default_instance_;
class CentersForSubspaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CentersForSubspace> _instance;
} _CentersForSubspace_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_CentersForAllSubspaces_default_instance_;
    new (ptr) ::research_scann::CentersForAllSubspaces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::CentersForAllSubspaces::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto}, {
      &scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto.base,}};

static void InitDefaultsscc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_CentersForSubspace_default_instance_;
    new (ptr) ::research_scann::CentersForSubspace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::CentersForSubspace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto}, {
      &scc_info_GenericFeatureVector_scann_2fdata_5fformat_2ffeatures_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fcenters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fcenters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fcenters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fcenters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, subspace_centers_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, quantization_scheme_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForSubspace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForSubspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForSubspace, center_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::research_scann::CentersForAllSubspaces)},
  { 9, 15, sizeof(::research_scann::CentersForSubspace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_CentersForAllSubspaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_CentersForSubspace_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fcenters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031scann/proto/centers.proto\022\016research_sc"
  "ann\032 scann/data_format/features.proto\032\026s"
  "cann/proto/hash.proto\"\267\001\n\026CentersForAllS"
  "ubspaces\022<\n\020subspace_centers\030\001 \003(\0132\".res"
  "earch_scann.CentersForSubspace\022_\n\023quanti"
  "zation_scheme\030\002 \001(\01629.research_scann.Asy"
  "mmetricHasherConfig.QuantizationScheme:\007"
  "PRODUCT\"J\n\022CentersForSubspace\0224\n\006center\030"
  "\001 \003(\0132$.research_scann.GenericFeatureVec"
  "tor"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fcenters_2eproto_deps[2] = {
  &::descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto,
  &::descriptor_table_scann_2fproto_2fhash_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fcenters_2eproto_sccs[2] = {
  &scc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto.base,
  &scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fcenters_2eproto_once;
static bool descriptor_table_scann_2fproto_2fcenters_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fcenters_2eproto = {
  &descriptor_table_scann_2fproto_2fcenters_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fcenters_2eproto, "scann/proto/centers.proto", 363,
  &descriptor_table_scann_2fproto_2fcenters_2eproto_once, descriptor_table_scann_2fproto_2fcenters_2eproto_sccs, descriptor_table_scann_2fproto_2fcenters_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fcenters_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fcenters_2eproto, 2, file_level_enum_descriptors_scann_2fproto_2fcenters_2eproto, file_level_service_descriptors_scann_2fproto_2fcenters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fcenters_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fcenters_2eproto), true);
namespace research_scann {

// ===================================================================

void CentersForAllSubspaces::InitAsDefaultInstance() {
}
class CentersForAllSubspaces::_Internal {
 public:
  using HasBits = decltype(std::declval<CentersForAllSubspaces>()._has_bits_);
  static void set_has_quantization_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CentersForAllSubspaces::CentersForAllSubspaces()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.CentersForAllSubspaces)
}
CentersForAllSubspaces::CentersForAllSubspaces(const CentersForAllSubspaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subspace_centers_(from.subspace_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quantization_scheme_ = from.quantization_scheme_;
  // @@protoc_insertion_point(copy_constructor:research_scann.CentersForAllSubspaces)
}

void CentersForAllSubspaces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto.base);
  quantization_scheme_ = 0;
}

CentersForAllSubspaces::~CentersForAllSubspaces() {
  // @@protoc_insertion_point(destructor:research_scann.CentersForAllSubspaces)
  SharedDtor();
}

void CentersForAllSubspaces::SharedDtor() {
}

void CentersForAllSubspaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CentersForAllSubspaces& CentersForAllSubspaces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CentersForAllSubspaces_scann_2fproto_2fcenters_2eproto.base);
  return *internal_default_instance();
}


void CentersForAllSubspaces::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.CentersForAllSubspaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subspace_centers_.Clear();
  quantization_scheme_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CentersForAllSubspaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.CentersForSubspace subspace_centers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subspace_centers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::AsymmetricHasherConfig_QuantizationScheme_IsValid(val))) {
            set_quantization_scheme(static_cast<::research_scann::AsymmetricHasherConfig_QuantizationScheme>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CentersForAllSubspaces::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.CentersForAllSubspaces)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.CentersForSubspace subspace_centers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subspace_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::AsymmetricHasherConfig_QuantizationScheme_IsValid(value)) {
            set_quantization_scheme(static_cast< ::research_scann::AsymmetricHasherConfig_QuantizationScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.CentersForAllSubspaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.CentersForAllSubspaces)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CentersForAllSubspaces::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.CentersForAllSubspaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subspace_centers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subspace_centers(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->quantization_scheme(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.CentersForAllSubspaces)
}

::PROTOBUF_NAMESPACE_ID::uint8* CentersForAllSubspaces::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.CentersForAllSubspaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subspace_centers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subspace_centers(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->quantization_scheme(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.CentersForAllSubspaces)
  return target;
}

size_t CentersForAllSubspaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.CentersForAllSubspaces)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subspace_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subspace_centers(static_cast<int>(i)));
    }
  }

  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->quantization_scheme());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CentersForAllSubspaces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.CentersForAllSubspaces)
  GOOGLE_DCHECK_NE(&from, this);
  const CentersForAllSubspaces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CentersForAllSubspaces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.CentersForAllSubspaces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.CentersForAllSubspaces)
    MergeFrom(*source);
  }
}

void CentersForAllSubspaces::MergeFrom(const CentersForAllSubspaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.CentersForAllSubspaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subspace_centers_.MergeFrom(from.subspace_centers_);
  if (from.has_quantization_scheme()) {
    set_quantization_scheme(from.quantization_scheme());
  }
}

void CentersForAllSubspaces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.CentersForAllSubspaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CentersForAllSubspaces::CopyFrom(const CentersForAllSubspaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.CentersForAllSubspaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentersForAllSubspaces::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->subspace_centers())) return false;
  return true;
}

void CentersForAllSubspaces::InternalSwap(CentersForAllSubspaces* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&subspace_centers_)->InternalSwap(CastToBase(&other->subspace_centers_));
  swap(quantization_scheme_, other->quantization_scheme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CentersForAllSubspaces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CentersForSubspace::InitAsDefaultInstance() {
}
class CentersForSubspace::_Internal {
 public:
  using HasBits = decltype(std::declval<CentersForSubspace>()._has_bits_);
};

void CentersForSubspace::clear_center() {
  center_.Clear();
}
CentersForSubspace::CentersForSubspace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.CentersForSubspace)
}
CentersForSubspace::CentersForSubspace(const CentersForSubspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      center_(from.center_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.CentersForSubspace)
}

void CentersForSubspace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto.base);
}

CentersForSubspace::~CentersForSubspace() {
  // @@protoc_insertion_point(destructor:research_scann.CentersForSubspace)
  SharedDtor();
}

void CentersForSubspace::SharedDtor() {
}

void CentersForSubspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CentersForSubspace& CentersForSubspace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CentersForSubspace_scann_2fproto_2fcenters_2eproto.base);
  return *internal_default_instance();
}


void CentersForSubspace::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.CentersForSubspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CentersForSubspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.GenericFeatureVector center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_center(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CentersForSubspace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.CentersForSubspace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.GenericFeatureVector center = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.CentersForSubspace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.CentersForSubspace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CentersForSubspace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.CentersForSubspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.GenericFeatureVector center = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->center_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->center(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.CentersForSubspace)
}

::PROTOBUF_NAMESPACE_ID::uint8* CentersForSubspace::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.CentersForSubspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.GenericFeatureVector center = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->center_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->center(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.CentersForSubspace)
  return target;
}

size_t CentersForSubspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.CentersForSubspace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.GenericFeatureVector center = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->center_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->center(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CentersForSubspace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.CentersForSubspace)
  GOOGLE_DCHECK_NE(&from, this);
  const CentersForSubspace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CentersForSubspace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.CentersForSubspace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.CentersForSubspace)
    MergeFrom(*source);
  }
}

void CentersForSubspace::MergeFrom(const CentersForSubspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.CentersForSubspace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_.MergeFrom(from.center_);
}

void CentersForSubspace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.CentersForSubspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CentersForSubspace::CopyFrom(const CentersForSubspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.CentersForSubspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentersForSubspace::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->center())) return false;
  return true;
}

void CentersForSubspace::InternalSwap(CentersForSubspace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&center_)->InternalSwap(CastToBase(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CentersForSubspace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::CentersForAllSubspaces* Arena::CreateMaybeMessage< ::research_scann::CentersForAllSubspaces >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::CentersForAllSubspaces >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::CentersForSubspace* Arena::CreateMaybeMessage< ::research_scann::CentersForSubspace >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::CentersForSubspace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
