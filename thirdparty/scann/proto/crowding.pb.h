// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/crowding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcrowding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcrowding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fcrowding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fcrowding_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fcrowding_2eproto;
namespace research_scann {
class Crowding;
class CrowdingDefaultTypeInternal;
extern CrowdingDefaultTypeInternal _Crowding_default_instance_;
class Crowding_Offline;
class Crowding_OfflineDefaultTypeInternal;
extern Crowding_OfflineDefaultTypeInternal _Crowding_Offline_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::Crowding* Arena::CreateMaybeMessage<::research_scann::Crowding>(Arena*);
template<> ::research_scann::Crowding_Offline* Arena::CreateMaybeMessage<::research_scann::Crowding_Offline>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class Crowding_Offline :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.Crowding.Offline) */ {
 public:
  Crowding_Offline();
  virtual ~Crowding_Offline();

  Crowding_Offline(const Crowding_Offline& from);
  Crowding_Offline(Crowding_Offline&& from) noexcept
    : Crowding_Offline() {
    *this = ::std::move(from);
  }

  inline Crowding_Offline& operator=(const Crowding_Offline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crowding_Offline& operator=(Crowding_Offline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Crowding_Offline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crowding_Offline* internal_default_instance() {
    return reinterpret_cast<const Crowding_Offline*>(
               &_Crowding_Offline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Crowding_Offline& a, Crowding_Offline& b) {
    a.Swap(&b);
  }
  inline void Swap(Crowding_Offline* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Crowding_Offline* New() const final {
    return CreateMaybeMessage<Crowding_Offline>(nullptr);
  }

  Crowding_Offline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Crowding_Offline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Crowding_Offline& from);
  void MergeFrom(const Crowding_Offline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crowding_Offline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.Crowding.Offline";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fcrowding_2eproto);
    return ::descriptor_table_scann_2fproto_2fcrowding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerCrowdingAttributePreReorderingNumNeighborsFieldNumber = 1,
    kPerCrowdingAttributePostReorderingNumNeighborsFieldNumber = 2,
  };
  // optional int32 per_crowding_attribute_pre_reordering_num_neighbors = 1 [default = 2147483647];
  bool has_per_crowding_attribute_pre_reordering_num_neighbors() const;
  void clear_per_crowding_attribute_pre_reordering_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_pre_reordering_num_neighbors() const;
  void set_per_crowding_attribute_pre_reordering_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 per_crowding_attribute_post_reordering_num_neighbors = 2 [default = 2147483647];
  bool has_per_crowding_attribute_post_reordering_num_neighbors() const;
  void clear_per_crowding_attribute_post_reordering_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_post_reordering_num_neighbors() const;
  void set_per_crowding_attribute_post_reordering_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.Crowding.Offline)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_pre_reordering_num_neighbors_;
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_post_reordering_num_neighbors_;
  friend struct ::TableStruct_scann_2fproto_2fcrowding_2eproto;
};
// -------------------------------------------------------------------

class Crowding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.Crowding) */ {
 public:
  Crowding();
  virtual ~Crowding();

  Crowding(const Crowding& from);
  Crowding(Crowding&& from) noexcept
    : Crowding() {
    *this = ::std::move(from);
  }

  inline Crowding& operator=(const Crowding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crowding& operator=(Crowding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Crowding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crowding* internal_default_instance() {
    return reinterpret_cast<const Crowding*>(
               &_Crowding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Crowding& a, Crowding& b) {
    a.Swap(&b);
  }
  inline void Swap(Crowding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Crowding* New() const final {
    return CreateMaybeMessage<Crowding>(nullptr);
  }

  Crowding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Crowding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Crowding& from);
  void MergeFrom(const Crowding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crowding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.Crowding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fcrowding_2eproto);
    return ::descriptor_table_scann_2fproto_2fcrowding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Crowding_Offline Offline;

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // optional .research_scann.Crowding.Offline offline = 2;
  bool has_offline() const;
  void clear_offline();
  const ::research_scann::Crowding_Offline& offline() const;
  ::research_scann::Crowding_Offline* release_offline();
  ::research_scann::Crowding_Offline* mutable_offline();
  void set_allocated_offline(::research_scann::Crowding_Offline* offline);

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:research_scann.Crowding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::Crowding_Offline* offline_;
  bool enabled_;
  friend struct ::TableStruct_scann_2fproto_2fcrowding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Crowding_Offline

// optional int32 per_crowding_attribute_pre_reordering_num_neighbors = 1 [default = 2147483647];
inline bool Crowding_Offline::has_per_crowding_attribute_pre_reordering_num_neighbors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crowding_Offline::clear_per_crowding_attribute_pre_reordering_num_neighbors() {
  per_crowding_attribute_pre_reordering_num_neighbors_ = 2147483647;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Crowding_Offline::per_crowding_attribute_pre_reordering_num_neighbors() const {
  // @@protoc_insertion_point(field_get:research_scann.Crowding.Offline.per_crowding_attribute_pre_reordering_num_neighbors)
  return per_crowding_attribute_pre_reordering_num_neighbors_;
}
inline void Crowding_Offline::set_per_crowding_attribute_pre_reordering_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  per_crowding_attribute_pre_reordering_num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:research_scann.Crowding.Offline.per_crowding_attribute_pre_reordering_num_neighbors)
}

// optional int32 per_crowding_attribute_post_reordering_num_neighbors = 2 [default = 2147483647];
inline bool Crowding_Offline::has_per_crowding_attribute_post_reordering_num_neighbors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crowding_Offline::clear_per_crowding_attribute_post_reordering_num_neighbors() {
  per_crowding_attribute_post_reordering_num_neighbors_ = 2147483647;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Crowding_Offline::per_crowding_attribute_post_reordering_num_neighbors() const {
  // @@protoc_insertion_point(field_get:research_scann.Crowding.Offline.per_crowding_attribute_post_reordering_num_neighbors)
  return per_crowding_attribute_post_reordering_num_neighbors_;
}
inline void Crowding_Offline::set_per_crowding_attribute_post_reordering_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  per_crowding_attribute_post_reordering_num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:research_scann.Crowding.Offline.per_crowding_attribute_post_reordering_num_neighbors)
}

// -------------------------------------------------------------------

// Crowding

// optional bool enabled = 1 [default = false];
inline bool Crowding::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crowding::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Crowding::enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.Crowding.enabled)
  return enabled_;
}
inline void Crowding::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:research_scann.Crowding.enabled)
}

// optional .research_scann.Crowding.Offline offline = 2;
inline bool Crowding::has_offline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crowding::clear_offline() {
  if (offline_ != nullptr) offline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::Crowding_Offline& Crowding::offline() const {
  const ::research_scann::Crowding_Offline* p = offline_;
  // @@protoc_insertion_point(field_get:research_scann.Crowding.offline)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::Crowding_Offline*>(
      &::research_scann::_Crowding_Offline_default_instance_);
}
inline ::research_scann::Crowding_Offline* Crowding::release_offline() {
  // @@protoc_insertion_point(field_release:research_scann.Crowding.offline)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::Crowding_Offline* temp = offline_;
  offline_ = nullptr;
  return temp;
}
inline ::research_scann::Crowding_Offline* Crowding::mutable_offline() {
  _has_bits_[0] |= 0x00000001u;
  if (offline_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::Crowding_Offline>(GetArenaNoVirtual());
    offline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.Crowding.offline)
  return offline_;
}
inline void Crowding::set_allocated_offline(::research_scann::Crowding_Offline* offline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offline_;
  }
  if (offline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offline, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offline_ = offline;
  // @@protoc_insertion_point(field_set_allocated:research_scann.Crowding.offline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcrowding_2eproto
