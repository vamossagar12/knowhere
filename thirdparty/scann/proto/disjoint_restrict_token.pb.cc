// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/disjoint_restrict_token.proto

#include "scann/proto/disjoint_restrict_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace research_scann {
class DisjointRestrictTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisjointRestrictToken> _instance;
} _DisjointRestrictToken_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_DisjointRestrictToken_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_DisjointRestrictToken_default_instance_;
    new (ptr) ::research_scann::DisjointRestrictToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::DisjointRestrictToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisjointRestrictToken_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisjointRestrictToken_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::DisjointRestrictToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DisjointRestrictToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DisjointRestrictToken, low_bar_for_brute_force_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::research_scann::DisjointRestrictToken)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_DisjointRestrictToken_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)scann/proto/disjoint_restrict_token.pr"
  "oto\022\016research_scann\">\n\025DisjointRestrictT"
  "oken\022%\n\027low_bar_for_brute_force\030\001 \001(\005:\0041"
  "000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_sccs[1] = {
  &scc_info_DisjointRestrictToken_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_once;
static bool descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto = {
  &descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto, "scann/proto/disjoint_restrict_token.proto", 123,
  &descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_once, descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_sccs, descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto, 1, file_level_enum_descriptors_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto, file_level_service_descriptors_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto), true);
namespace research_scann {

// ===================================================================

void DisjointRestrictToken::InitAsDefaultInstance() {
}
class DisjointRestrictToken::_Internal {
 public:
  using HasBits = decltype(std::declval<DisjointRestrictToken>()._has_bits_);
  static void set_has_low_bar_for_brute_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisjointRestrictToken::DisjointRestrictToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.DisjointRestrictToken)
}
DisjointRestrictToken::DisjointRestrictToken(const DisjointRestrictToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  low_bar_for_brute_force_ = from.low_bar_for_brute_force_;
  // @@protoc_insertion_point(copy_constructor:research_scann.DisjointRestrictToken)
}

void DisjointRestrictToken::SharedCtor() {
  low_bar_for_brute_force_ = 1000;
}

DisjointRestrictToken::~DisjointRestrictToken() {
  // @@protoc_insertion_point(destructor:research_scann.DisjointRestrictToken)
  SharedDtor();
}

void DisjointRestrictToken::SharedDtor() {
}

void DisjointRestrictToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisjointRestrictToken& DisjointRestrictToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisjointRestrictToken_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto.base);
  return *internal_default_instance();
}


void DisjointRestrictToken::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.DisjointRestrictToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  low_bar_for_brute_force_ = 1000;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisjointRestrictToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 low_bar_for_brute_force = 1 [default = 1000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_low_bar_for_brute_force(&has_bits);
          low_bar_for_brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisjointRestrictToken::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.DisjointRestrictToken)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 low_bar_for_brute_force = 1 [default = 1000];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_low_bar_for_brute_force(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_bar_for_brute_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.DisjointRestrictToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.DisjointRestrictToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisjointRestrictToken::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.DisjointRestrictToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bar_for_brute_force = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->low_bar_for_brute_force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.DisjointRestrictToken)
}

::PROTOBUF_NAMESPACE_ID::uint8* DisjointRestrictToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.DisjointRestrictToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bar_for_brute_force = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->low_bar_for_brute_force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.DisjointRestrictToken)
  return target;
}

size_t DisjointRestrictToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.DisjointRestrictToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 low_bar_for_brute_force = 1 [default = 1000];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->low_bar_for_brute_force());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisjointRestrictToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.DisjointRestrictToken)
  GOOGLE_DCHECK_NE(&from, this);
  const DisjointRestrictToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisjointRestrictToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.DisjointRestrictToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.DisjointRestrictToken)
    MergeFrom(*source);
  }
}

void DisjointRestrictToken::MergeFrom(const DisjointRestrictToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.DisjointRestrictToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_low_bar_for_brute_force()) {
    set_low_bar_for_brute_force(from.low_bar_for_brute_force());
  }
}

void DisjointRestrictToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.DisjointRestrictToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisjointRestrictToken::CopyFrom(const DisjointRestrictToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.DisjointRestrictToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisjointRestrictToken::IsInitialized() const {
  return true;
}

void DisjointRestrictToken::InternalSwap(DisjointRestrictToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(low_bar_for_brute_force_, other->low_bar_for_brute_force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisjointRestrictToken::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::DisjointRestrictToken* Arena::CreateMaybeMessage< ::research_scann::DisjointRestrictToken >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::DisjointRestrictToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
