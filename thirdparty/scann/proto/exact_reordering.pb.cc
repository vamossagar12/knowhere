// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/exact_reordering.proto

#include "scann/proto/exact_reordering.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fdistance_5fmeasure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fexact_5freordering_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto;
namespace research_scann {
class ExactReorderingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExactReordering> _instance;
} _ExactReordering_default_instance_;
class FixedPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedPoint> _instance;
} _FixedPoint_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_ExactReordering_default_instance_;
    new (ptr) ::research_scann::ExactReordering();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::ExactReordering::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto}, {
      &scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto.base,
      &scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto.base,}};

static void InitDefaultsscc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_FixedPoint_default_instance_;
    new (ptr) ::research_scann::FixedPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::FixedPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fexact_5freordering_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fexact_5freordering_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fexact_5freordering_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fexact_5freordering_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, approx_num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, approx_epsilon_distance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, approx_distance_measure_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, fixed_point_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ExactReordering, use_fixed_point_if_possible_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, fixed_point_multiplier_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, multipliers_filename_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, noise_shaping_threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, fixed_point_multiplier_quantile_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, mr_jobname_prefix_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, offline_quantization_cell_),
  PROTOBUF_FIELD_OFFSET(::research_scann::FixedPoint, num_machines_),
  3,
  5,
  2,
  7,
  6,
  1,
  0,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::research_scann::ExactReordering)},
  { 15, 28, sizeof(::research_scann::FixedPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ExactReordering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_FixedPoint_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fexact_5freordering_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"scann/proto/exact_reordering.proto\022\016re"
  "search_scann\032\"scann/proto/distance_measu"
  "re.proto\"\212\002\n\017ExactReordering\022(\n\024approx_n"
  "um_neighbors\030\001 \001(\005:\n2147483647\022$\n\027approx"
  "_epsilon_distance\030\002 \001(\002:\003inf\022F\n\027approx_d"
  "istance_measure\030\003 \001(\0132%.research_scann.D"
  "istanceMeasureConfig\022/\n\013fixed_point\030\005 \001("
  "\0132\032.research_scann.FixedPoint\022.\n\033use_fix"
  "ed_point_if_possible\030\004 \001(\010:\005falseB\002\030\001\"\215\002"
  "\n\nFixedPoint\022\026\n\007enabled\030\001 \001(\010:\005false\022#\n\026"
  "fixed_point_multiplier\030\002 \001(\002:\003nan\022\034\n\024mul"
  "tipliers_filename\030\007 \001(\t\022$\n\027noise_shaping"
  "_threshold\030\010 \001(\001:\003nan\022*\n\037fixed_point_mul"
  "tiplier_quantile\030\006 \001(\002:\0011\022\031\n\021mr_jobname_"
  "prefix\030\005 \001(\t\022!\n\031offline_quantization_cel"
  "l\030\003 \001(\t\022\024\n\014num_machines\030\004 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fdistance_5fmeasure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_sccs[2] = {
  &scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto.base,
  &scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_once;
static bool descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fexact_5freordering_2eproto = {
  &descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fexact_5freordering_2eproto, "scann/proto/exact_reordering.proto", 629,
  &descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_once, descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_sccs, descriptor_table_scann_2fproto_2fexact_5freordering_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fexact_5freordering_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fexact_5freordering_2eproto, 2, file_level_enum_descriptors_scann_2fproto_2fexact_5freordering_2eproto, file_level_service_descriptors_scann_2fproto_2fexact_5freordering_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fexact_5freordering_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fexact_5freordering_2eproto), true);
namespace research_scann {

// ===================================================================

void ExactReordering::InitAsDefaultInstance() {
  ::research_scann::_ExactReordering_default_instance_._instance.get_mutable()->approx_distance_measure_ = const_cast< ::research_scann::DistanceMeasureConfig*>(
      ::research_scann::DistanceMeasureConfig::internal_default_instance());
  ::research_scann::_ExactReordering_default_instance_._instance.get_mutable()->fixed_point_ = const_cast< ::research_scann::FixedPoint*>(
      ::research_scann::FixedPoint::internal_default_instance());
}
class ExactReordering::_Internal {
 public:
  using HasBits = decltype(std::declval<ExactReordering>()._has_bits_);
  static void set_has_approx_num_neighbors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_approx_epsilon_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::research_scann::DistanceMeasureConfig& approx_distance_measure(const ExactReordering* msg);
  static void set_has_approx_distance_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::research_scann::FixedPoint& fixed_point(const ExactReordering* msg);
  static void set_has_fixed_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_fixed_point_if_possible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::research_scann::DistanceMeasureConfig&
ExactReordering::_Internal::approx_distance_measure(const ExactReordering* msg) {
  return *msg->approx_distance_measure_;
}
const ::research_scann::FixedPoint&
ExactReordering::_Internal::fixed_point(const ExactReordering* msg) {
  return *msg->fixed_point_;
}
void ExactReordering::clear_approx_distance_measure() {
  if (approx_distance_measure_ != nullptr) approx_distance_measure_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExactReordering::ExactReordering()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.ExactReordering)
}
ExactReordering::ExactReordering(const ExactReordering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_approx_distance_measure()) {
    approx_distance_measure_ = new ::research_scann::DistanceMeasureConfig(*from.approx_distance_measure_);
  } else {
    approx_distance_measure_ = nullptr;
  }
  if (from.has_fixed_point()) {
    fixed_point_ = new ::research_scann::FixedPoint(*from.fixed_point_);
  } else {
    fixed_point_ = nullptr;
  }
  ::memcpy(&use_fixed_point_if_possible_, &from.use_fixed_point_if_possible_,
    static_cast<size_t>(reinterpret_cast<char*>(&approx_epsilon_distance_) -
    reinterpret_cast<char*>(&use_fixed_point_if_possible_)) + sizeof(approx_epsilon_distance_));
  // @@protoc_insertion_point(copy_constructor:research_scann.ExactReordering)
}

void ExactReordering::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto.base);
  ::memset(&approx_distance_measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_fixed_point_if_possible_) -
      reinterpret_cast<char*>(&approx_distance_measure_)) + sizeof(use_fixed_point_if_possible_));
  approx_num_neighbors_ = 2147483647;
  approx_epsilon_distance_ = std::numeric_limits<float>::infinity();
}

ExactReordering::~ExactReordering() {
  // @@protoc_insertion_point(destructor:research_scann.ExactReordering)
  SharedDtor();
}

void ExactReordering::SharedDtor() {
  if (this != internal_default_instance()) delete approx_distance_measure_;
  if (this != internal_default_instance()) delete fixed_point_;
}

void ExactReordering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExactReordering& ExactReordering::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto.base);
  return *internal_default_instance();
}


void ExactReordering::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ExactReordering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(approx_distance_measure_ != nullptr);
      approx_distance_measure_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fixed_point_ != nullptr);
      fixed_point_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    use_fixed_point_if_possible_ = false;
    approx_num_neighbors_ = 2147483647;
    approx_epsilon_distance_ = std::numeric_limits<float>::infinity();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExactReordering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 approx_num_neighbors = 1 [default = 2147483647];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_approx_num_neighbors(&has_bits);
          approx_num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float approx_epsilon_distance = 2 [default = inf];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_approx_epsilon_distance(&has_bits);
          approx_epsilon_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_approx_distance_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_fixed_point_if_possible(&has_bits);
          use_fixed_point_if_possible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.FixedPoint fixed_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_fixed_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExactReordering::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.ExactReordering)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 approx_num_neighbors = 1 [default = 2147483647];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_approx_num_neighbors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &approx_num_neighbors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float approx_epsilon_distance = 2 [default = inf];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_approx_epsilon_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &approx_epsilon_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_approx_distance_measure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_use_fixed_point_if_possible(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fixed_point_if_possible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.FixedPoint fixed_point = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.ExactReordering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.ExactReordering)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExactReordering::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.ExactReordering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 approx_num_neighbors = 1 [default = 2147483647];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->approx_num_neighbors(), output);
  }

  // optional float approx_epsilon_distance = 2 [default = inf];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->approx_epsilon_distance(), output);
  }

  // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::approx_distance_measure(this), output);
  }

  // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_fixed_point_if_possible(), output);
  }

  // optional .research_scann.FixedPoint fixed_point = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::fixed_point(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.ExactReordering)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExactReordering::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ExactReordering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 approx_num_neighbors = 1 [default = 2147483647];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->approx_num_neighbors(), target);
  }

  // optional float approx_epsilon_distance = 2 [default = inf];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->approx_epsilon_distance(), target);
  }

  // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::approx_distance_measure(this), target);
  }

  // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_fixed_point_if_possible(), target);
  }

  // optional .research_scann.FixedPoint fixed_point = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::fixed_point(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ExactReordering)
  return target;
}

size_t ExactReordering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ExactReordering)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *approx_distance_measure_);
    }

    // optional .research_scann.FixedPoint fixed_point = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fixed_point_);
    }

    // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 approx_num_neighbors = 1 [default = 2147483647];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->approx_num_neighbors());
    }

    // optional float approx_epsilon_distance = 2 [default = inf];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExactReordering::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.ExactReordering)
  GOOGLE_DCHECK_NE(&from, this);
  const ExactReordering* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExactReordering>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.ExactReordering)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.ExactReordering)
    MergeFrom(*source);
  }
}

void ExactReordering::MergeFrom(const ExactReordering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ExactReordering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_approx_distance_measure()->::research_scann::DistanceMeasureConfig::MergeFrom(from.approx_distance_measure());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fixed_point()->::research_scann::FixedPoint::MergeFrom(from.fixed_point());
    }
    if (cached_has_bits & 0x00000004u) {
      use_fixed_point_if_possible_ = from.use_fixed_point_if_possible_;
    }
    if (cached_has_bits & 0x00000008u) {
      approx_num_neighbors_ = from.approx_num_neighbors_;
    }
    if (cached_has_bits & 0x00000010u) {
      approx_epsilon_distance_ = from.approx_epsilon_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExactReordering::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.ExactReordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExactReordering::CopyFrom(const ExactReordering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ExactReordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactReordering::IsInitialized() const {
  return true;
}

void ExactReordering::InternalSwap(ExactReordering* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(approx_distance_measure_, other->approx_distance_measure_);
  swap(fixed_point_, other->fixed_point_);
  swap(use_fixed_point_if_possible_, other->use_fixed_point_if_possible_);
  swap(approx_num_neighbors_, other->approx_num_neighbors_);
  swap(approx_epsilon_distance_, other->approx_epsilon_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExactReordering::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedPoint::InitAsDefaultInstance() {
}
class FixedPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<FixedPoint>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fixed_point_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_multipliers_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_noise_shaping_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fixed_point_multiplier_quantile(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mr_jobname_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offline_quantization_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_machines(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FixedPoint::FixedPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.FixedPoint)
}
FixedPoint::FixedPoint(const FixedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offline_quantization_cell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_offline_quantization_cell()) {
    offline_quantization_cell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.offline_quantization_cell_);
  }
  mr_jobname_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mr_jobname_prefix()) {
    mr_jobname_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mr_jobname_prefix_);
  }
  multipliers_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_multipliers_filename()) {
    multipliers_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.multipliers_filename_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&noise_shaping_threshold_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(noise_shaping_threshold_));
  // @@protoc_insertion_point(copy_constructor:research_scann.FixedPoint)
}

void FixedPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto.base);
  offline_quantization_cell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_jobname_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multipliers_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_machines_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(num_machines_));
  fixed_point_multiplier_ = std::numeric_limits<float>::quiet_NaN();
  fixed_point_multiplier_quantile_ = 1;
  noise_shaping_threshold_ = std::numeric_limits<double>::quiet_NaN();
}

FixedPoint::~FixedPoint() {
  // @@protoc_insertion_point(destructor:research_scann.FixedPoint)
  SharedDtor();
}

void FixedPoint::SharedDtor() {
  offline_quantization_cell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_jobname_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multipliers_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FixedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedPoint& FixedPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedPoint_scann_2fproto_2fexact_5freordering_2eproto.base);
  return *internal_default_instance();
}


void FixedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.FixedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      offline_quantization_cell_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mr_jobname_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      multipliers_filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_machines_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(num_machines_));
    fixed_point_multiplier_ = std::numeric_limits<float>::quiet_NaN();
    fixed_point_multiplier_quantile_ = 1;
    noise_shaping_threshold_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fixed_point_multiplier = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fixed_point_multiplier(&has_bits);
          fixed_point_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string offline_quantization_cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_offline_quantization_cell(), ptr, ctx, "research_scann.FixedPoint.offline_quantization_cell");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_machines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_machines(&has_bits);
          num_machines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mr_jobname_prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_mr_jobname_prefix(), ptr, ctx, "research_scann.FixedPoint.mr_jobname_prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fixed_point_multiplier_quantile = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fixed_point_multiplier_quantile(&has_bits);
          fixed_point_multiplier_quantile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string multipliers_filename = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_multipliers_filename(), ptr, ctx, "research_scann.FixedPoint.multipliers_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double noise_shaping_threshold = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_noise_shaping_threshold(&has_bits);
          noise_shaping_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.FixedPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fixed_point_multiplier = 2 [default = nan];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_fixed_point_multiplier(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixed_point_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string offline_quantization_cell = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_offline_quantization_cell()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->offline_quantization_cell().data(), static_cast<int>(this->offline_quantization_cell().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.FixedPoint.offline_quantization_cell");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_machines = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_machines(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_machines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mr_jobname_prefix = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mr_jobname_prefix()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.FixedPoint.mr_jobname_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fixed_point_multiplier_quantile = 6 [default = 1];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_fixed_point_multiplier_quantile(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixed_point_multiplier_quantile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string multipliers_filename = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_multipliers_filename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multipliers_filename().data(), static_cast<int>(this->multipliers_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.FixedPoint.multipliers_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double noise_shaping_threshold = 8 [default = nan];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_noise_shaping_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_shaping_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.FixedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.FixedPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.FixedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional float fixed_point_multiplier = 2 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->fixed_point_multiplier(), output);
  }

  // optional string offline_quantization_cell = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offline_quantization_cell().data(), static_cast<int>(this->offline_quantization_cell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.offline_quantization_cell");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->offline_quantization_cell(), output);
  }

  // optional int32 num_machines = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_machines(), output);
  }

  // optional string mr_jobname_prefix = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.mr_jobname_prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mr_jobname_prefix(), output);
  }

  // optional float fixed_point_multiplier_quantile = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->fixed_point_multiplier_quantile(), output);
  }

  // optional string multipliers_filename = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multipliers_filename().data(), static_cast<int>(this->multipliers_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.multipliers_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->multipliers_filename(), output);
  }

  // optional double noise_shaping_threshold = 8 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->noise_shaping_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.FixedPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.FixedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional float fixed_point_multiplier = 2 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->fixed_point_multiplier(), target);
  }

  // optional string offline_quantization_cell = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offline_quantization_cell().data(), static_cast<int>(this->offline_quantization_cell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.offline_quantization_cell");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->offline_quantization_cell(), target);
  }

  // optional int32 num_machines = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_machines(), target);
  }

  // optional string mr_jobname_prefix = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.mr_jobname_prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->mr_jobname_prefix(), target);
  }

  // optional float fixed_point_multiplier_quantile = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->fixed_point_multiplier_quantile(), target);
  }

  // optional string multipliers_filename = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multipliers_filename().data(), static_cast<int>(this->multipliers_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.FixedPoint.multipliers_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->multipliers_filename(), target);
  }

  // optional double noise_shaping_threshold = 8 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->noise_shaping_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.FixedPoint)
  return target;
}

size_t FixedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.FixedPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string offline_quantization_cell = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->offline_quantization_cell());
    }

    // optional string mr_jobname_prefix = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mr_jobname_prefix());
    }

    // optional string multipliers_filename = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->multipliers_filename());
    }

    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 num_machines = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_machines());
    }

    // optional float fixed_point_multiplier = 2 [default = nan];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float fixed_point_multiplier_quantile = 6 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional double noise_shaping_threshold = 8 [default = nan];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.FixedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.FixedPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.FixedPoint)
    MergeFrom(*source);
  }
}

void FixedPoint::MergeFrom(const FixedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.FixedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      offline_quantization_cell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.offline_quantization_cell_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mr_jobname_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mr_jobname_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      multipliers_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.multipliers_filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_machines_ = from.num_machines_;
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_point_multiplier_ = from.fixed_point_multiplier_;
    }
    if (cached_has_bits & 0x00000040u) {
      fixed_point_multiplier_quantile_ = from.fixed_point_multiplier_quantile_;
    }
    if (cached_has_bits & 0x00000080u) {
      noise_shaping_threshold_ = from.noise_shaping_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FixedPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.FixedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedPoint::CopyFrom(const FixedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.FixedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedPoint::IsInitialized() const {
  return true;
}

void FixedPoint::InternalSwap(FixedPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  offline_quantization_cell_.Swap(&other->offline_quantization_cell_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mr_jobname_prefix_.Swap(&other->mr_jobname_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  multipliers_filename_.Swap(&other->multipliers_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
  swap(num_machines_, other->num_machines_);
  swap(fixed_point_multiplier_, other->fixed_point_multiplier_);
  swap(fixed_point_multiplier_quantile_, other->fixed_point_multiplier_quantile_);
  swap(noise_shaping_threshold_, other->noise_shaping_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::ExactReordering* Arena::CreateMaybeMessage< ::research_scann::ExactReordering >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::ExactReordering >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::FixedPoint* Arena::CreateMaybeMessage< ::research_scann::FixedPoint >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::FixedPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
