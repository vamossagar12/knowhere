// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/exact_reordering.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fexact_5freordering_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fexact_5freordering_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/proto/distance_measure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fexact_5freordering_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fexact_5freordering_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fexact_5freordering_2eproto;
namespace research_scann {
class ExactReordering;
class ExactReorderingDefaultTypeInternal;
extern ExactReorderingDefaultTypeInternal _ExactReordering_default_instance_;
class FixedPoint;
class FixedPointDefaultTypeInternal;
extern FixedPointDefaultTypeInternal _FixedPoint_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::ExactReordering* Arena::CreateMaybeMessage<::research_scann::ExactReordering>(Arena*);
template<> ::research_scann::FixedPoint* Arena::CreateMaybeMessage<::research_scann::FixedPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class ExactReordering :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.ExactReordering) */ {
 public:
  ExactReordering();
  virtual ~ExactReordering();

  ExactReordering(const ExactReordering& from);
  ExactReordering(ExactReordering&& from) noexcept
    : ExactReordering() {
    *this = ::std::move(from);
  }

  inline ExactReordering& operator=(const ExactReordering& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExactReordering& operator=(ExactReordering&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExactReordering& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExactReordering* internal_default_instance() {
    return reinterpret_cast<const ExactReordering*>(
               &_ExactReordering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExactReordering& a, ExactReordering& b) {
    a.Swap(&b);
  }
  inline void Swap(ExactReordering* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExactReordering* New() const final {
    return CreateMaybeMessage<ExactReordering>(nullptr);
  }

  ExactReordering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExactReordering>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExactReordering& from);
  void MergeFrom(const ExactReordering& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExactReordering* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.ExactReordering";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto);
    return ::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApproxDistanceMeasureFieldNumber = 3,
    kFixedPointFieldNumber = 5,
    kUseFixedPointIfPossibleFieldNumber = 4,
    kApproxNumNeighborsFieldNumber = 1,
    kApproxEpsilonDistanceFieldNumber = 2,
  };
  // optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
  bool has_approx_distance_measure() const;
  void clear_approx_distance_measure();
  const ::research_scann::DistanceMeasureConfig& approx_distance_measure() const;
  ::research_scann::DistanceMeasureConfig* release_approx_distance_measure();
  ::research_scann::DistanceMeasureConfig* mutable_approx_distance_measure();
  void set_allocated_approx_distance_measure(::research_scann::DistanceMeasureConfig* approx_distance_measure);

  // optional .research_scann.FixedPoint fixed_point = 5;
  bool has_fixed_point() const;
  void clear_fixed_point();
  const ::research_scann::FixedPoint& fixed_point() const;
  ::research_scann::FixedPoint* release_fixed_point();
  ::research_scann::FixedPoint* mutable_fixed_point();
  void set_allocated_fixed_point(::research_scann::FixedPoint* fixed_point);

  // optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_use_fixed_point_if_possible() const;
  PROTOBUF_DEPRECATED void clear_use_fixed_point_if_possible();
  PROTOBUF_DEPRECATED bool use_fixed_point_if_possible() const;
  PROTOBUF_DEPRECATED void set_use_fixed_point_if_possible(bool value);

  // optional int32 approx_num_neighbors = 1 [default = 2147483647];
  bool has_approx_num_neighbors() const;
  void clear_approx_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 approx_num_neighbors() const;
  void set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float approx_epsilon_distance = 2 [default = inf];
  bool has_approx_epsilon_distance() const;
  void clear_approx_epsilon_distance();
  float approx_epsilon_distance() const;
  void set_approx_epsilon_distance(float value);

  // @@protoc_insertion_point(class_scope:research_scann.ExactReordering)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::DistanceMeasureConfig* approx_distance_measure_;
  ::research_scann::FixedPoint* fixed_point_;
  bool use_fixed_point_if_possible_;
  ::PROTOBUF_NAMESPACE_ID::int32 approx_num_neighbors_;
  float approx_epsilon_distance_;
  friend struct ::TableStruct_scann_2fproto_2fexact_5freordering_2eproto;
};
// -------------------------------------------------------------------

class FixedPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.FixedPoint) */ {
 public:
  FixedPoint();
  virtual ~FixedPoint();

  FixedPoint(const FixedPoint& from);
  FixedPoint(FixedPoint&& from) noexcept
    : FixedPoint() {
    *this = ::std::move(from);
  }

  inline FixedPoint& operator=(const FixedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedPoint& operator=(FixedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedPoint* internal_default_instance() {
    return reinterpret_cast<const FixedPoint*>(
               &_FixedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FixedPoint& a, FixedPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedPoint* New() const final {
    return CreateMaybeMessage<FixedPoint>(nullptr);
  }

  FixedPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedPoint& from);
  void MergeFrom(const FixedPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.FixedPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto);
    return ::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineQuantizationCellFieldNumber = 3,
    kMrJobnamePrefixFieldNumber = 5,
    kMultipliersFilenameFieldNumber = 7,
    kEnabledFieldNumber = 1,
    kNumMachinesFieldNumber = 4,
    kFixedPointMultiplierFieldNumber = 2,
    kFixedPointMultiplierQuantileFieldNumber = 6,
    kNoiseShapingThresholdFieldNumber = 8,
  };
  // optional string offline_quantization_cell = 3;
  bool has_offline_quantization_cell() const;
  void clear_offline_quantization_cell();
  const std::string& offline_quantization_cell() const;
  void set_offline_quantization_cell(const std::string& value);
  void set_offline_quantization_cell(std::string&& value);
  void set_offline_quantization_cell(const char* value);
  void set_offline_quantization_cell(const char* value, size_t size);
  std::string* mutable_offline_quantization_cell();
  std::string* release_offline_quantization_cell();
  void set_allocated_offline_quantization_cell(std::string* offline_quantization_cell);

  // optional string mr_jobname_prefix = 5;
  bool has_mr_jobname_prefix() const;
  void clear_mr_jobname_prefix();
  const std::string& mr_jobname_prefix() const;
  void set_mr_jobname_prefix(const std::string& value);
  void set_mr_jobname_prefix(std::string&& value);
  void set_mr_jobname_prefix(const char* value);
  void set_mr_jobname_prefix(const char* value, size_t size);
  std::string* mutable_mr_jobname_prefix();
  std::string* release_mr_jobname_prefix();
  void set_allocated_mr_jobname_prefix(std::string* mr_jobname_prefix);

  // optional string multipliers_filename = 7;
  bool has_multipliers_filename() const;
  void clear_multipliers_filename();
  const std::string& multipliers_filename() const;
  void set_multipliers_filename(const std::string& value);
  void set_multipliers_filename(std::string&& value);
  void set_multipliers_filename(const char* value);
  void set_multipliers_filename(const char* value, size_t size);
  std::string* mutable_multipliers_filename();
  std::string* release_multipliers_filename();
  void set_allocated_multipliers_filename(std::string* multipliers_filename);

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 num_machines = 4;
  bool has_num_machines() const;
  void clear_num_machines();
  ::PROTOBUF_NAMESPACE_ID::int32 num_machines() const;
  void set_num_machines(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float fixed_point_multiplier = 2 [default = nan];
  bool has_fixed_point_multiplier() const;
  void clear_fixed_point_multiplier();
  float fixed_point_multiplier() const;
  void set_fixed_point_multiplier(float value);

  // optional float fixed_point_multiplier_quantile = 6 [default = 1];
  bool has_fixed_point_multiplier_quantile() const;
  void clear_fixed_point_multiplier_quantile();
  float fixed_point_multiplier_quantile() const;
  void set_fixed_point_multiplier_quantile(float value);

  // optional double noise_shaping_threshold = 8 [default = nan];
  bool has_noise_shaping_threshold() const;
  void clear_noise_shaping_threshold();
  double noise_shaping_threshold() const;
  void set_noise_shaping_threshold(double value);

  // @@protoc_insertion_point(class_scope:research_scann.FixedPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offline_quantization_cell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mr_jobname_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multipliers_filename_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_machines_;
  float fixed_point_multiplier_;
  float fixed_point_multiplier_quantile_;
  double noise_shaping_threshold_;
  friend struct ::TableStruct_scann_2fproto_2fexact_5freordering_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExactReordering

// optional int32 approx_num_neighbors = 1 [default = 2147483647];
inline bool ExactReordering::has_approx_num_neighbors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExactReordering::clear_approx_num_neighbors() {
  approx_num_neighbors_ = 2147483647;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExactReordering::approx_num_neighbors() const {
  // @@protoc_insertion_point(field_get:research_scann.ExactReordering.approx_num_neighbors)
  return approx_num_neighbors_;
}
inline void ExactReordering::set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  approx_num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ExactReordering.approx_num_neighbors)
}

// optional float approx_epsilon_distance = 2 [default = inf];
inline bool ExactReordering::has_approx_epsilon_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExactReordering::clear_approx_epsilon_distance() {
  approx_epsilon_distance_ = std::numeric_limits<float>::infinity();
  _has_bits_[0] &= ~0x00000010u;
}
inline float ExactReordering::approx_epsilon_distance() const {
  // @@protoc_insertion_point(field_get:research_scann.ExactReordering.approx_epsilon_distance)
  return approx_epsilon_distance_;
}
inline void ExactReordering::set_approx_epsilon_distance(float value) {
  _has_bits_[0] |= 0x00000010u;
  approx_epsilon_distance_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ExactReordering.approx_epsilon_distance)
}

// optional .research_scann.DistanceMeasureConfig approx_distance_measure = 3;
inline bool ExactReordering::has_approx_distance_measure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::research_scann::DistanceMeasureConfig& ExactReordering::approx_distance_measure() const {
  const ::research_scann::DistanceMeasureConfig* p = approx_distance_measure_;
  // @@protoc_insertion_point(field_get:research_scann.ExactReordering.approx_distance_measure)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::DistanceMeasureConfig*>(
      &::research_scann::_DistanceMeasureConfig_default_instance_);
}
inline ::research_scann::DistanceMeasureConfig* ExactReordering::release_approx_distance_measure() {
  // @@protoc_insertion_point(field_release:research_scann.ExactReordering.approx_distance_measure)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::DistanceMeasureConfig* temp = approx_distance_measure_;
  approx_distance_measure_ = nullptr;
  return temp;
}
inline ::research_scann::DistanceMeasureConfig* ExactReordering::mutable_approx_distance_measure() {
  _has_bits_[0] |= 0x00000001u;
  if (approx_distance_measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::DistanceMeasureConfig>(GetArenaNoVirtual());
    approx_distance_measure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ExactReordering.approx_distance_measure)
  return approx_distance_measure_;
}
inline void ExactReordering::set_allocated_approx_distance_measure(::research_scann::DistanceMeasureConfig* approx_distance_measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(approx_distance_measure_);
  }
  if (approx_distance_measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      approx_distance_measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, approx_distance_measure, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  approx_distance_measure_ = approx_distance_measure;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ExactReordering.approx_distance_measure)
}

// optional .research_scann.FixedPoint fixed_point = 5;
inline bool ExactReordering::has_fixed_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExactReordering::clear_fixed_point() {
  if (fixed_point_ != nullptr) fixed_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::research_scann::FixedPoint& ExactReordering::fixed_point() const {
  const ::research_scann::FixedPoint* p = fixed_point_;
  // @@protoc_insertion_point(field_get:research_scann.ExactReordering.fixed_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::FixedPoint*>(
      &::research_scann::_FixedPoint_default_instance_);
}
inline ::research_scann::FixedPoint* ExactReordering::release_fixed_point() {
  // @@protoc_insertion_point(field_release:research_scann.ExactReordering.fixed_point)
  _has_bits_[0] &= ~0x00000002u;
  ::research_scann::FixedPoint* temp = fixed_point_;
  fixed_point_ = nullptr;
  return temp;
}
inline ::research_scann::FixedPoint* ExactReordering::mutable_fixed_point() {
  _has_bits_[0] |= 0x00000002u;
  if (fixed_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::FixedPoint>(GetArenaNoVirtual());
    fixed_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ExactReordering.fixed_point)
  return fixed_point_;
}
inline void ExactReordering::set_allocated_fixed_point(::research_scann::FixedPoint* fixed_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fixed_point_;
  }
  if (fixed_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fixed_point_ = fixed_point;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ExactReordering.fixed_point)
}

// optional bool use_fixed_point_if_possible = 4 [default = false, deprecated = true];
inline bool ExactReordering::has_use_fixed_point_if_possible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExactReordering::clear_use_fixed_point_if_possible() {
  use_fixed_point_if_possible_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ExactReordering::use_fixed_point_if_possible() const {
  // @@protoc_insertion_point(field_get:research_scann.ExactReordering.use_fixed_point_if_possible)
  return use_fixed_point_if_possible_;
}
inline void ExactReordering::set_use_fixed_point_if_possible(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_fixed_point_if_possible_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ExactReordering.use_fixed_point_if_possible)
}

// -------------------------------------------------------------------

// FixedPoint

// optional bool enabled = 1 [default = false];
inline bool FixedPoint::has_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FixedPoint::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FixedPoint::enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.enabled)
  return enabled_;
}
inline void FixedPoint::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.enabled)
}

// optional float fixed_point_multiplier = 2 [default = nan];
inline bool FixedPoint::has_fixed_point_multiplier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FixedPoint::clear_fixed_point_multiplier() {
  fixed_point_multiplier_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000020u;
}
inline float FixedPoint::fixed_point_multiplier() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.fixed_point_multiplier)
  return fixed_point_multiplier_;
}
inline void FixedPoint::set_fixed_point_multiplier(float value) {
  _has_bits_[0] |= 0x00000020u;
  fixed_point_multiplier_ = value;
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.fixed_point_multiplier)
}

// optional string multipliers_filename = 7;
inline bool FixedPoint::has_multipliers_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedPoint::clear_multipliers_filename() {
  multipliers_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FixedPoint::multipliers_filename() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.multipliers_filename)
  return multipliers_filename_.GetNoArena();
}
inline void FixedPoint::set_multipliers_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  multipliers_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.multipliers_filename)
}
inline void FixedPoint::set_multipliers_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  multipliers_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.FixedPoint.multipliers_filename)
}
inline void FixedPoint::set_multipliers_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  multipliers_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.FixedPoint.multipliers_filename)
}
inline void FixedPoint::set_multipliers_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  multipliers_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.FixedPoint.multipliers_filename)
}
inline std::string* FixedPoint::mutable_multipliers_filename() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:research_scann.FixedPoint.multipliers_filename)
  return multipliers_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FixedPoint::release_multipliers_filename() {
  // @@protoc_insertion_point(field_release:research_scann.FixedPoint.multipliers_filename)
  if (!has_multipliers_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return multipliers_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FixedPoint::set_allocated_multipliers_filename(std::string* multipliers_filename) {
  if (multipliers_filename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  multipliers_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multipliers_filename);
  // @@protoc_insertion_point(field_set_allocated:research_scann.FixedPoint.multipliers_filename)
}

// optional double noise_shaping_threshold = 8 [default = nan];
inline bool FixedPoint::has_noise_shaping_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FixedPoint::clear_noise_shaping_threshold() {
  noise_shaping_threshold_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000080u;
}
inline double FixedPoint::noise_shaping_threshold() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.noise_shaping_threshold)
  return noise_shaping_threshold_;
}
inline void FixedPoint::set_noise_shaping_threshold(double value) {
  _has_bits_[0] |= 0x00000080u;
  noise_shaping_threshold_ = value;
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.noise_shaping_threshold)
}

// optional float fixed_point_multiplier_quantile = 6 [default = 1];
inline bool FixedPoint::has_fixed_point_multiplier_quantile() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FixedPoint::clear_fixed_point_multiplier_quantile() {
  fixed_point_multiplier_quantile_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FixedPoint::fixed_point_multiplier_quantile() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.fixed_point_multiplier_quantile)
  return fixed_point_multiplier_quantile_;
}
inline void FixedPoint::set_fixed_point_multiplier_quantile(float value) {
  _has_bits_[0] |= 0x00000040u;
  fixed_point_multiplier_quantile_ = value;
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.fixed_point_multiplier_quantile)
}

// optional string mr_jobname_prefix = 5;
inline bool FixedPoint::has_mr_jobname_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedPoint::clear_mr_jobname_prefix() {
  mr_jobname_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FixedPoint::mr_jobname_prefix() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.mr_jobname_prefix)
  return mr_jobname_prefix_.GetNoArena();
}
inline void FixedPoint::set_mr_jobname_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mr_jobname_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.mr_jobname_prefix)
}
inline void FixedPoint::set_mr_jobname_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mr_jobname_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.FixedPoint.mr_jobname_prefix)
}
inline void FixedPoint::set_mr_jobname_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mr_jobname_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.FixedPoint.mr_jobname_prefix)
}
inline void FixedPoint::set_mr_jobname_prefix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mr_jobname_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.FixedPoint.mr_jobname_prefix)
}
inline std::string* FixedPoint::mutable_mr_jobname_prefix() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:research_scann.FixedPoint.mr_jobname_prefix)
  return mr_jobname_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FixedPoint::release_mr_jobname_prefix() {
  // @@protoc_insertion_point(field_release:research_scann.FixedPoint.mr_jobname_prefix)
  if (!has_mr_jobname_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mr_jobname_prefix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FixedPoint::set_allocated_mr_jobname_prefix(std::string* mr_jobname_prefix) {
  if (mr_jobname_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mr_jobname_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mr_jobname_prefix);
  // @@protoc_insertion_point(field_set_allocated:research_scann.FixedPoint.mr_jobname_prefix)
}

// optional string offline_quantization_cell = 3;
inline bool FixedPoint::has_offline_quantization_cell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedPoint::clear_offline_quantization_cell() {
  offline_quantization_cell_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FixedPoint::offline_quantization_cell() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.offline_quantization_cell)
  return offline_quantization_cell_.GetNoArena();
}
inline void FixedPoint::set_offline_quantization_cell(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offline_quantization_cell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.offline_quantization_cell)
}
inline void FixedPoint::set_offline_quantization_cell(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  offline_quantization_cell_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.FixedPoint.offline_quantization_cell)
}
inline void FixedPoint::set_offline_quantization_cell(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  offline_quantization_cell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.FixedPoint.offline_quantization_cell)
}
inline void FixedPoint::set_offline_quantization_cell(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  offline_quantization_cell_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.FixedPoint.offline_quantization_cell)
}
inline std::string* FixedPoint::mutable_offline_quantization_cell() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.FixedPoint.offline_quantization_cell)
  return offline_quantization_cell_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FixedPoint::release_offline_quantization_cell() {
  // @@protoc_insertion_point(field_release:research_scann.FixedPoint.offline_quantization_cell)
  if (!has_offline_quantization_cell()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return offline_quantization_cell_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FixedPoint::set_allocated_offline_quantization_cell(std::string* offline_quantization_cell) {
  if (offline_quantization_cell != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offline_quantization_cell_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offline_quantization_cell);
  // @@protoc_insertion_point(field_set_allocated:research_scann.FixedPoint.offline_quantization_cell)
}

// optional int32 num_machines = 4;
inline bool FixedPoint::has_num_machines() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FixedPoint::clear_num_machines() {
  num_machines_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedPoint::num_machines() const {
  // @@protoc_insertion_point(field_get:research_scann.FixedPoint.num_machines)
  return num_machines_;
}
inline void FixedPoint::set_num_machines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_machines_ = value;
  // @@protoc_insertion_point(field_set:research_scann.FixedPoint.num_machines)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fexact_5freordering_2eproto
