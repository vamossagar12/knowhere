// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/incremental_updates.proto

#include "scann/proto/incremental_updates.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fincremental_5fupdates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto;
namespace research_scann {
class IncrementalUpdateConfig_Pubsub2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalUpdateConfig_Pubsub2> _instance;
} _IncrementalUpdateConfig_Pubsub2_default_instance_;
class IncrementalUpdateConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalUpdateConfig> _instance;
  const ::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2_;
} _IncrementalUpdateConfig_default_instance_;
class IncrementalUpdateMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalUpdateMetadata> _instance;
} _IncrementalUpdateMetadata_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_IncrementalUpdateConfig_default_instance_;
    new (ptr) ::research_scann::IncrementalUpdateConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::IncrementalUpdateConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto.base,}};

static void InitDefaultsscc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.DefaultConstruct();
  *::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get_mutable() = std::string("fprint", 6);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get_mutable());
  {
    void* ptr = &::research_scann::_IncrementalUpdateConfig_Pubsub2_default_instance_;
    new (ptr) ::research_scann::IncrementalUpdateConfig_Pubsub2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::IncrementalUpdateConfig_Pubsub2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto}, {}};

static void InitDefaultsscc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_IncrementalUpdateMetadata_default_instance_;
    new (ptr) ::research_scann::IncrementalUpdateMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::IncrementalUpdateMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fincremental_5fupdates_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fincremental_5fupdates_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fincremental_5fupdates_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, topic_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, subscriber_id_base_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, publisher_id_base_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, seek_back_enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, publish_rpc_updates_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, filter_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, use_mod_term_filter_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig_Pubsub2, mod_term_filter_signature_),
  0,
  1,
  2,
  6,
  7,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, num_datapoints_to_reserve_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, last_update_timestamp_lifetime_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, enable_expiration_timestamps_),
  offsetof(::research_scann::IncrementalUpdateConfigDefaultTypeInternal, pubsub2_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, sharder_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, startup_catchup_threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, num_updates_between_garbage_collections_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateConfig, DurabilityReplication_),
  4,
  3,
  1,
  5,
  ~0u,
  0,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateMetadata, epoch_timestamp_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateMetadata, max_epoch_age_),
  PROTOBUF_FIELD_OFFSET(::research_scann::IncrementalUpdateMetadata, version_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::research_scann::IncrementalUpdateConfig_Pubsub2)},
  { 21, 35, sizeof(::research_scann::IncrementalUpdateConfig)},
  { 43, 51, sizeof(::research_scann::IncrementalUpdateMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_IncrementalUpdateConfig_Pubsub2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_IncrementalUpdateConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_IncrementalUpdateMetadata_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fincremental_5fupdates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%scann/proto/incremental_updates.proto\022"
  "\016research_scann\032\036google/protobuf/duratio"
  "n.proto\032\037google/protobuf/timestamp.proto"
  "\"\243\005\n\027IncrementalUpdateConfig\022\026\n\007enabled\030"
  "\001 \001(\010:\005false\022$\n\031num_datapoints_to_reserv"
  "e\030\005 \001(\004:\0010\022A\n\036last_update_timestamp_life"
  "time\030\002 \001(\0132\031.google.protobuf.Duration\022+\n"
  "\034enable_expiration_timestamps\030\004 \001(\010:\005fal"
  "se\022B\n\007pubsub2\030\003 \001(\0132/.research_scann.Inc"
  "rementalUpdateConfig.Pubsub2H\000\022\021\n\007sharde"
  "r\030\006 \001(\t:\000\022<\n\031startup_catchup_threshold\030\007"
  " \001(\0132\031.google.protobuf.Duration\0227\n\'num_u"
  "pdates_between_garbage_collections\030\010 \001(\r"
  ":\006100000\032\362\001\n\007Pubsub2\022\r\n\005topic\030\001 \001(\t\022\032\n\022s"
  "ubscriber_id_base\030\002 \001(\t\022\031\n\021publisher_id_"
  "base\030\003 \001(\t\022\037\n\021seek_back_enabled\030\004 \001(\010:\004t"
  "rue\022!\n\023publish_rpc_updates\030\005 \001(\010:\004true\022\016"
  "\n\006filter\030\006 \001(\t\022\"\n\023use_mod_term_filter\030\007 "
  "\001(\010:\005false\022)\n\031mod_term_filter_signature\030"
  "\010 \001(\t:\006fprintB\027\n\025DurabilityReplication\"\223"
  "\001\n\031IncrementalUpdateMetadata\0223\n\017epoch_ti"
  "mestamp\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\0220\n\rmax_epoch_age\030\003 \001(\0132\031.google.protob"
  "uf.Duration\022\017\n\007version\030\002 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_sccs[3] = {
  &scc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto.base,
  &scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto.base,
  &scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_once;
static bool descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto = {
  &descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fincremental_5fupdates_2eproto, "scann/proto/incremental_updates.proto", 948,
  &descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_once, descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_sccs, descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fincremental_5fupdates_2eproto, 3, file_level_enum_descriptors_scann_2fproto_2fincremental_5fupdates_2eproto, file_level_service_descriptors_scann_2fproto_2fincremental_5fupdates_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fincremental_5fupdates_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto), true);
namespace research_scann {

// ===================================================================

void IncrementalUpdateConfig_Pubsub2::InitAsDefaultInstance() {
}
class IncrementalUpdateConfig_Pubsub2::_Internal {
 public:
  using HasBits = decltype(std::declval<IncrementalUpdateConfig_Pubsub2>()._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscriber_id_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_publisher_id_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seek_back_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_publish_rpc_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_mod_term_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mod_term_filter_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_;
IncrementalUpdateConfig_Pubsub2::IncrementalUpdateConfig_Pubsub2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.IncrementalUpdateConfig.Pubsub2)
}
IncrementalUpdateConfig_Pubsub2::IncrementalUpdateConfig_Pubsub2(const IncrementalUpdateConfig_Pubsub2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  subscriber_id_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscriber_id_base()) {
    subscriber_id_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscriber_id_base_);
  }
  publisher_id_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_publisher_id_base()) {
    publisher_id_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publisher_id_base_);
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  mod_term_filter_signature_.UnsafeSetDefault(&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get());
  if (from.has_mod_term_filter_signature()) {
    mod_term_filter_signature_.AssignWithDefault(&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get(), from.mod_term_filter_signature_);
  }
  ::memcpy(&use_mod_term_filter_, &from.use_mod_term_filter_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_rpc_updates_) -
    reinterpret_cast<char*>(&use_mod_term_filter_)) + sizeof(publish_rpc_updates_));
  // @@protoc_insertion_point(copy_constructor:research_scann.IncrementalUpdateConfig.Pubsub2)
}

void IncrementalUpdateConfig_Pubsub2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscriber_id_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publisher_id_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_term_filter_signature_.UnsafeSetDefault(&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get());
  use_mod_term_filter_ = false;
  seek_back_enabled_ = true;
  publish_rpc_updates_ = true;
}

IncrementalUpdateConfig_Pubsub2::~IncrementalUpdateConfig_Pubsub2() {
  // @@protoc_insertion_point(destructor:research_scann.IncrementalUpdateConfig.Pubsub2)
  SharedDtor();
}

void IncrementalUpdateConfig_Pubsub2::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscriber_id_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publisher_id_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_term_filter_signature_.DestroyNoArena(&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get());
}

void IncrementalUpdateConfig_Pubsub2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalUpdateConfig_Pubsub2& IncrementalUpdateConfig_Pubsub2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalUpdateConfig_Pubsub2_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  return *internal_default_instance();
}


void IncrementalUpdateConfig_Pubsub2::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      subscriber_id_base_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      publisher_id_base_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      filter_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      mod_term_filter_signature_.UnsafeMutablePointer()->assign(*&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get());
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    use_mod_term_filter_ = false;
    seek_back_enabled_ = true;
    publish_rpc_updates_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalUpdateConfig_Pubsub2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_topic(), ptr, ctx, "research_scann.IncrementalUpdateConfig.Pubsub2.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subscriber_id_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscriber_id_base(), ptr, ctx, "research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string publisher_id_base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_publisher_id_base(), ptr, ctx, "research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool seek_back_enabled = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seek_back_enabled(&has_bits);
          seek_back_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool publish_rpc_updates = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_publish_rpc_updates(&has_bits);
          publish_rpc_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_filter(), ptr, ctx, "research_scann.IncrementalUpdateConfig.Pubsub2.filter");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_mod_term_filter = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_mod_term_filter(&has_bits);
          use_mod_term_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mod_term_filter_signature = 8 [default = "fprint"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_mod_term_filter_signature(), ptr, ctx, "research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalUpdateConfig_Pubsub2::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.Pubsub2.topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subscriber_id_base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscriber_id_base()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscriber_id_base().data(), static_cast<int>(this->subscriber_id_base().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publisher_id_base = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_id_base()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_id_base().data(), static_cast<int>(this->publisher_id_base().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seek_back_enabled = 4 [default = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_seek_back_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seek_back_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish_rpc_updates = 5 [default = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_publish_rpc_updates(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_rpc_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.Pubsub2.filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_mod_term_filter = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_use_mod_term_filter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mod_term_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mod_term_filter_signature = 8 [default = "fprint"];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mod_term_filter_signature()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mod_term_filter_signature().data(), static_cast<int>(this->mod_term_filter_signature().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.IncrementalUpdateConfig.Pubsub2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.IncrementalUpdateConfig.Pubsub2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalUpdateConfig_Pubsub2::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // optional string subscriber_id_base = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscriber_id_base().data(), static_cast<int>(this->subscriber_id_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscriber_id_base(), output);
  }

  // optional string publisher_id_base = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id_base().data(), static_cast<int>(this->publisher_id_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->publisher_id_base(), output);
  }

  // optional bool seek_back_enabled = 4 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->seek_back_enabled(), output);
  }

  // optional bool publish_rpc_updates = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->publish_rpc_updates(), output);
  }

  // optional string filter = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.filter");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filter(), output);
  }

  // optional bool use_mod_term_filter = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->use_mod_term_filter(), output);
  }

  // optional string mod_term_filter_signature = 8 [default = "fprint"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_term_filter_signature().data(), static_cast<int>(this->mod_term_filter_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mod_term_filter_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.IncrementalUpdateConfig.Pubsub2)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalUpdateConfig_Pubsub2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional string subscriber_id_base = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscriber_id_base().data(), static_cast<int>(this->subscriber_id_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->subscriber_id_base(), target);
  }

  // optional string publisher_id_base = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id_base().data(), static_cast<int>(this->publisher_id_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->publisher_id_base(), target);
  }

  // optional bool seek_back_enabled = 4 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->seek_back_enabled(), target);
  }

  // optional bool publish_rpc_updates = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->publish_rpc_updates(), target);
  }

  // optional string filter = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.filter");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }

  // optional bool use_mod_term_filter = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->use_mod_term_filter(), target);
  }

  // optional string mod_term_filter_signature = 8 [default = "fprint"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_term_filter_signature().data(), static_cast<int>(this->mod_term_filter_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->mod_term_filter_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.IncrementalUpdateConfig.Pubsub2)
  return target;
}

size_t IncrementalUpdateConfig_Pubsub2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string subscriber_id_base = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->subscriber_id_base());
    }

    // optional string publisher_id_base = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->publisher_id_base());
    }

    // optional string filter = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional string mod_term_filter_signature = 8 [default = "fprint"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mod_term_filter_signature());
    }

    // optional bool use_mod_term_filter = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool seek_back_enabled = 4 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool publish_rpc_updates = 5 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalUpdateConfig_Pubsub2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalUpdateConfig_Pubsub2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalUpdateConfig_Pubsub2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.IncrementalUpdateConfig.Pubsub2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.IncrementalUpdateConfig.Pubsub2)
    MergeFrom(*source);
  }
}

void IncrementalUpdateConfig_Pubsub2::MergeFrom(const IncrementalUpdateConfig_Pubsub2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      subscriber_id_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscriber_id_base_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      publisher_id_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publisher_id_base_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      mod_term_filter_signature_.AssignWithDefault(&::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get(), from.mod_term_filter_signature_);
    }
    if (cached_has_bits & 0x00000020u) {
      use_mod_term_filter_ = from.use_mod_term_filter_;
    }
    if (cached_has_bits & 0x00000040u) {
      seek_back_enabled_ = from.seek_back_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      publish_rpc_updates_ = from.publish_rpc_updates_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncrementalUpdateConfig_Pubsub2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalUpdateConfig_Pubsub2::CopyFrom(const IncrementalUpdateConfig_Pubsub2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.IncrementalUpdateConfig.Pubsub2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalUpdateConfig_Pubsub2::IsInitialized() const {
  return true;
}

void IncrementalUpdateConfig_Pubsub2::InternalSwap(IncrementalUpdateConfig_Pubsub2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subscriber_id_base_.Swap(&other->subscriber_id_base_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publisher_id_base_.Swap(&other->publisher_id_base_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mod_term_filter_signature_.Swap(&other->mod_term_filter_signature_, &::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get(),
    GetArenaNoVirtual());
  swap(use_mod_term_filter_, other->use_mod_term_filter_);
  swap(seek_back_enabled_, other->seek_back_enabled_);
  swap(publish_rpc_updates_, other->publish_rpc_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalUpdateConfig_Pubsub2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncrementalUpdateConfig::InitAsDefaultInstance() {
  ::research_scann::_IncrementalUpdateConfig_default_instance_._instance.get_mutable()->last_update_timestamp_lifetime_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::research_scann::_IncrementalUpdateConfig_default_instance_.pubsub2_ = const_cast< ::research_scann::IncrementalUpdateConfig_Pubsub2*>(
      ::research_scann::IncrementalUpdateConfig_Pubsub2::internal_default_instance());
  ::research_scann::_IncrementalUpdateConfig_default_instance_._instance.get_mutable()->startup_catchup_threshold_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class IncrementalUpdateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IncrementalUpdateConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_datapoints_to_reserve(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& last_update_timestamp_lifetime(const IncrementalUpdateConfig* msg);
  static void set_has_last_update_timestamp_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_expiration_timestamps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::research_scann::IncrementalUpdateConfig_Pubsub2& pubsub2(const IncrementalUpdateConfig* msg);
  static void set_has_sharder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& startup_catchup_threshold(const IncrementalUpdateConfig* msg);
  static void set_has_startup_catchup_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_updates_between_garbage_collections(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const PROTOBUF_NAMESPACE_ID::Duration&
IncrementalUpdateConfig::_Internal::last_update_timestamp_lifetime(const IncrementalUpdateConfig* msg) {
  return *msg->last_update_timestamp_lifetime_;
}
const ::research_scann::IncrementalUpdateConfig_Pubsub2&
IncrementalUpdateConfig::_Internal::pubsub2(const IncrementalUpdateConfig* msg) {
  return *msg->DurabilityReplication_.pubsub2_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
IncrementalUpdateConfig::_Internal::startup_catchup_threshold(const IncrementalUpdateConfig* msg) {
  return *msg->startup_catchup_threshold_;
}
void IncrementalUpdateConfig::clear_last_update_timestamp_lifetime() {
  if (last_update_timestamp_lifetime_ != nullptr) last_update_timestamp_lifetime_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void IncrementalUpdateConfig::set_allocated_pubsub2(::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DurabilityReplication();
  if (pubsub2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pubsub2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubsub2, submessage_arena);
    }
    set_has_pubsub2();
    DurabilityReplication_.pubsub2_ = pubsub2;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.pubsub2)
}
void IncrementalUpdateConfig::clear_startup_catchup_threshold() {
  if (startup_catchup_threshold_ != nullptr) startup_catchup_threshold_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
IncrementalUpdateConfig::IncrementalUpdateConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.IncrementalUpdateConfig)
}
IncrementalUpdateConfig::IncrementalUpdateConfig(const IncrementalUpdateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sharder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sharder()) {
    sharder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sharder_);
  }
  if (from.has_last_update_timestamp_lifetime()) {
    last_update_timestamp_lifetime_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.last_update_timestamp_lifetime_);
  } else {
    last_update_timestamp_lifetime_ = nullptr;
  }
  if (from.has_startup_catchup_threshold()) {
    startup_catchup_threshold_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.startup_catchup_threshold_);
  } else {
    startup_catchup_threshold_ = nullptr;
  }
  ::memcpy(&num_datapoints_to_reserve_, &from.num_datapoints_to_reserve_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_updates_between_garbage_collections_) -
    reinterpret_cast<char*>(&num_datapoints_to_reserve_)) + sizeof(num_updates_between_garbage_collections_));
  clear_has_DurabilityReplication();
  switch (from.DurabilityReplication_case()) {
    case kPubsub2: {
      mutable_pubsub2()->::research_scann::IncrementalUpdateConfig_Pubsub2::MergeFrom(from.pubsub2());
      break;
    }
    case DURABILITYREPLICATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.IncrementalUpdateConfig)
}

void IncrementalUpdateConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  sharder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_update_timestamp_lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_expiration_timestamps_) -
      reinterpret_cast<char*>(&last_update_timestamp_lifetime_)) + sizeof(enable_expiration_timestamps_));
  num_updates_between_garbage_collections_ = 100000u;
  clear_has_DurabilityReplication();
}

IncrementalUpdateConfig::~IncrementalUpdateConfig() {
  // @@protoc_insertion_point(destructor:research_scann.IncrementalUpdateConfig)
  SharedDtor();
}

void IncrementalUpdateConfig::SharedDtor() {
  sharder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_update_timestamp_lifetime_;
  if (this != internal_default_instance()) delete startup_catchup_threshold_;
  if (has_DurabilityReplication()) {
    clear_DurabilityReplication();
  }
}

void IncrementalUpdateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalUpdateConfig& IncrementalUpdateConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalUpdateConfig_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  return *internal_default_instance();
}


void IncrementalUpdateConfig::clear_DurabilityReplication() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.IncrementalUpdateConfig)
  switch (DurabilityReplication_case()) {
    case kPubsub2: {
      delete DurabilityReplication_.pubsub2_;
      break;
    }
    case DURABILITYREPLICATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DURABILITYREPLICATION_NOT_SET;
}


void IncrementalUpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.IncrementalUpdateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sharder_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_update_timestamp_lifetime_ != nullptr);
      last_update_timestamp_lifetime_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(startup_catchup_threshold_ != nullptr);
      startup_catchup_threshold_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&num_datapoints_to_reserve_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_expiration_timestamps_) -
        reinterpret_cast<char*>(&num_datapoints_to_reserve_)) + sizeof(enable_expiration_timestamps_));
    num_updates_between_garbage_collections_ = 100000u;
  }
  clear_DurabilityReplication();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalUpdateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_last_update_timestamp_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_pubsub2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_expiration_timestamps = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_expiration_timestamps(&has_bits);
          enable_expiration_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_datapoints_to_reserve(&has_bits);
          num_datapoints_to_reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sharder = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sharder(), ptr, ctx, "research_scann.IncrementalUpdateConfig.sharder");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration startup_catchup_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_startup_catchup_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_updates_between_garbage_collections(&has_bits);
          num_updates_between_garbage_collections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalUpdateConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.IncrementalUpdateConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_update_timestamp_lifetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pubsub2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_expiration_timestamps = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_enable_expiration_timestamps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_expiration_timestamps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_datapoints_to_reserve(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_datapoints_to_reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sharder = 6 [default = ""];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sharder()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sharder().data(), static_cast<int>(this->sharder().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateConfig.sharder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration startup_catchup_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_startup_catchup_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_updates_between_garbage_collections(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_updates_between_garbage_collections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.IncrementalUpdateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.IncrementalUpdateConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalUpdateConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.IncrementalUpdateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::last_update_timestamp_lifetime(this), output);
  }

  // optional .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
  if (has_pubsub2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::pubsub2(this), output);
  }

  // optional bool enable_expiration_timestamps = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_expiration_timestamps(), output);
  }

  // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->num_datapoints_to_reserve(), output);
  }

  // optional string sharder = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sharder().data(), static_cast<int>(this->sharder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.sharder");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sharder(), output);
  }

  // optional .google.protobuf.Duration startup_catchup_threshold = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::startup_catchup_threshold(this), output);
  }

  // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->num_updates_between_garbage_collections(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.IncrementalUpdateConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalUpdateConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.IncrementalUpdateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::last_update_timestamp_lifetime(this), target);
  }

  // optional .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
  if (has_pubsub2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::pubsub2(this), target);
  }

  // optional bool enable_expiration_timestamps = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->enable_expiration_timestamps(), target);
  }

  // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_datapoints_to_reserve(), target);
  }

  // optional string sharder = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sharder().data(), static_cast<int>(this->sharder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateConfig.sharder");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->sharder(), target);
  }

  // optional .google.protobuf.Duration startup_catchup_threshold = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::startup_catchup_threshold(this), target);
  }

  // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_updates_between_garbage_collections(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.IncrementalUpdateConfig)
  return target;
}

size_t IncrementalUpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.IncrementalUpdateConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sharder = 6 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sharder());
    }

    // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_update_timestamp_lifetime_);
    }

    // optional .google.protobuf.Duration startup_catchup_threshold = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *startup_catchup_threshold_);
    }

    // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->num_datapoints_to_reserve());
    }

    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_expiration_timestamps = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_updates_between_garbage_collections());
    }

  }
  switch (DurabilityReplication_case()) {
    // optional .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
    case kPubsub2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DurabilityReplication_.pubsub2_);
      break;
    }
    case DURABILITYREPLICATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalUpdateConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.IncrementalUpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalUpdateConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalUpdateConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.IncrementalUpdateConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.IncrementalUpdateConfig)
    MergeFrom(*source);
  }
}

void IncrementalUpdateConfig::MergeFrom(const IncrementalUpdateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.IncrementalUpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sharder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sharder_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_last_update_timestamp_lifetime()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from.last_update_timestamp_lifetime());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_startup_catchup_threshold()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from.startup_catchup_threshold());
    }
    if (cached_has_bits & 0x00000008u) {
      num_datapoints_to_reserve_ = from.num_datapoints_to_reserve_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_expiration_timestamps_ = from.enable_expiration_timestamps_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_updates_between_garbage_collections_ = from.num_updates_between_garbage_collections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.DurabilityReplication_case()) {
    case kPubsub2: {
      mutable_pubsub2()->::research_scann::IncrementalUpdateConfig_Pubsub2::MergeFrom(from.pubsub2());
      break;
    }
    case DURABILITYREPLICATION_NOT_SET: {
      break;
    }
  }
}

void IncrementalUpdateConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.IncrementalUpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalUpdateConfig::CopyFrom(const IncrementalUpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.IncrementalUpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalUpdateConfig::IsInitialized() const {
  return true;
}

void IncrementalUpdateConfig::InternalSwap(IncrementalUpdateConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sharder_.Swap(&other->sharder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_update_timestamp_lifetime_, other->last_update_timestamp_lifetime_);
  swap(startup_catchup_threshold_, other->startup_catchup_threshold_);
  swap(num_datapoints_to_reserve_, other->num_datapoints_to_reserve_);
  swap(enabled_, other->enabled_);
  swap(enable_expiration_timestamps_, other->enable_expiration_timestamps_);
  swap(num_updates_between_garbage_collections_, other->num_updates_between_garbage_collections_);
  swap(DurabilityReplication_, other->DurabilityReplication_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalUpdateConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncrementalUpdateMetadata::InitAsDefaultInstance() {
  ::research_scann::_IncrementalUpdateMetadata_default_instance_._instance.get_mutable()->epoch_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::research_scann::_IncrementalUpdateMetadata_default_instance_._instance.get_mutable()->max_epoch_age_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class IncrementalUpdateMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<IncrementalUpdateMetadata>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& epoch_timestamp(const IncrementalUpdateMetadata* msg);
  static void set_has_epoch_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const PROTOBUF_NAMESPACE_ID::Duration& max_epoch_age(const IncrementalUpdateMetadata* msg);
  static void set_has_max_epoch_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
IncrementalUpdateMetadata::_Internal::epoch_timestamp(const IncrementalUpdateMetadata* msg) {
  return *msg->epoch_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
IncrementalUpdateMetadata::_Internal::max_epoch_age(const IncrementalUpdateMetadata* msg) {
  return *msg->max_epoch_age_;
}
void IncrementalUpdateMetadata::clear_epoch_timestamp() {
  if (epoch_timestamp_ != nullptr) epoch_timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void IncrementalUpdateMetadata::clear_max_epoch_age() {
  if (max_epoch_age_ != nullptr) max_epoch_age_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
IncrementalUpdateMetadata::IncrementalUpdateMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.IncrementalUpdateMetadata)
}
IncrementalUpdateMetadata::IncrementalUpdateMetadata(const IncrementalUpdateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_epoch_timestamp()) {
    epoch_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.epoch_timestamp_);
  } else {
    epoch_timestamp_ = nullptr;
  }
  if (from.has_max_epoch_age()) {
    max_epoch_age_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.max_epoch_age_);
  } else {
    max_epoch_age_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.IncrementalUpdateMetadata)
}

void IncrementalUpdateMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_epoch_age_) -
      reinterpret_cast<char*>(&epoch_timestamp_)) + sizeof(max_epoch_age_));
}

IncrementalUpdateMetadata::~IncrementalUpdateMetadata() {
  // @@protoc_insertion_point(destructor:research_scann.IncrementalUpdateMetadata)
  SharedDtor();
}

void IncrementalUpdateMetadata::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epoch_timestamp_;
  if (this != internal_default_instance()) delete max_epoch_age_;
}

void IncrementalUpdateMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalUpdateMetadata& IncrementalUpdateMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto.base);
  return *internal_default_instance();
}


void IncrementalUpdateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.IncrementalUpdateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(epoch_timestamp_ != nullptr);
      epoch_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_epoch_age_ != nullptr);
      max_epoch_age_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalUpdateMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp epoch_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_epoch_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_version(), ptr, ctx, "research_scann.IncrementalUpdateMetadata.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration max_epoch_age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_max_epoch_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalUpdateMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.IncrementalUpdateMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp epoch_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_epoch_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.IncrementalUpdateMetadata.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration max_epoch_age = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_epoch_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.IncrementalUpdateMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.IncrementalUpdateMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalUpdateMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.IncrementalUpdateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .google.protobuf.Timestamp epoch_timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::epoch_timestamp(this), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateMetadata.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional .google.protobuf.Duration max_epoch_age = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::max_epoch_age(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.IncrementalUpdateMetadata)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalUpdateMetadata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.IncrementalUpdateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .google.protobuf.Timestamp epoch_timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::epoch_timestamp(this), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.IncrementalUpdateMetadata.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional .google.protobuf.Duration max_epoch_age = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::max_epoch_age(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.IncrementalUpdateMetadata)
  return target;
}

size_t IncrementalUpdateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.IncrementalUpdateMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .google.protobuf.Timestamp epoch_timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *epoch_timestamp_);
    }

    // optional .google.protobuf.Duration max_epoch_age = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_epoch_age_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalUpdateMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.IncrementalUpdateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalUpdateMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalUpdateMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.IncrementalUpdateMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.IncrementalUpdateMetadata)
    MergeFrom(*source);
  }
}

void IncrementalUpdateMetadata::MergeFrom(const IncrementalUpdateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.IncrementalUpdateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_epoch_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.epoch_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max_epoch_age()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from.max_epoch_age());
    }
  }
}

void IncrementalUpdateMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.IncrementalUpdateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalUpdateMetadata::CopyFrom(const IncrementalUpdateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.IncrementalUpdateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalUpdateMetadata::IsInitialized() const {
  return true;
}

void IncrementalUpdateMetadata::InternalSwap(IncrementalUpdateMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(epoch_timestamp_, other->epoch_timestamp_);
  swap(max_epoch_age_, other->max_epoch_age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalUpdateMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::IncrementalUpdateConfig_Pubsub2* Arena::CreateMaybeMessage< ::research_scann::IncrementalUpdateConfig_Pubsub2 >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::IncrementalUpdateConfig_Pubsub2 >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::IncrementalUpdateConfig* Arena::CreateMaybeMessage< ::research_scann::IncrementalUpdateConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::IncrementalUpdateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::IncrementalUpdateMetadata* Arena::CreateMaybeMessage< ::research_scann::IncrementalUpdateMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::IncrementalUpdateMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
