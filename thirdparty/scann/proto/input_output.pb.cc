// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/input_output.proto

#include "scann/proto/input_output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fincremental_5fupdates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2finput_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2finput_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2finput_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto;
namespace research_scann {
class InputOutputConfig_PureDynamicConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputOutputConfig_PureDynamicConfig> _instance;
} _InputOutputConfig_PureDynamicConfig_default_instance_;
class InputOutputConfig_TeamsterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputOutputConfig_TeamsterConfig> _instance;
} _InputOutputConfig_TeamsterConfig_default_instance_;
class InputOutputConfig_PreprocessingFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputOutputConfig_PreprocessingFunction> _instance;
} _InputOutputConfig_PreprocessingFunction_default_instance_;
class InputOutputConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputOutputConfig> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incremental_update_metadata_location_;
  const ::research_scann::IncrementalUpdateMetadata* incremental_update_metadata_;
} _InputOutputConfig_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_InputOutputConfig_default_instance_;
    new (ptr) ::research_scann::InputOutputConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::InputOutputConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto}, {
      &scc_info_IncrementalUpdateMetadata_scann_2fproto_2fincremental_5fupdates_2eproto.base,
      &scc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto.base,
      &scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto.base,
      &scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_InputOutputConfig_PreprocessingFunction_default_instance_;
    new (ptr) ::research_scann::InputOutputConfig_PreprocessingFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::InputOutputConfig_PreprocessingFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto}, {}};

static void InitDefaultsscc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_InputOutputConfig_PureDynamicConfig_default_instance_;
    new (ptr) ::research_scann::InputOutputConfig_PureDynamicConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::InputOutputConfig_PureDynamicConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto}, {}};

static void InitDefaultsscc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.DefaultConstruct();
  *::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get_mutable() = std::string("database", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get_mutable());
  {
    void* ptr = &::research_scann::_InputOutputConfig_TeamsterConfig_default_instance_;
    new (ptr) ::research_scann::InputOutputConfig_TeamsterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::InputOutputConfig_TeamsterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2finput_5foutput_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2finput_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2finput_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, num_shards_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, vector_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, dimensionality_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, num_shards_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, shard_num_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, teamster_loader_bns_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, data_family_name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, data_stream_name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_TeamsterConfig, db_prefix_override_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, config_ascii_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, in_memory_data_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, allow_two_pass_read_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, query_wildcard_),
  offsetof(::research_scann::InputOutputConfigDefaultTypeInternal, incremental_update_metadata_location_),
  offsetof(::research_scann::InputOutputConfigDefaultTypeInternal, incremental_update_metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, output_sstable_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, preprocessed_artifacts_dir_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, artifacts_naming_option_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, pure_dynamic_config_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, norm_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, teamster_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, non_negative_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, is_dense_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, query_preprocessing_function_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, hashed_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, fixed_point_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, tokenized_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, memory_consumption_estimate_filename_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, saturate_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, dimensionality_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, IncrementalUpdateMetadataOneof_),
  18,
  0,
  13,
  1,
  ~0u,
  ~0u,
  2,
  6,
  17,
  10,
  12,
  9,
  14,
  15,
  8,
  3,
  5,
  4,
  7,
  16,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::research_scann::InputOutputConfig_PureDynamicConfig)},
  { 11, 23, sizeof(::research_scann::InputOutputConfig_TeamsterConfig)},
  { 30, 37, sizeof(::research_scann::InputOutputConfig_PreprocessingFunction)},
  { 39, 66, sizeof(::research_scann::InputOutputConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_PureDynamicConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_TeamsterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_PreprocessingFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2finput_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036scann/proto/input_output.proto\022\016resear"
  "ch_scann\032%scann/proto/incremental_update"
  "s.proto\"\254\017\n\021InputOutputConfig\022o\n\023in_memo"
  "ry_data_type\030\002 \001(\0162/.research_scann.Inpu"
  "tOutputConfig.InMemoryTypes:!IN_MEMORY_D"
  "ATA_TYPE_NOT_SPECIFIED\022\031\n\021database_wildc"
  "ard\030\003 \001(\t\022\"\n\023allow_two_pass_read\030\017 \001(\010:\005"
  "false\022\026\n\016query_wildcard\030\010 \001(\t\022.\n$increme"
  "ntal_update_metadata_location\030\023 \001(\tH\000\022P\n"
  "\033incremental_update_metadata\030\026 \001(\0132).res"
  "earch_scann.IncrementalUpdateMetadataH\000\022"
  "\037\n\027output_sstable_wildcard\030\013 \001(\t\022\"\n\032prep"
  "rocessed_artifacts_dir\030\022 \001(\t\022`\n\027artifact"
  "s_naming_option\030\027 \001(\01627.research_scann.I"
  "nputOutputConfig.ArtifactsNamingOption:\006"
  "HASHED\022P\n\023pure_dynamic_config\030\025 \001(\01323.re"
  "search_scann.InputOutputConfig.PureDynam"
  "icConfig\022F\n\tnorm_type\030\005 \001(\0162-.research_s"
  "cann.InputOutputConfig.FeatureNorm:\004NONE"
  "\022B\n\010teamster\030\024 \001(\01320.research_scann.Inpu"
  "tOutputConfig.TeamsterConfig\022\033\n\014non_nega"
  "tive\030\006 \001(\010:\005false\022\020\n\010is_dense\030\007 \001(\010\022]\n\034q"
  "uery_preprocessing_function\030\020 \001(\01327.rese"
  "arch_scann.InputOutputConfig.Preprocessi"
  "ngFunction\022 \n\030hashed_database_wildcard\030\014"
  " \001(\t\022%\n\035fixed_point_database_wildcard\030\021 "
  "\001(\t\022#\n\033tokenized_database_wildcard\030\016 \001(\t"
  "\022,\n$memory_consumption_estimate_filename"
  "\030\030 \001(\t\022\033\n\010saturate\030\n \001(\010:\005falseB\002\030\001\022\032\n\016d"
  "imensionality\030\004 \001(\004B\002\030\001\032\362\001\n\021PureDynamicC"
  "onfig\022\025\n\nnum_shards\030\001 \001(\005:\0011\022l\n\013vector_t"
  "ype\030\002 \001(\0162>.research_scann.InputOutputCo"
  "nfig.PureDynamicConfig.VectorType:\027UNSPE"
  "CIFIED_VECTOR_TYPE\022\026\n\016dimensionality\030\003 \001"
  "(\004\"@\n\nVectorType\022\033\n\027UNSPECIFIED_VECTOR_T"
  "YPE\020\000\022\n\n\006SPARSE\020\001\022\t\n\005DENSE\020\002\032\315\001\n\016Teamste"
  "rConfig\022\026\n\007enabled\030\001 \001(\010:\005false\022\025\n\nnum_s"
  "hards\030\002 \001(\005:\0011\022\025\n\tshard_num\030\003 \001(\005:\002-1\022\033\n"
  "\023teamster_loader_bns\030\004 \001(\t\022\030\n\020data_famil"
  "y_name\030\005 \001(\t\022\030\n\020data_stream_name\030\006 \001(\t\022$"
  "\n\022db_prefix_override\030\007 \001(\t:\010database\032;\n\025"
  "PreprocessingFunction\022\014\n\004name\030\001 \001(\t\022\024\n\014c"
  "onfig_ascii\030\002 \001(\t\"\250\001\n\rInMemoryTypes\022\010\n\004I"
  "NT8\020\000\022\t\n\005UINT8\020\001\022\t\n\005INT16\020\002\022\n\n\006UINT16\020\003\022"
  "\t\n\005INT32\020\004\022\n\n\006UINT32\020\005\022\t\n\005INT64\020\006\022\n\n\006UIN"
  "T64\020\007\022\t\n\005FLOAT\020\010\022\n\n\006DOUBLE\020\t\022&\n!IN_MEMOR"
  "Y_DATA_TYPE_NOT_SPECIFIED\020\377\001\"0\n\025Artifact"
  "sNamingOption\022\n\n\006HASHED\020\000\022\013\n\007NO_HASH\020\001\"I"
  "\n\013FeatureNorm\022\010\n\004NONE\020\000\022\016\n\nUNITL2NORM\020\001\022"
  "\020\n\014STDGAUSSNORM\020\002\022\016\n\nUNITL1NORM\020\003B \n\036Inc"
  "rementalUpdateMetadataOneofJ\004\010\001\020\002J\004\010\r\020\016R"
  "\rinput_handler"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2finput_5foutput_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2finput_5foutput_2eproto_sccs[4] = {
  &scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto.base,
  &scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto.base,
  &scc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto.base,
  &scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once;
static bool descriptor_table_scann_2fproto_2finput_5foutput_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2finput_5foutput_2eproto = {
  &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2finput_5foutput_2eproto, "scann/proto/input_output.proto", 2054,
  &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once, descriptor_table_scann_2fproto_2finput_5foutput_2eproto_sccs, descriptor_table_scann_2fproto_2finput_5foutput_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_scann_2fproto_2finput_5foutput_2eproto::offsets,
  file_level_metadata_scann_2fproto_2finput_5foutput_2eproto, 4, file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto, file_level_service_descriptors_scann_2fproto_2finput_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2finput_5foutput_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto), true);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_PureDynamicConfig_VectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[0];
}
bool InputOutputConfig_PureDynamicConfig_VectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::UNSPECIFIED_VECTOR_TYPE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::SPARSE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::DENSE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::VectorType_MIN;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::VectorType_MAX;
constexpr int InputOutputConfig_PureDynamicConfig::VectorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_InMemoryTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[1];
}
bool InputOutputConfig_InMemoryTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT8;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT8;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT16;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT16;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT32;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT32;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT64;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT64;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::FLOAT;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::DOUBLE;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::IN_MEMORY_DATA_TYPE_NOT_SPECIFIED;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::InMemoryTypes_MIN;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::InMemoryTypes_MAX;
constexpr int InputOutputConfig::InMemoryTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_ArtifactsNamingOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[2];
}
bool InputOutputConfig_ArtifactsNamingOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::HASHED;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::NO_HASH;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::ArtifactsNamingOption_MIN;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::ArtifactsNamingOption_MAX;
constexpr int InputOutputConfig::ArtifactsNamingOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_FeatureNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[3];
}
bool InputOutputConfig_FeatureNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::NONE;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::UNITL2NORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::STDGAUSSNORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::UNITL1NORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::FeatureNorm_MIN;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::FeatureNorm_MAX;
constexpr int InputOutputConfig::FeatureNorm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InputOutputConfig_PureDynamicConfig::InitAsDefaultInstance() {
}
class InputOutputConfig_PureDynamicConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig_PureDynamicConfig>()._has_bits_);
  static void set_has_num_shards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vector_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dimensionality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputOutputConfig_PureDynamicConfig::InputOutputConfig_PureDynamicConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.InputOutputConfig.PureDynamicConfig)
}
InputOutputConfig_PureDynamicConfig::InputOutputConfig_PureDynamicConfig(const InputOutputConfig_PureDynamicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dimensionality_, &from.dimensionality_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_shards_) -
    reinterpret_cast<char*>(&dimensionality_)) + sizeof(num_shards_));
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig.PureDynamicConfig)
}

void InputOutputConfig_PureDynamicConfig::SharedCtor() {
  ::memset(&dimensionality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vector_type_) -
      reinterpret_cast<char*>(&dimensionality_)) + sizeof(vector_type_));
  num_shards_ = 1;
}

InputOutputConfig_PureDynamicConfig::~InputOutputConfig_PureDynamicConfig() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig.PureDynamicConfig)
  SharedDtor();
}

void InputOutputConfig_PureDynamicConfig::SharedDtor() {
}

void InputOutputConfig_PureDynamicConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputOutputConfig_PureDynamicConfig& InputOutputConfig_PureDynamicConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputOutputConfig_PureDynamicConfig_scann_2fproto_2finput_5foutput_2eproto.base);
  return *internal_default_instance();
}


void InputOutputConfig_PureDynamicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig.PureDynamicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&dimensionality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vector_type_) -
        reinterpret_cast<char*>(&dimensionality_)) + sizeof(vector_type_));
    num_shards_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputOutputConfig_PureDynamicConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_shards = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_shards(&has_bits);
          num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_PureDynamicConfig_VectorType_IsValid(val))) {
            set_vector_type(static_cast<::research_scann::InputOutputConfig_PureDynamicConfig_VectorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 dimensionality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dimensionality(&has_bits);
          dimensionality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputOutputConfig_PureDynamicConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.InputOutputConfig.PureDynamicConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_shards = 1 [default = 1];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_shards(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::InputOutputConfig_PureDynamicConfig_VectorType_IsValid(value)) {
            set_vector_type(static_cast< ::research_scann::InputOutputConfig_PureDynamicConfig_VectorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dimensionality = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_dimensionality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dimensionality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.InputOutputConfig.PureDynamicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.InputOutputConfig.PureDynamicConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputOutputConfig_PureDynamicConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.InputOutputConfig.PureDynamicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_shards = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_shards(), output);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->vector_type(), output);
  }

  // optional uint64 dimensionality = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->dimensionality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.InputOutputConfig.PureDynamicConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig_PureDynamicConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig.PureDynamicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_shards = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_shards(), target);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->vector_type(), target);
  }

  // optional uint64 dimensionality = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->dimensionality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig.PureDynamicConfig)
  return target;
}

size_t InputOutputConfig_PureDynamicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig.PureDynamicConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dimensionality = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dimensionality());
    }

    // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vector_type());
    }

    // optional int32 num_shards = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_shards());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputOutputConfig_PureDynamicConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InputOutputConfig_PureDynamicConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputOutputConfig_PureDynamicConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.InputOutputConfig.PureDynamicConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.InputOutputConfig.PureDynamicConfig)
    MergeFrom(*source);
  }
}

void InputOutputConfig_PureDynamicConfig::MergeFrom(const InputOutputConfig_PureDynamicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dimensionality_ = from.dimensionality_;
    }
    if (cached_has_bits & 0x00000002u) {
      vector_type_ = from.vector_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_shards_ = from.num_shards_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputOutputConfig_PureDynamicConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOutputConfig_PureDynamicConfig::CopyFrom(const InputOutputConfig_PureDynamicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig_PureDynamicConfig::IsInitialized() const {
  return true;
}

void InputOutputConfig_PureDynamicConfig::InternalSwap(InputOutputConfig_PureDynamicConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dimensionality_, other->dimensionality_);
  swap(vector_type_, other->vector_type_);
  swap(num_shards_, other->num_shards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig_PureDynamicConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputOutputConfig_TeamsterConfig::InitAsDefaultInstance() {
}
class InputOutputConfig_TeamsterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig_TeamsterConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_shards(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shard_num(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_teamster_loader_bns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_stream_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_db_prefix_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_;
InputOutputConfig_TeamsterConfig::InputOutputConfig_TeamsterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.InputOutputConfig.TeamsterConfig)
}
InputOutputConfig_TeamsterConfig::InputOutputConfig_TeamsterConfig(const InputOutputConfig_TeamsterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamster_loader_bns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_teamster_loader_bns()) {
    teamster_loader_bns_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamster_loader_bns_);
  }
  data_family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_family_name()) {
    data_family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_family_name_);
  }
  data_stream_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_stream_name()) {
    data_stream_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_stream_name_);
  }
  db_prefix_override_.UnsafeSetDefault(&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get());
  if (from.has_db_prefix_override()) {
    db_prefix_override_.AssignWithDefault(&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get(), from.db_prefix_override_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_num_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(shard_num_));
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig.TeamsterConfig)
}

void InputOutputConfig_TeamsterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto.base);
  teamster_loader_bns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_stream_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_prefix_override_.UnsafeSetDefault(&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get());
  enabled_ = false;
  num_shards_ = 1;
  shard_num_ = -1;
}

InputOutputConfig_TeamsterConfig::~InputOutputConfig_TeamsterConfig() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig.TeamsterConfig)
  SharedDtor();
}

void InputOutputConfig_TeamsterConfig::SharedDtor() {
  teamster_loader_bns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_stream_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_prefix_override_.DestroyNoArena(&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get());
}

void InputOutputConfig_TeamsterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputOutputConfig_TeamsterConfig& InputOutputConfig_TeamsterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputOutputConfig_TeamsterConfig_scann_2fproto_2finput_5foutput_2eproto.base);
  return *internal_default_instance();
}


void InputOutputConfig_TeamsterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig.TeamsterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      teamster_loader_bns_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_family_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_stream_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      db_prefix_override_.UnsafeMutablePointer()->assign(*&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get());
    }
  }
  if (cached_has_bits & 0x00000070u) {
    enabled_ = false;
    num_shards_ = 1;
    shard_num_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputOutputConfig_TeamsterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_shards = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_shards(&has_bits);
          num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shard_num = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shard_num(&has_bits);
          shard_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamster_loader_bns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_teamster_loader_bns(), ptr, ctx, "research_scann.InputOutputConfig.TeamsterConfig.teamster_loader_bns");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data_family_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_data_family_name(), ptr, ctx, "research_scann.InputOutputConfig.TeamsterConfig.data_family_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data_stream_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_data_stream_name(), ptr, ctx, "research_scann.InputOutputConfig.TeamsterConfig.data_stream_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string db_prefix_override = 7 [default = "database"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_db_prefix_override(), ptr, ctx, "research_scann.InputOutputConfig.TeamsterConfig.db_prefix_override");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputOutputConfig_TeamsterConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.InputOutputConfig.TeamsterConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_shards = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_shards(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shard_num = 3 [default = -1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_shard_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teamster_loader_bns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_teamster_loader_bns()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamster_loader_bns().data(), static_cast<int>(this->teamster_loader_bns().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.TeamsterConfig.teamster_loader_bns");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_family_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data_family_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_family_name().data(), static_cast<int>(this->data_family_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.TeamsterConfig.data_family_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_stream_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data_stream_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_stream_name().data(), static_cast<int>(this->data_stream_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.TeamsterConfig.data_stream_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_prefix_override = 7 [default = "database"];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_prefix_override()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_prefix_override().data(), static_cast<int>(this->db_prefix_override().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.TeamsterConfig.db_prefix_override");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.InputOutputConfig.TeamsterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.InputOutputConfig.TeamsterConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputOutputConfig_TeamsterConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.InputOutputConfig.TeamsterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 num_shards = 2 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_shards(), output);
  }

  // optional int32 shard_num = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->shard_num(), output);
  }

  // optional string teamster_loader_bns = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamster_loader_bns().data(), static_cast<int>(this->teamster_loader_bns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.teamster_loader_bns");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->teamster_loader_bns(), output);
  }

  // optional string data_family_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_family_name().data(), static_cast<int>(this->data_family_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.data_family_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data_family_name(), output);
  }

  // optional string data_stream_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_stream_name().data(), static_cast<int>(this->data_stream_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.data_stream_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data_stream_name(), output);
  }

  // optional string db_prefix_override = 7 [default = "database"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_prefix_override().data(), static_cast<int>(this->db_prefix_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.db_prefix_override");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->db_prefix_override(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.InputOutputConfig.TeamsterConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig_TeamsterConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig.TeamsterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional int32 num_shards = 2 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_shards(), target);
  }

  // optional int32 shard_num = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->shard_num(), target);
  }

  // optional string teamster_loader_bns = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamster_loader_bns().data(), static_cast<int>(this->teamster_loader_bns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.teamster_loader_bns");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->teamster_loader_bns(), target);
  }

  // optional string data_family_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_family_name().data(), static_cast<int>(this->data_family_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.data_family_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->data_family_name(), target);
  }

  // optional string data_stream_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_stream_name().data(), static_cast<int>(this->data_stream_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.data_stream_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->data_stream_name(), target);
  }

  // optional string db_prefix_override = 7 [default = "database"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_prefix_override().data(), static_cast<int>(this->db_prefix_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.TeamsterConfig.db_prefix_override");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->db_prefix_override(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig.TeamsterConfig)
  return target;
}

size_t InputOutputConfig_TeamsterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig.TeamsterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string teamster_loader_bns = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->teamster_loader_bns());
    }

    // optional string data_family_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->data_family_name());
    }

    // optional string data_stream_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->data_stream_name());
    }

    // optional string db_prefix_override = 7 [default = "database"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->db_prefix_override());
    }

    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 num_shards = 2 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_shards());
    }

    // optional int32 shard_num = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->shard_num());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputOutputConfig_TeamsterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.InputOutputConfig.TeamsterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InputOutputConfig_TeamsterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputOutputConfig_TeamsterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.InputOutputConfig.TeamsterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.InputOutputConfig.TeamsterConfig)
    MergeFrom(*source);
  }
}

void InputOutputConfig_TeamsterConfig::MergeFrom(const InputOutputConfig_TeamsterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig.TeamsterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      teamster_loader_bns_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamster_loader_bns_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_family_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      data_stream_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_stream_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      db_prefix_override_.AssignWithDefault(&::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get(), from.db_prefix_override_);
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_shards_ = from.num_shards_;
    }
    if (cached_has_bits & 0x00000040u) {
      shard_num_ = from.shard_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputOutputConfig_TeamsterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.InputOutputConfig.TeamsterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOutputConfig_TeamsterConfig::CopyFrom(const InputOutputConfig_TeamsterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig.TeamsterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig_TeamsterConfig::IsInitialized() const {
  return true;
}

void InputOutputConfig_TeamsterConfig::InternalSwap(InputOutputConfig_TeamsterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamster_loader_bns_.Swap(&other->teamster_loader_bns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_family_name_.Swap(&other->data_family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_stream_name_.Swap(&other->data_stream_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_prefix_override_.Swap(&other->db_prefix_override_, &::research_scann::InputOutputConfig_TeamsterConfig::_i_give_permission_to_break_this_code_default_db_prefix_override_.get(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
  swap(num_shards_, other->num_shards_);
  swap(shard_num_, other->shard_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig_TeamsterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputOutputConfig_PreprocessingFunction::InitAsDefaultInstance() {
}
class InputOutputConfig_PreprocessingFunction::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig_PreprocessingFunction>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_ascii(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputOutputConfig_PreprocessingFunction::InputOutputConfig_PreprocessingFunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.InputOutputConfig.PreprocessingFunction)
}
InputOutputConfig_PreprocessingFunction::InputOutputConfig_PreprocessingFunction(const InputOutputConfig_PreprocessingFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  config_ascii_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_ascii()) {
    config_ascii_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_ascii_);
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig.PreprocessingFunction)
}

void InputOutputConfig_PreprocessingFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ascii_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputOutputConfig_PreprocessingFunction::~InputOutputConfig_PreprocessingFunction() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig.PreprocessingFunction)
  SharedDtor();
}

void InputOutputConfig_PreprocessingFunction::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ascii_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputOutputConfig_PreprocessingFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputOutputConfig_PreprocessingFunction& InputOutputConfig_PreprocessingFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputOutputConfig_PreprocessingFunction_scann_2fproto_2finput_5foutput_2eproto.base);
  return *internal_default_instance();
}


void InputOutputConfig_PreprocessingFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig.PreprocessingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      config_ascii_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputOutputConfig_PreprocessingFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "research_scann.InputOutputConfig.PreprocessingFunction.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string config_ascii = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_config_ascii(), ptr, ctx, "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputOutputConfig_PreprocessingFunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.InputOutputConfig.PreprocessingFunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.PreprocessingFunction.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config_ascii = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config_ascii()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_ascii().data(), static_cast<int>(this->config_ascii().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.InputOutputConfig.PreprocessingFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.InputOutputConfig.PreprocessingFunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputOutputConfig_PreprocessingFunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.InputOutputConfig.PreprocessingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string config_ascii = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_ascii().data(), static_cast<int>(this->config_ascii().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_ascii(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.InputOutputConfig.PreprocessingFunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig_PreprocessingFunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig.PreprocessingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string config_ascii = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_ascii().data(), static_cast<int>(this->config_ascii().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config_ascii(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig.PreprocessingFunction)
  return target;
}

size_t InputOutputConfig_PreprocessingFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig.PreprocessingFunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string config_ascii = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->config_ascii());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputOutputConfig_PreprocessingFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const InputOutputConfig_PreprocessingFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputOutputConfig_PreprocessingFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.InputOutputConfig.PreprocessingFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.InputOutputConfig.PreprocessingFunction)
    MergeFrom(*source);
  }
}

void InputOutputConfig_PreprocessingFunction::MergeFrom(const InputOutputConfig_PreprocessingFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      config_ascii_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_ascii_);
    }
  }
}

void InputOutputConfig_PreprocessingFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOutputConfig_PreprocessingFunction::CopyFrom(const InputOutputConfig_PreprocessingFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig_PreprocessingFunction::IsInitialized() const {
  return true;
}

void InputOutputConfig_PreprocessingFunction::InternalSwap(InputOutputConfig_PreprocessingFunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_ascii_.Swap(&other->config_ascii_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig_PreprocessingFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputOutputConfig::InitAsDefaultInstance() {
  ::research_scann::_InputOutputConfig_default_instance_.incremental_update_metadata_location_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::research_scann::_InputOutputConfig_default_instance_.incremental_update_metadata_ = const_cast< ::research_scann::IncrementalUpdateMetadata*>(
      ::research_scann::IncrementalUpdateMetadata::internal_default_instance());
  ::research_scann::_InputOutputConfig_default_instance_._instance.get_mutable()->pure_dynamic_config_ = const_cast< ::research_scann::InputOutputConfig_PureDynamicConfig*>(
      ::research_scann::InputOutputConfig_PureDynamicConfig::internal_default_instance());
  ::research_scann::_InputOutputConfig_default_instance_._instance.get_mutable()->teamster_ = const_cast< ::research_scann::InputOutputConfig_TeamsterConfig*>(
      ::research_scann::InputOutputConfig_TeamsterConfig::internal_default_instance());
  ::research_scann::_InputOutputConfig_default_instance_._instance.get_mutable()->query_preprocessing_function_ = const_cast< ::research_scann::InputOutputConfig_PreprocessingFunction*>(
      ::research_scann::InputOutputConfig_PreprocessingFunction::internal_default_instance());
}
class InputOutputConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig>()._has_bits_);
  static void set_has_in_memory_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_two_pass_read(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_query_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::IncrementalUpdateMetadata& incremental_update_metadata(const InputOutputConfig* msg);
  static void set_has_output_sstable_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preprocessed_artifacts_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_artifacts_naming_option(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::research_scann::InputOutputConfig_PureDynamicConfig& pure_dynamic_config(const InputOutputConfig* msg);
  static void set_has_pure_dynamic_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_norm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::research_scann::InputOutputConfig_TeamsterConfig& teamster(const InputOutputConfig* msg);
  static void set_has_teamster(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_non_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_dense(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::research_scann::InputOutputConfig_PreprocessingFunction& query_preprocessing_function(const InputOutputConfig* msg);
  static void set_has_query_preprocessing_function(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hashed_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fixed_point_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tokenized_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_memory_consumption_estimate_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saturate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dimensionality(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::research_scann::IncrementalUpdateMetadata&
InputOutputConfig::_Internal::incremental_update_metadata(const InputOutputConfig* msg) {
  return *msg->IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
}
const ::research_scann::InputOutputConfig_PureDynamicConfig&
InputOutputConfig::_Internal::pure_dynamic_config(const InputOutputConfig* msg) {
  return *msg->pure_dynamic_config_;
}
const ::research_scann::InputOutputConfig_TeamsterConfig&
InputOutputConfig::_Internal::teamster(const InputOutputConfig* msg) {
  return *msg->teamster_;
}
const ::research_scann::InputOutputConfig_PreprocessingFunction&
InputOutputConfig::_Internal::query_preprocessing_function(const InputOutputConfig* msg) {
  return *msg->query_preprocessing_function_;
}
void InputOutputConfig::set_allocated_incremental_update_metadata(::research_scann::IncrementalUpdateMetadata* incremental_update_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_IncrementalUpdateMetadataOneof();
  if (incremental_update_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      incremental_update_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incremental_update_metadata, submessage_arena);
    }
    set_has_incremental_update_metadata();
    IncrementalUpdateMetadataOneof_.incremental_update_metadata_ = incremental_update_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.InputOutputConfig.incremental_update_metadata)
}
void InputOutputConfig::clear_incremental_update_metadata() {
  if (has_incremental_update_metadata()) {
    delete IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
    clear_has_IncrementalUpdateMetadataOneof();
  }
}
InputOutputConfig::InputOutputConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.InputOutputConfig)
}
InputOutputConfig::InputOutputConfig(const InputOutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_database_wildcard()) {
    database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.database_wildcard_);
  }
  query_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_wildcard()) {
    query_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_wildcard_);
  }
  output_sstable_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_sstable_wildcard()) {
    output_sstable_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_sstable_wildcard_);
  }
  hashed_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_database_wildcard()) {
    hashed_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashed_database_wildcard_);
  }
  tokenized_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tokenized_database_wildcard()) {
    tokenized_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenized_database_wildcard_);
  }
  fixed_point_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_fixed_point_database_wildcard()) {
    fixed_point_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fixed_point_database_wildcard_);
  }
  preprocessed_artifacts_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_preprocessed_artifacts_dir()) {
    preprocessed_artifacts_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preprocessed_artifacts_dir_);
  }
  memory_consumption_estimate_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_memory_consumption_estimate_filename()) {
    memory_consumption_estimate_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memory_consumption_estimate_filename_);
  }
  if (from.has_query_preprocessing_function()) {
    query_preprocessing_function_ = new ::research_scann::InputOutputConfig_PreprocessingFunction(*from.query_preprocessing_function_);
  } else {
    query_preprocessing_function_ = nullptr;
  }
  if (from.has_teamster()) {
    teamster_ = new ::research_scann::InputOutputConfig_TeamsterConfig(*from.teamster_);
  } else {
    teamster_ = nullptr;
  }
  if (from.has_pure_dynamic_config()) {
    pure_dynamic_config_ = new ::research_scann::InputOutputConfig_PureDynamicConfig(*from.pure_dynamic_config_);
  } else {
    pure_dynamic_config_ = nullptr;
  }
  ::memcpy(&dimensionality_, &from.dimensionality_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_memory_data_type_) -
    reinterpret_cast<char*>(&dimensionality_)) + sizeof(in_memory_data_type_));
  clear_has_IncrementalUpdateMetadataOneof();
  switch (from.IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      set_incremental_update_metadata_location(from.incremental_update_metadata_location());
      break;
    }
    case kIncrementalUpdateMetadata: {
      mutable_incremental_update_metadata()->::research_scann::IncrementalUpdateMetadata::MergeFrom(from.incremental_update_metadata());
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig)
}

void InputOutputConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto.base);
  database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_sstable_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashed_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenized_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixed_point_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preprocessed_artifacts_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_consumption_estimate_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_preprocessing_function_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&artifacts_naming_option_) -
      reinterpret_cast<char*>(&query_preprocessing_function_)) + sizeof(artifacts_naming_option_));
  in_memory_data_type_ = 255;
  clear_has_IncrementalUpdateMetadataOneof();
}

InputOutputConfig::~InputOutputConfig() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig)
  SharedDtor();
}

void InputOutputConfig::SharedDtor() {
  database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_sstable_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashed_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenized_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixed_point_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preprocessed_artifacts_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_consumption_estimate_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_preprocessing_function_;
  if (this != internal_default_instance()) delete teamster_;
  if (this != internal_default_instance()) delete pure_dynamic_config_;
  if (has_IncrementalUpdateMetadataOneof()) {
    clear_IncrementalUpdateMetadataOneof();
  }
}

void InputOutputConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputOutputConfig& InputOutputConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto.base);
  return *internal_default_instance();
}


void InputOutputConfig::clear_IncrementalUpdateMetadataOneof() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.InputOutputConfig)
  switch (IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      IncrementalUpdateMetadataOneof_.incremental_update_metadata_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIncrementalUpdateMetadata: {
      delete IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INCREMENTALUPDATEMETADATAONEOF_NOT_SET;
}


void InputOutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      database_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      query_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      output_sstable_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_database_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      tokenized_database_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_point_database_wildcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      preprocessed_artifacts_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      memory_consumption_estimate_filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(query_preprocessing_function_ != nullptr);
      query_preprocessing_function_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(teamster_ != nullptr);
      teamster_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(pure_dynamic_config_ != nullptr);
      pure_dynamic_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&dimensionality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_dense_) -
        reinterpret_cast<char*>(&dimensionality_)) + sizeof(is_dense_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&saturate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&artifacts_naming_option_) -
        reinterpret_cast<char*>(&saturate_)) + sizeof(artifacts_naming_option_));
    in_memory_data_type_ = 255;
  }
  clear_IncrementalUpdateMetadataOneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputOutputConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_InMemoryTypes_IsValid(val))) {
            set_in_memory_data_type(static_cast<::research_scann::InputOutputConfig_InMemoryTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string database_wildcard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_database_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.database_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dimensionality = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dimensionality(&has_bits);
          dimensionality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_FeatureNorm_IsValid(val))) {
            set_norm_type(static_cast<::research_scann::InputOutputConfig_FeatureNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool non_negative = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_non_negative(&has_bits);
          non_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dense = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_dense(&has_bits);
          is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query_wildcard = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_query_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.query_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool saturate = 10 [default = false, deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_saturate(&has_bits);
          saturate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_sstable_wildcard = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_output_sstable_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.output_sstable_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hashed_database_wildcard = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hashed_database_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.hashed_database_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tokenized_database_wildcard = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_tokenized_database_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.tokenized_database_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_two_pass_read = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_allow_two_pass_read(&has_bits);
          allow_two_pass_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_query_preprocessing_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fixed_point_database_wildcard = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_fixed_point_database_wildcard(), ptr, ctx, "research_scann.InputOutputConfig.fixed_point_database_wildcard");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preprocessed_artifacts_dir = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_preprocessed_artifacts_dir(), ptr, ctx, "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string incremental_update_metadata_location = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_incremental_update_metadata_location(), ptr, ctx, "research_scann.InputOutputConfig.incremental_update_metadata_location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.TeamsterConfig teamster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_teamster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_pure_dynamic_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_incremental_update_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_ArtifactsNamingOption_IsValid(val))) {
            set_artifacts_naming_option(static_cast<::research_scann::InputOutputConfig_ArtifactsNamingOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string memory_consumption_estimate_filename = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_memory_consumption_estimate_filename(), ptr, ctx, "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputOutputConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.InputOutputConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::InputOutputConfig_InMemoryTypes_IsValid(value)) {
            set_in_memory_data_type(static_cast< ::research_scann::InputOutputConfig_InMemoryTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string database_wildcard = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_database_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database_wildcard().data(), static_cast<int>(this->database_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.database_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dimensionality = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_dimensionality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dimensionality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::InputOutputConfig_FeatureNorm_IsValid(value)) {
            set_norm_type(static_cast< ::research_scann::InputOutputConfig_FeatureNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool non_negative = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_non_negative(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &non_negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dense = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_dense(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_wildcard = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_query_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_wildcard().data(), static_cast<int>(this->query_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.query_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool saturate = 10 [default = false, deprecated = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_saturate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saturate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string output_sstable_wildcard = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_output_sstable_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_sstable_wildcard().data(), static_cast<int>(this->output_sstable_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.output_sstable_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hashed_database_wildcard = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hashed_database_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hashed_database_wildcard().data(), static_cast<int>(this->hashed_database_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.hashed_database_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tokenized_database_wildcard = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenized_database_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokenized_database_wildcard().data(), static_cast<int>(this->tokenized_database_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.tokenized_database_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_two_pass_read = 15 [default = false];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_allow_two_pass_read(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_two_pass_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_preprocessing_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fixed_point_database_wildcard = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fixed_point_database_wildcard()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fixed_point_database_wildcard().data(), static_cast<int>(this->fixed_point_database_wildcard().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.fixed_point_database_wildcard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preprocessed_artifacts_dir = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_preprocessed_artifacts_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preprocessed_artifacts_dir().data(), static_cast<int>(this->preprocessed_artifacts_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string incremental_update_metadata_location = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_incremental_update_metadata_location()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->incremental_update_metadata_location().data(), static_cast<int>(this->incremental_update_metadata_location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.incremental_update_metadata_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.TeamsterConfig teamster = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_teamster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pure_dynamic_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incremental_update_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::InputOutputConfig_ArtifactsNamingOption_IsValid(value)) {
            set_artifacts_naming_option(static_cast< ::research_scann::InputOutputConfig_ArtifactsNamingOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memory_consumption_estimate_filename = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_consumption_estimate_filename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memory_consumption_estimate_filename().data(), static_cast<int>(this->memory_consumption_estimate_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.InputOutputConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.InputOutputConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputOutputConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.InputOutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->in_memory_data_type(), output);
  }

  // optional string database_wildcard = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_wildcard().data(), static_cast<int>(this->database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.database_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->database_wildcard(), output);
  }

  // optional uint64 dimensionality = 4 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->dimensionality(), output);
  }

  // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->norm_type(), output);
  }

  // optional bool non_negative = 6 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->non_negative(), output);
  }

  // optional bool is_dense = 7;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_dense(), output);
  }

  // optional string query_wildcard = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_wildcard().data(), static_cast<int>(this->query_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.query_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query_wildcard(), output);
  }

  // optional bool saturate = 10 [default = false, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->saturate(), output);
  }

  // optional string output_sstable_wildcard = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_sstable_wildcard().data(), static_cast<int>(this->output_sstable_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.output_sstable_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->output_sstable_wildcard(), output);
  }

  // optional string hashed_database_wildcard = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashed_database_wildcard().data(), static_cast<int>(this->hashed_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.hashed_database_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->hashed_database_wildcard(), output);
  }

  // optional string tokenized_database_wildcard = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenized_database_wildcard().data(), static_cast<int>(this->tokenized_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.tokenized_database_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tokenized_database_wildcard(), output);
  }

  // optional bool allow_two_pass_read = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->allow_two_pass_read(), output);
  }

  // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::query_preprocessing_function(this), output);
  }

  // optional string fixed_point_database_wildcard = 17;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_point_database_wildcard().data(), static_cast<int>(this->fixed_point_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.fixed_point_database_wildcard");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->fixed_point_database_wildcard(), output);
  }

  // optional string preprocessed_artifacts_dir = 18;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preprocessed_artifacts_dir().data(), static_cast<int>(this->preprocessed_artifacts_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->preprocessed_artifacts_dir(), output);
  }

  // optional string incremental_update_metadata_location = 19;
  if (has_incremental_update_metadata_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->incremental_update_metadata_location().data(), static_cast<int>(this->incremental_update_metadata_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.incremental_update_metadata_location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->incremental_update_metadata_location(), output);
  }

  // optional .research_scann.InputOutputConfig.TeamsterConfig teamster = 20;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::teamster(this), output);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::pure_dynamic_config(this), output);
  }

  // optional .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
  if (has_incremental_update_metadata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::incremental_update_metadata(this), output);
  }

  // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->artifacts_naming_option(), output);
  }

  // optional string memory_consumption_estimate_filename = 24;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memory_consumption_estimate_filename().data(), static_cast<int>(this->memory_consumption_estimate_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->memory_consumption_estimate_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.InputOutputConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->in_memory_data_type(), target);
  }

  // optional string database_wildcard = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_wildcard().data(), static_cast<int>(this->database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.database_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->database_wildcard(), target);
  }

  // optional uint64 dimensionality = 4 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->dimensionality(), target);
  }

  // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->norm_type(), target);
  }

  // optional bool non_negative = 6 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->non_negative(), target);
  }

  // optional bool is_dense = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_dense(), target);
  }

  // optional string query_wildcard = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_wildcard().data(), static_cast<int>(this->query_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.query_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->query_wildcard(), target);
  }

  // optional bool saturate = 10 [default = false, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->saturate(), target);
  }

  // optional string output_sstable_wildcard = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_sstable_wildcard().data(), static_cast<int>(this->output_sstable_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.output_sstable_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->output_sstable_wildcard(), target);
  }

  // optional string hashed_database_wildcard = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashed_database_wildcard().data(), static_cast<int>(this->hashed_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.hashed_database_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->hashed_database_wildcard(), target);
  }

  // optional string tokenized_database_wildcard = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenized_database_wildcard().data(), static_cast<int>(this->tokenized_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.tokenized_database_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->tokenized_database_wildcard(), target);
  }

  // optional bool allow_two_pass_read = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->allow_two_pass_read(), target);
  }

  // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::query_preprocessing_function(this), target);
  }

  // optional string fixed_point_database_wildcard = 17;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_point_database_wildcard().data(), static_cast<int>(this->fixed_point_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.fixed_point_database_wildcard");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->fixed_point_database_wildcard(), target);
  }

  // optional string preprocessed_artifacts_dir = 18;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preprocessed_artifacts_dir().data(), static_cast<int>(this->preprocessed_artifacts_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->preprocessed_artifacts_dir(), target);
  }

  // optional string incremental_update_metadata_location = 19;
  if (has_incremental_update_metadata_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->incremental_update_metadata_location().data(), static_cast<int>(this->incremental_update_metadata_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.incremental_update_metadata_location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->incremental_update_metadata_location(), target);
  }

  // optional .research_scann.InputOutputConfig.TeamsterConfig teamster = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::teamster(this), target);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::pure_dynamic_config(this), target);
  }

  // optional .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
  if (has_incremental_update_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::incremental_update_metadata(this), target);
  }

  // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->artifacts_naming_option(), target);
  }

  // optional string memory_consumption_estimate_filename = 24;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memory_consumption_estimate_filename().data(), static_cast<int>(this->memory_consumption_estimate_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        24, this->memory_consumption_estimate_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig)
  return target;
}

size_t InputOutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_wildcard = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->database_wildcard());
    }

    // optional string query_wildcard = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->query_wildcard());
    }

    // optional string output_sstable_wildcard = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->output_sstable_wildcard());
    }

    // optional string hashed_database_wildcard = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hashed_database_wildcard());
    }

    // optional string tokenized_database_wildcard = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tokenized_database_wildcard());
    }

    // optional string fixed_point_database_wildcard = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->fixed_point_database_wildcard());
    }

    // optional string preprocessed_artifacts_dir = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->preprocessed_artifacts_dir());
    }

    // optional string memory_consumption_estimate_filename = 24;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->memory_consumption_estimate_filename());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_preprocessing_function_);
    }

    // optional .research_scann.InputOutputConfig.TeamsterConfig teamster = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teamster_);
    }

    // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pure_dynamic_config_);
    }

    // optional uint64 dimensionality = 4 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dimensionality());
    }

    // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->norm_type());
    }

    // optional bool allow_two_pass_read = 15 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool non_negative = 6 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_dense = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool saturate = 10 [default = false, deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->artifacts_naming_option());
    }

    // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->in_memory_data_type());
    }

  }
  switch (IncrementalUpdateMetadataOneof_case()) {
    // optional string incremental_update_metadata_location = 19;
    case kIncrementalUpdateMetadataLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->incremental_update_metadata_location());
      break;
    }
    // optional .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
    case kIncrementalUpdateMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IncrementalUpdateMetadataOneof_.incremental_update_metadata_);
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputOutputConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.InputOutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InputOutputConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputOutputConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.InputOutputConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.InputOutputConfig)
    MergeFrom(*source);
  }
}

void InputOutputConfig::MergeFrom(const InputOutputConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.database_wildcard_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      query_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_wildcard_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      output_sstable_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_sstable_wildcard_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      hashed_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashed_database_wildcard_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      tokenized_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenized_database_wildcard_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      fixed_point_database_wildcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fixed_point_database_wildcard_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      preprocessed_artifacts_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preprocessed_artifacts_dir_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      memory_consumption_estimate_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memory_consumption_estimate_filename_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_query_preprocessing_function()->::research_scann::InputOutputConfig_PreprocessingFunction::MergeFrom(from.query_preprocessing_function());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_teamster()->::research_scann::InputOutputConfig_TeamsterConfig::MergeFrom(from.teamster());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_pure_dynamic_config()->::research_scann::InputOutputConfig_PureDynamicConfig::MergeFrom(from.pure_dynamic_config());
    }
    if (cached_has_bits & 0x00000800u) {
      dimensionality_ = from.dimensionality_;
    }
    if (cached_has_bits & 0x00001000u) {
      norm_type_ = from.norm_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      allow_two_pass_read_ = from.allow_two_pass_read_;
    }
    if (cached_has_bits & 0x00004000u) {
      non_negative_ = from.non_negative_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_dense_ = from.is_dense_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      saturate_ = from.saturate_;
    }
    if (cached_has_bits & 0x00020000u) {
      artifacts_naming_option_ = from.artifacts_naming_option_;
    }
    if (cached_has_bits & 0x00040000u) {
      in_memory_data_type_ = from.in_memory_data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      set_incremental_update_metadata_location(from.incremental_update_metadata_location());
      break;
    }
    case kIncrementalUpdateMetadata: {
      mutable_incremental_update_metadata()->::research_scann::IncrementalUpdateMetadata::MergeFrom(from.incremental_update_metadata());
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
}

void InputOutputConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.InputOutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOutputConfig::CopyFrom(const InputOutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig::IsInitialized() const {
  return true;
}

void InputOutputConfig::InternalSwap(InputOutputConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  database_wildcard_.Swap(&other->database_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  query_wildcard_.Swap(&other->query_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_sstable_wildcard_.Swap(&other->output_sstable_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_database_wildcard_.Swap(&other->hashed_database_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tokenized_database_wildcard_.Swap(&other->tokenized_database_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fixed_point_database_wildcard_.Swap(&other->fixed_point_database_wildcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preprocessed_artifacts_dir_.Swap(&other->preprocessed_artifacts_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memory_consumption_estimate_filename_.Swap(&other->memory_consumption_estimate_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_preprocessing_function_, other->query_preprocessing_function_);
  swap(teamster_, other->teamster_);
  swap(pure_dynamic_config_, other->pure_dynamic_config_);
  swap(dimensionality_, other->dimensionality_);
  swap(norm_type_, other->norm_type_);
  swap(allow_two_pass_read_, other->allow_two_pass_read_);
  swap(non_negative_, other->non_negative_);
  swap(is_dense_, other->is_dense_);
  swap(saturate_, other->saturate_);
  swap(artifacts_naming_option_, other->artifacts_naming_option_);
  swap(in_memory_data_type_, other->in_memory_data_type_);
  swap(IncrementalUpdateMetadataOneof_, other->IncrementalUpdateMetadataOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig_PureDynamicConfig* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig_PureDynamicConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::InputOutputConfig_PureDynamicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig_TeamsterConfig* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig_TeamsterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::InputOutputConfig_TeamsterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig_PreprocessingFunction* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig_PreprocessingFunction >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::InputOutputConfig_PreprocessingFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::InputOutputConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
