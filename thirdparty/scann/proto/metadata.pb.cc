// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/metadata.proto

#include "scann/proto/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fdistance_5fmeasure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto;
namespace research_scann {
class MetadataConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataConfig> _instance;
  const ::research_scann::SparseIntersectionConfig* sparse_intersection_;
  const ::research_scann::DistanceMeasureConfig* exact_distance_;
  const ::research_scann::UserInfoMetadataConfig* userinfo_;
  const ::research_scann::ClassLabelMetadataConfig* class_label_;
  const ::research_scann::DatabaseVectorMetadataConfig* database_vector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
} _MetadataConfig_default_instance_;
class SparseIntersectionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseIntersectionConfig> _instance;
} _SparseIntersectionConfig_default_instance_;
class SparseIntersectionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseIntersectionResult> _instance;
} _SparseIntersectionResult_default_instance_;
class UserInfoMetadataConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoMetadataConfig> _instance;
} _UserInfoMetadataConfig_default_instance_;
class ClassLabelMetadataConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassLabelMetadataConfig> _instance;
} _ClassLabelMetadataConfig_default_instance_;
class DatabaseVectorMetadataConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseVectorMetadataConfig> _instance;
} _DatabaseVectorMetadataConfig_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_ClassLabelMetadataConfig_default_instance_;
    new (ptr) ::research_scann::ClassLabelMetadataConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::ClassLabelMetadataConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_DatabaseVectorMetadataConfig_default_instance_;
    new (ptr) ::research_scann::DatabaseVectorMetadataConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::DatabaseVectorMetadataConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_MetadataConfig_default_instance_;
    new (ptr) ::research_scann::MetadataConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::MetadataConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto}, {
      &scc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto.base,
      &scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto.base,
      &scc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
      &scc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
      &scc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_SparseIntersectionConfig_default_instance_;
    new (ptr) ::research_scann::SparseIntersectionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::SparseIntersectionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_SparseIntersectionResult_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_SparseIntersectionResult_default_instance_;
    new (ptr) ::research_scann::SparseIntersectionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::SparseIntersectionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseIntersectionResult_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SparseIntersectionResult_scann_2fproto_2fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_UserInfoMetadataConfig_default_instance_;
    new (ptr) ::research_scann::UserInfoMetadataConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::UserInfoMetadataConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fmetadata_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fmetadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, sparse_intersection_),
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, exact_distance_),
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, userinfo_),
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, class_label_),
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, database_vector_),
  offsetof(::research_scann::MetadataConfigDefaultTypeInternal, custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, metadata_type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, max_to_return_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, intersecting_dimension_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, value_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, num_intersecting_dimensions_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, set_user_info_for_query_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::ClassLabelMetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ClassLabelMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, return_database_vector_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::research_scann::MetadataConfig)},
  { 18, 24, sizeof(::research_scann::SparseIntersectionConfig)},
  { 25, 33, sizeof(::research_scann::SparseIntersectionResult)},
  { 36, 42, sizeof(::research_scann::UserInfoMetadataConfig)},
  { 43, 48, sizeof(::research_scann::ClassLabelMetadataConfig)},
  { 48, 54, sizeof(::research_scann::DatabaseVectorMetadataConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_MetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SparseIntersectionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SparseIntersectionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_UserInfoMetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ClassLabelMetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_DatabaseVectorMetadataConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032scann/proto/metadata.proto\022\016research_s"
  "cann\032\"scann/proto/distance_measure.proto"
  "\"\214\003\n\016MetadataConfig\022G\n\023sparse_intersecti"
  "on\030\001 \001(\0132(.research_scann.SparseIntersec"
  "tionConfigH\000\022\?\n\016exact_distance\030\002 \001(\0132%.r"
  "esearch_scann.DistanceMeasureConfigH\000\022:\n"
  "\010userinfo\030\003 \001(\0132&.research_scann.UserInf"
  "oMetadataConfigH\000\022\?\n\013class_label\030\006 \001(\0132("
  ".research_scann.ClassLabelMetadataConfig"
  "H\000\022G\n\017database_vector\030\005 \001(\0132,.research_s"
  "cann.DatabaseVectorMetadataConfigH\000\022\031\n\017c"
  "ustom_metadata\030\004 \001(\014H\000B\017\n\rmetadata_type\""
  "=\n\030SparseIntersectionConfig\022!\n\rmax_to_re"
  "turn\030\001 \001(\r:\n4294967295\"n\n\030SparseIntersec"
  "tionResult\022\036\n\026intersecting_dimension\030\001 \003"
  "(\004\022\r\n\005value\030\002 \003(\001\022#\n\033num_intersecting_di"
  "mensions\030\003 \001(\r\"@\n\026UserInfoMetadataConfig"
  "\022&\n\027set_user_info_for_query\030\001 \001(\010:\005false"
  "\"\032\n\030ClassLabelMetadataConfig\"E\n\034Database"
  "VectorMetadataConfig\022%\n\026return_database_"
  "vector\030\001 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fmetadata_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fdistance_5fmeasure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fmetadata_2eproto_sccs[6] = {
  &scc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
  &scc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
  &scc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
  &scc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto.base,
  &scc_info_SparseIntersectionResult_scann_2fproto_2fmetadata_2eproto.base,
  &scc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fmetadata_2eproto_once;
static bool descriptor_table_scann_2fproto_2fmetadata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fmetadata_2eproto = {
  &descriptor_table_scann_2fproto_2fmetadata_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fmetadata_2eproto, "scann/proto/metadata.proto", 819,
  &descriptor_table_scann_2fproto_2fmetadata_2eproto_once, descriptor_table_scann_2fproto_2fmetadata_2eproto_sccs, descriptor_table_scann_2fproto_2fmetadata_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fmetadata_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fmetadata_2eproto, 6, file_level_enum_descriptors_scann_2fproto_2fmetadata_2eproto, file_level_service_descriptors_scann_2fproto_2fmetadata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fmetadata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fmetadata_2eproto), true);
namespace research_scann {

// ===================================================================

void MetadataConfig::InitAsDefaultInstance() {
  ::research_scann::_MetadataConfig_default_instance_.sparse_intersection_ = const_cast< ::research_scann::SparseIntersectionConfig*>(
      ::research_scann::SparseIntersectionConfig::internal_default_instance());
  ::research_scann::_MetadataConfig_default_instance_.exact_distance_ = const_cast< ::research_scann::DistanceMeasureConfig*>(
      ::research_scann::DistanceMeasureConfig::internal_default_instance());
  ::research_scann::_MetadataConfig_default_instance_.userinfo_ = const_cast< ::research_scann::UserInfoMetadataConfig*>(
      ::research_scann::UserInfoMetadataConfig::internal_default_instance());
  ::research_scann::_MetadataConfig_default_instance_.class_label_ = const_cast< ::research_scann::ClassLabelMetadataConfig*>(
      ::research_scann::ClassLabelMetadataConfig::internal_default_instance());
  ::research_scann::_MetadataConfig_default_instance_.database_vector_ = const_cast< ::research_scann::DatabaseVectorMetadataConfig*>(
      ::research_scann::DatabaseVectorMetadataConfig::internal_default_instance());
  ::research_scann::_MetadataConfig_default_instance_.custom_metadata_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class MetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataConfig>()._has_bits_);
  static const ::research_scann::SparseIntersectionConfig& sparse_intersection(const MetadataConfig* msg);
  static const ::research_scann::DistanceMeasureConfig& exact_distance(const MetadataConfig* msg);
  static const ::research_scann::UserInfoMetadataConfig& userinfo(const MetadataConfig* msg);
  static const ::research_scann::ClassLabelMetadataConfig& class_label(const MetadataConfig* msg);
  static const ::research_scann::DatabaseVectorMetadataConfig& database_vector(const MetadataConfig* msg);
};

const ::research_scann::SparseIntersectionConfig&
MetadataConfig::_Internal::sparse_intersection(const MetadataConfig* msg) {
  return *msg->metadata_type_.sparse_intersection_;
}
const ::research_scann::DistanceMeasureConfig&
MetadataConfig::_Internal::exact_distance(const MetadataConfig* msg) {
  return *msg->metadata_type_.exact_distance_;
}
const ::research_scann::UserInfoMetadataConfig&
MetadataConfig::_Internal::userinfo(const MetadataConfig* msg) {
  return *msg->metadata_type_.userinfo_;
}
const ::research_scann::ClassLabelMetadataConfig&
MetadataConfig::_Internal::class_label(const MetadataConfig* msg) {
  return *msg->metadata_type_.class_label_;
}
const ::research_scann::DatabaseVectorMetadataConfig&
MetadataConfig::_Internal::database_vector(const MetadataConfig* msg) {
  return *msg->metadata_type_.database_vector_;
}
void MetadataConfig::set_allocated_sparse_intersection(::research_scann::SparseIntersectionConfig* sparse_intersection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_metadata_type();
  if (sparse_intersection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sparse_intersection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse_intersection, submessage_arena);
    }
    set_has_sparse_intersection();
    metadata_type_.sparse_intersection_ = sparse_intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.sparse_intersection)
}
void MetadataConfig::set_allocated_exact_distance(::research_scann::DistanceMeasureConfig* exact_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_metadata_type();
  if (exact_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exact_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact_distance, submessage_arena);
    }
    set_has_exact_distance();
    metadata_type_.exact_distance_ = exact_distance;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.exact_distance)
}
void MetadataConfig::clear_exact_distance() {
  if (has_exact_distance()) {
    delete metadata_type_.exact_distance_;
    clear_has_metadata_type();
  }
}
void MetadataConfig::set_allocated_userinfo(::research_scann::UserInfoMetadataConfig* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_metadata_type();
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    set_has_userinfo();
    metadata_type_.userinfo_ = userinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.userinfo)
}
void MetadataConfig::set_allocated_class_label(::research_scann::ClassLabelMetadataConfig* class_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_metadata_type();
  if (class_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_label, submessage_arena);
    }
    set_has_class_label();
    metadata_type_.class_label_ = class_label;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.class_label)
}
void MetadataConfig::set_allocated_database_vector(::research_scann::DatabaseVectorMetadataConfig* database_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_metadata_type();
  if (database_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      database_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_vector, submessage_arena);
    }
    set_has_database_vector();
    metadata_type_.database_vector_ = database_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.database_vector)
}
MetadataConfig::MetadataConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.MetadataConfig)
}
MetadataConfig::MetadataConfig(const MetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_metadata_type();
  switch (from.metadata_type_case()) {
    case kSparseIntersection: {
      mutable_sparse_intersection()->::research_scann::SparseIntersectionConfig::MergeFrom(from.sparse_intersection());
      break;
    }
    case kExactDistance: {
      mutable_exact_distance()->::research_scann::DistanceMeasureConfig::MergeFrom(from.exact_distance());
      break;
    }
    case kUserinfo: {
      mutable_userinfo()->::research_scann::UserInfoMetadataConfig::MergeFrom(from.userinfo());
      break;
    }
    case kClassLabel: {
      mutable_class_label()->::research_scann::ClassLabelMetadataConfig::MergeFrom(from.class_label());
      break;
    }
    case kDatabaseVector: {
      mutable_database_vector()->::research_scann::DatabaseVectorMetadataConfig::MergeFrom(from.database_vector());
      break;
    }
    case kCustomMetadata: {
      set_custom_metadata(from.custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.MetadataConfig)
}

void MetadataConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto.base);
  clear_has_metadata_type();
}

MetadataConfig::~MetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.MetadataConfig)
  SharedDtor();
}

void MetadataConfig::SharedDtor() {
  if (has_metadata_type()) {
    clear_metadata_type();
  }
}

void MetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataConfig& MetadataConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataConfig_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void MetadataConfig::clear_metadata_type() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.MetadataConfig)
  switch (metadata_type_case()) {
    case kSparseIntersection: {
      delete metadata_type_.sparse_intersection_;
      break;
    }
    case kExactDistance: {
      delete metadata_type_.exact_distance_;
      break;
    }
    case kUserinfo: {
      delete metadata_type_.userinfo_;
      break;
    }
    case kClassLabel: {
      delete metadata_type_.class_label_;
      break;
    }
    case kDatabaseVector: {
      delete metadata_type_.database_vector_;
      break;
    }
    case kCustomMetadata: {
      metadata_type_.custom_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METADATA_TYPE_NOT_SET;
}


void MetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.MetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_metadata_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.SparseIntersectionConfig sparse_intersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sparse_intersection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig exact_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exact_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.UserInfoMetadataConfig userinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_userinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes custom_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_database_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ClassLabelMetadataConfig class_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_class_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetadataConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.MetadataConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.SparseIntersectionConfig sparse_intersection = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_intersection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DistanceMeasureConfig exact_distance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exact_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.UserInfoMetadataConfig userinfo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes custom_metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.ClassLabelMetadataConfig class_label = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_class_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.MetadataConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.MetadataConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetadataConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.MetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (metadata_type_case()) {
    case kSparseIntersection:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::sparse_intersection(this), output);
      break;
    case kExactDistance:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::exact_distance(this), output);
      break;
    case kUserinfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::userinfo(this), output);
      break;
    case kCustomMetadata:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        4, this->custom_metadata(), output);
      break;
    case kDatabaseVector:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::database_vector(this), output);
      break;
    case kClassLabel:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::class_label(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.MetadataConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.MetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (metadata_type_case()) {
    case kSparseIntersection:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::sparse_intersection(this), target);
      break;
    case kExactDistance:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::exact_distance(this), target);
      break;
    case kUserinfo:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::userinfo(this), target);
      break;
    case kCustomMetadata:
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
          4, this->custom_metadata(), target);
      break;
    case kDatabaseVector:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::database_vector(this), target);
      break;
    case kClassLabel:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::class_label(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.MetadataConfig)
  return target;
}

size_t MetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.MetadataConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (metadata_type_case()) {
    // optional .research_scann.SparseIntersectionConfig sparse_intersection = 1;
    case kSparseIntersection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.sparse_intersection_);
      break;
    }
    // optional .research_scann.DistanceMeasureConfig exact_distance = 2;
    case kExactDistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.exact_distance_);
      break;
    }
    // optional .research_scann.UserInfoMetadataConfig userinfo = 3;
    case kUserinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.userinfo_);
      break;
    }
    // optional .research_scann.ClassLabelMetadataConfig class_label = 6;
    case kClassLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.class_label_);
      break;
    }
    // optional .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
    case kDatabaseVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.database_vector_);
      break;
    }
    // optional bytes custom_metadata = 4;
    case kCustomMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.MetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.MetadataConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.MetadataConfig)
    MergeFrom(*source);
  }
}

void MetadataConfig::MergeFrom(const MetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.MetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.metadata_type_case()) {
    case kSparseIntersection: {
      mutable_sparse_intersection()->::research_scann::SparseIntersectionConfig::MergeFrom(from.sparse_intersection());
      break;
    }
    case kExactDistance: {
      mutable_exact_distance()->::research_scann::DistanceMeasureConfig::MergeFrom(from.exact_distance());
      break;
    }
    case kUserinfo: {
      mutable_userinfo()->::research_scann::UserInfoMetadataConfig::MergeFrom(from.userinfo());
      break;
    }
    case kClassLabel: {
      mutable_class_label()->::research_scann::ClassLabelMetadataConfig::MergeFrom(from.class_label());
      break;
    }
    case kDatabaseVector: {
      mutable_database_vector()->::research_scann::DatabaseVectorMetadataConfig::MergeFrom(from.database_vector());
      break;
    }
    case kCustomMetadata: {
      set_custom_metadata(from.custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
}

void MetadataConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.MetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataConfig::CopyFrom(const MetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.MetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataConfig::IsInitialized() const {
  return true;
}

void MetadataConfig::InternalSwap(MetadataConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metadata_type_, other->metadata_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparseIntersectionConfig::InitAsDefaultInstance() {
}
class SparseIntersectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseIntersectionConfig>()._has_bits_);
  static void set_has_max_to_return(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseIntersectionConfig::SparseIntersectionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SparseIntersectionConfig)
}
SparseIntersectionConfig::SparseIntersectionConfig(const SparseIntersectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_to_return_ = from.max_to_return_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SparseIntersectionConfig)
}

void SparseIntersectionConfig::SharedCtor() {
  max_to_return_ = 4294967295u;
}

SparseIntersectionConfig::~SparseIntersectionConfig() {
  // @@protoc_insertion_point(destructor:research_scann.SparseIntersectionConfig)
  SharedDtor();
}

void SparseIntersectionConfig::SharedDtor() {
}

void SparseIntersectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseIntersectionConfig& SparseIntersectionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseIntersectionConfig_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void SparseIntersectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SparseIntersectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_to_return_ = 4294967295u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseIntersectionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_to_return = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_to_return(&has_bits);
          max_to_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseIntersectionConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SparseIntersectionConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_to_return = 1 [default = 4294967295];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_max_to_return(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_to_return_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SparseIntersectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SparseIntersectionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseIntersectionConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SparseIntersectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_to_return = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->max_to_return(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SparseIntersectionConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseIntersectionConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SparseIntersectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_to_return = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_to_return(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SparseIntersectionConfig)
  return target;
}

size_t SparseIntersectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SparseIntersectionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_to_return = 1 [default = 4294967295];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_to_return());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseIntersectionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SparseIntersectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseIntersectionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseIntersectionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SparseIntersectionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SparseIntersectionConfig)
    MergeFrom(*source);
  }
}

void SparseIntersectionConfig::MergeFrom(const SparseIntersectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SparseIntersectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_to_return()) {
    set_max_to_return(from.max_to_return());
  }
}

void SparseIntersectionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SparseIntersectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseIntersectionConfig::CopyFrom(const SparseIntersectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SparseIntersectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseIntersectionConfig::IsInitialized() const {
  return true;
}

void SparseIntersectionConfig::InternalSwap(SparseIntersectionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_to_return_, other->max_to_return_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseIntersectionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparseIntersectionResult::InitAsDefaultInstance() {
}
class SparseIntersectionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseIntersectionResult>()._has_bits_);
  static void set_has_num_intersecting_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseIntersectionResult::SparseIntersectionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.SparseIntersectionResult)
}
SparseIntersectionResult::SparseIntersectionResult(const SparseIntersectionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      intersecting_dimension_(from.intersecting_dimension_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_intersecting_dimensions_ = from.num_intersecting_dimensions_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SparseIntersectionResult)
}

void SparseIntersectionResult::SharedCtor() {
  num_intersecting_dimensions_ = 0u;
}

SparseIntersectionResult::~SparseIntersectionResult() {
  // @@protoc_insertion_point(destructor:research_scann.SparseIntersectionResult)
  SharedDtor();
}

void SparseIntersectionResult::SharedDtor() {
}

void SparseIntersectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseIntersectionResult& SparseIntersectionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseIntersectionResult_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void SparseIntersectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SparseIntersectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersecting_dimension_.Clear();
  value_.Clear();
  num_intersecting_dimensions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseIntersectionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 intersecting_dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_intersecting_dimension(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 17);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_intersecting_dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_intersecting_dimensions(&has_bits);
          num_intersecting_dimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseIntersectionResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.SparseIntersectionResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 intersecting_dimension = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_intersecting_dimension())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_intersecting_dimension())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_intersecting_dimensions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_intersecting_dimensions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_intersecting_dimensions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.SparseIntersectionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.SparseIntersectionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseIntersectionResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.SparseIntersectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 intersecting_dimension = 1;
  for (int i = 0, n = this->intersecting_dimension_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      1, this->intersecting_dimension(i), output);
  }

  // repeated double value = 2;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      2, this->value(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_intersecting_dimensions = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->num_intersecting_dimensions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.SparseIntersectionResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseIntersectionResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SparseIntersectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 intersecting_dimension = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->intersecting_dimension_, target);

  // repeated double value = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteDoubleToArray(2, this->value_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_intersecting_dimensions = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_intersecting_dimensions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SparseIntersectionResult)
  return target;
}

size_t SparseIntersectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SparseIntersectionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 intersecting_dimension = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->intersecting_dimension_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->intersecting_dimension_size());
    total_size += data_size;
  }

  // repeated double value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  // optional uint32 num_intersecting_dimensions = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_intersecting_dimensions());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseIntersectionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.SparseIntersectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseIntersectionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseIntersectionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.SparseIntersectionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.SparseIntersectionResult)
    MergeFrom(*source);
  }
}

void SparseIntersectionResult::MergeFrom(const SparseIntersectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SparseIntersectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersecting_dimension_.MergeFrom(from.intersecting_dimension_);
  value_.MergeFrom(from.value_);
  if (from.has_num_intersecting_dimensions()) {
    set_num_intersecting_dimensions(from.num_intersecting_dimensions());
  }
}

void SparseIntersectionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.SparseIntersectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseIntersectionResult::CopyFrom(const SparseIntersectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SparseIntersectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseIntersectionResult::IsInitialized() const {
  return true;
}

void SparseIntersectionResult::InternalSwap(SparseIntersectionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intersecting_dimension_.InternalSwap(&other->intersecting_dimension_);
  value_.InternalSwap(&other->value_);
  swap(num_intersecting_dimensions_, other->num_intersecting_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseIntersectionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoMetadataConfig::InitAsDefaultInstance() {
}
class UserInfoMetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfoMetadataConfig>()._has_bits_);
  static void set_has_set_user_info_for_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserInfoMetadataConfig::UserInfoMetadataConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.UserInfoMetadataConfig)
}
UserInfoMetadataConfig::UserInfoMetadataConfig(const UserInfoMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_user_info_for_query_ = from.set_user_info_for_query_;
  // @@protoc_insertion_point(copy_constructor:research_scann.UserInfoMetadataConfig)
}

void UserInfoMetadataConfig::SharedCtor() {
  set_user_info_for_query_ = false;
}

UserInfoMetadataConfig::~UserInfoMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.UserInfoMetadataConfig)
  SharedDtor();
}

void UserInfoMetadataConfig::SharedDtor() {
}

void UserInfoMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoMetadataConfig& UserInfoMetadataConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoMetadataConfig_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void UserInfoMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.UserInfoMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_user_info_for_query_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserInfoMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool set_user_info_for_query = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_set_user_info_for_query(&has_bits);
          set_user_info_for_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserInfoMetadataConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.UserInfoMetadataConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_user_info_for_query = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_set_user_info_for_query(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_user_info_for_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.UserInfoMetadataConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.UserInfoMetadataConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserInfoMetadataConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.UserInfoMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_user_info_for_query = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->set_user_info_for_query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.UserInfoMetadataConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoMetadataConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.UserInfoMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_user_info_for_query = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->set_user_info_for_query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.UserInfoMetadataConfig)
  return target;
}

size_t UserInfoMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.UserInfoMetadataConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool set_user_info_for_query = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoMetadataConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.UserInfoMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoMetadataConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoMetadataConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.UserInfoMetadataConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.UserInfoMetadataConfig)
    MergeFrom(*source);
  }
}

void UserInfoMetadataConfig::MergeFrom(const UserInfoMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.UserInfoMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_user_info_for_query()) {
    set_set_user_info_for_query(from.set_user_info_for_query());
  }
}

void UserInfoMetadataConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.UserInfoMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoMetadataConfig::CopyFrom(const UserInfoMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.UserInfoMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoMetadataConfig::IsInitialized() const {
  return true;
}

void UserInfoMetadataConfig::InternalSwap(UserInfoMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(set_user_info_for_query_, other->set_user_info_for_query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoMetadataConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassLabelMetadataConfig::InitAsDefaultInstance() {
}
class ClassLabelMetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassLabelMetadataConfig>()._has_bits_);
};

ClassLabelMetadataConfig::ClassLabelMetadataConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.ClassLabelMetadataConfig)
}
ClassLabelMetadataConfig::ClassLabelMetadataConfig(const ClassLabelMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.ClassLabelMetadataConfig)
}

void ClassLabelMetadataConfig::SharedCtor() {
}

ClassLabelMetadataConfig::~ClassLabelMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.ClassLabelMetadataConfig)
  SharedDtor();
}

void ClassLabelMetadataConfig::SharedDtor() {
}

void ClassLabelMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassLabelMetadataConfig& ClassLabelMetadataConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassLabelMetadataConfig_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void ClassLabelMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ClassLabelMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassLabelMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassLabelMetadataConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.ClassLabelMetadataConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.ClassLabelMetadataConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.ClassLabelMetadataConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassLabelMetadataConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.ClassLabelMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.ClassLabelMetadataConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassLabelMetadataConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ClassLabelMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ClassLabelMetadataConfig)
  return target;
}

size_t ClassLabelMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ClassLabelMetadataConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassLabelMetadataConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.ClassLabelMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassLabelMetadataConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassLabelMetadataConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.ClassLabelMetadataConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.ClassLabelMetadataConfig)
    MergeFrom(*source);
  }
}

void ClassLabelMetadataConfig::MergeFrom(const ClassLabelMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ClassLabelMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClassLabelMetadataConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.ClassLabelMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassLabelMetadataConfig::CopyFrom(const ClassLabelMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ClassLabelMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassLabelMetadataConfig::IsInitialized() const {
  return true;
}

void ClassLabelMetadataConfig::InternalSwap(ClassLabelMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassLabelMetadataConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatabaseVectorMetadataConfig::InitAsDefaultInstance() {
}
class DatabaseVectorMetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseVectorMetadataConfig>()._has_bits_);
  static void set_has_return_database_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DatabaseVectorMetadataConfig::DatabaseVectorMetadataConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.DatabaseVectorMetadataConfig)
}
DatabaseVectorMetadataConfig::DatabaseVectorMetadataConfig(const DatabaseVectorMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_database_vector_ = from.return_database_vector_;
  // @@protoc_insertion_point(copy_constructor:research_scann.DatabaseVectorMetadataConfig)
}

void DatabaseVectorMetadataConfig::SharedCtor() {
  return_database_vector_ = false;
}

DatabaseVectorMetadataConfig::~DatabaseVectorMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.DatabaseVectorMetadataConfig)
  SharedDtor();
}

void DatabaseVectorMetadataConfig::SharedDtor() {
}

void DatabaseVectorMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseVectorMetadataConfig& DatabaseVectorMetadataConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseVectorMetadataConfig_scann_2fproto_2fmetadata_2eproto.base);
  return *internal_default_instance();
}


void DatabaseVectorMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.DatabaseVectorMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_database_vector_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseVectorMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool return_database_vector = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_return_database_vector(&has_bits);
          return_database_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseVectorMetadataConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.DatabaseVectorMetadataConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool return_database_vector = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_return_database_vector(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_database_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.DatabaseVectorMetadataConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.DatabaseVectorMetadataConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseVectorMetadataConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.DatabaseVectorMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool return_database_vector = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->return_database_vector(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.DatabaseVectorMetadataConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseVectorMetadataConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.DatabaseVectorMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool return_database_vector = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->return_database_vector(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.DatabaseVectorMetadataConfig)
  return target;
}

size_t DatabaseVectorMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.DatabaseVectorMetadataConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool return_database_vector = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseVectorMetadataConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.DatabaseVectorMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseVectorMetadataConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatabaseVectorMetadataConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.DatabaseVectorMetadataConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.DatabaseVectorMetadataConfig)
    MergeFrom(*source);
  }
}

void DatabaseVectorMetadataConfig::MergeFrom(const DatabaseVectorMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.DatabaseVectorMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_return_database_vector()) {
    set_return_database_vector(from.return_database_vector());
  }
}

void DatabaseVectorMetadataConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.DatabaseVectorMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseVectorMetadataConfig::CopyFrom(const DatabaseVectorMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.DatabaseVectorMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseVectorMetadataConfig::IsInitialized() const {
  return true;
}

void DatabaseVectorMetadataConfig::InternalSwap(DatabaseVectorMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(return_database_vector_, other->return_database_vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatabaseVectorMetadataConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::MetadataConfig* Arena::CreateMaybeMessage< ::research_scann::MetadataConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::MetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SparseIntersectionConfig* Arena::CreateMaybeMessage< ::research_scann::SparseIntersectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SparseIntersectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SparseIntersectionResult* Arena::CreateMaybeMessage< ::research_scann::SparseIntersectionResult >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::SparseIntersectionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::UserInfoMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::UserInfoMetadataConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::UserInfoMetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::ClassLabelMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::ClassLabelMetadataConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::ClassLabelMetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::DatabaseVectorMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::DatabaseVectorMetadataConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::DatabaseVectorMetadataConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
