// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/partitioning.proto

#include "scann/proto/partitioning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fpartitioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fdistance_5fmeasure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fexact_5freordering_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2finput_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fpartitioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fpartitioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fpartitioning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto;
namespace research_scann {
class PartitioningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartitioningConfig> _instance;
  float partitioning_sampling_fraction_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_sample_size_;
} _PartitioningConfig_default_instance_;
class DatabaseSpillingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseSpillingConfig> _instance;
} _DatabaseSpillingConfig_default_instance_;
class QuerySpillingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuerySpillingConfig> _instance;
} _QuerySpillingConfig_default_instance_;
class TreeXHybridPartitioningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeXHybridPartitioningConfig> _instance;
} _TreeXHybridPartitioningConfig_default_instance_;
class TokenListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenList> _instance;
} _TokenList_default_instance_;
class HierarchicalPartitionerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HierarchicalPartitionerConfig> _instance;
} _HierarchicalPartitionerConfig_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_DatabaseSpillingConfig_default_instance_;
    new (ptr) ::research_scann::DatabaseSpillingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::DatabaseSpillingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto}, {}};

static void InitDefaultsscc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_HierarchicalPartitionerConfig_default_instance_;
    new (ptr) ::research_scann::HierarchicalPartitionerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::HierarchicalPartitionerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto}, {
      &scc_info_InputOutputConfig_scann_2fproto_2finput_5foutput_2eproto.base,
      &scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base,}};

static void InitDefaultsscc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.DefaultConstruct();
  *::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get_mutable() = std::string("PartitionReshard", 16);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get_mutable());
  {
    void* ptr = &::research_scann::_PartitioningConfig_default_instance_;
    new (ptr) ::research_scann::PartitioningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::PartitioningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto}, {
      &scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base,
      &scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto.base,
      &scc_info_DistanceMeasureConfig_scann_2fproto_2fdistance_5fmeasure_2eproto.base,
      &scc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto.base,
      &scc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto.base,}};

static void InitDefaultsscc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_QuerySpillingConfig_default_instance_;
    new (ptr) ::research_scann::QuerySpillingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::QuerySpillingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto}, {}};

static void InitDefaultsscc_info_TokenList_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_TokenList_default_instance_;
    new (ptr) ::research_scann::TokenList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::TokenList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenList_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TokenList_scann_2fproto_2fpartitioning_2eproto}, {}};

static void InitDefaultsscc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_TreeXHybridPartitioningConfig_default_instance_;
    new (ptr) ::research_scann::TreeXHybridPartitioningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::TreeXHybridPartitioningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto}, {
      &scc_info_ExactReordering_scann_2fproto_2fexact_5freordering_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fpartitioning_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fpartitioning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fpartitioning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, tree_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, tree_x_hybrid_),
  offsetof(::research_scann::PartitioningConfigDefaultTypeInternal, partitioning_sampling_fraction_),
  offsetof(::research_scann::PartitioningConfigDefaultTypeInternal, expected_sample_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, partitioner_prefix_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_num_levels_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_leaf_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, clustering_seed_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, projection_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_children_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, partitioning_distance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, database_tokenization_distance_override_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, query_tokenization_distance_override_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, query_tokenization_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, database_tokenization_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_clustering_iterations_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_mini_batches_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, clustering_convergence_tolerance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, min_cluster_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_cluster_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, perturbation_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, partitioning_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, balancing_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, single_machine_center_initialization_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, database_spilling_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, query_spilling_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, resharded_prefix_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_partitioning_epochs_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, mr_jobname_prefix_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, cell_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_cpus_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_mapper_machines_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, ram_gb_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, disk_gb_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, trainer_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, trainer_stats_prefix_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_power_of_2_split_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, num_top_tokens_for_pca_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, pca_splitting_similarity_threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, desired_average_cluster_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, compute_residual_stdev_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, residual_stdev_min_value_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, avq_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, use_float_centers_for_query_tokenization_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, partitioning_on_the_fly_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, use_flume_kmeans_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, max_sample_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::PartitioningConfig, SamplingFractionOrExpectedSize_),
  14,
  11,
  ~0u,
  ~0u,
  0,
  25,
  30,
  13,
  6,
  26,
  5,
  9,
  10,
  34,
  35,
  27,
  39,
  28,
  29,
  22,
  21,
  12,
  19,
  23,
  7,
  8,
  2,
  24,
  1,
  3,
  33,
  36,
  31,
  32,
  20,
  4,
  40,
  41,
  42,
  38,
  15,
  44,
  43,
  16,
  17,
  18,
  37,
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseSpillingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseSpillingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseSpillingConfig, spilling_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseSpillingConfig, replication_factor_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseSpillingConfig, max_spill_centers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::research_scann::QuerySpillingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::QuerySpillingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::QuerySpillingConfig, spilling_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::QuerySpillingConfig, spilling_threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::QuerySpillingConfig, max_spill_centers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioning_children_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioner_spilling_ratio_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioner_query_tokenization_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioner_database_tokenization_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioner_training_tokenization_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, top_partitioner_use_flume_trainer_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, assets_dir_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, query_tokenization_reordering_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, training_reordering_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TreeXHybridPartitioningConfig, database_tokenization_reordering_),
  4,
  6,
  7,
  8,
  9,
  5,
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenList, id_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenList, datapoint_index_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::HierarchicalPartitionerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::HierarchicalPartitionerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::HierarchicalPartitionerConfig, input_output_),
  PROTOBUF_FIELD_OFFSET(::research_scann::HierarchicalPartitionerConfig, partitioning_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 53, sizeof(::research_scann::PartitioningConfig)},
  { 100, 108, sizeof(::research_scann::DatabaseSpillingConfig)},
  { 111, 119, sizeof(::research_scann::QuerySpillingConfig)},
  { 122, 137, sizeof(::research_scann::TreeXHybridPartitioningConfig)},
  { 147, 154, sizeof(::research_scann::TokenList)},
  { 156, 163, sizeof(::research_scann::HierarchicalPartitionerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_PartitioningConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_DatabaseSpillingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_QuerySpillingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_TreeXHybridPartitioningConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_TokenList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_HierarchicalPartitionerConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fpartitioning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036scann/proto/partitioning.proto\022\016resear"
  "ch_scann\032\"scann/proto/distance_measure.p"
  "roto\032\"scann/proto/exact_reordering.proto"
  "\032\036scann/proto/input_output.proto\032\034scann/"
  "proto/projection.proto\"\341\026\n\022PartitioningC"
  "onfig\022K\n\ttree_type\030\037 \001(\0162+.research_scan"
  "n.PartitioningConfig.TreeType:\013KMEANS_TR"
  "EE\022D\n\rtree_x_hybrid\030. \001(\0132-.research_sca"
  "nn.TreeXHybridPartitioningConfig\022+\n\036part"
  "itioning_sampling_fraction\030\004 \001(\002:\0011H\000\022\036\n"
  "\024expected_sample_size\030- \001(\005H\000\022\032\n\022partiti"
  "oner_prefix\030\010 \001(\t\022\031\n\016max_num_levels\030\002 \001("
  "\005:\0011\022\030\n\rmax_leaf_size\030\013 \001(\005:\0011\022\032\n\017cluste"
  "ring_seed\030\033 \001(\005:\0010\0224\n\nprojection\030\014 \001(\0132 "
  ".research_scann.ProjectionConfig\022\027\n\014num_"
  "children\030\003 \001(\005:\0012\022D\n\025partitioning_distan"
  "ce\030\n \001(\0132%.research_scann.DistanceMeasur"
  "eConfig\022V\n\'database_tokenization_distanc"
  "e_override\030\030 \001(\0132%.research_scann.Distan"
  "ceMeasureConfig\022S\n$query_tokenization_di"
  "stance_override\030\031 \001(\0132%.research_scann.D"
  "istanceMeasureConfig\022[\n\027query_tokenizati"
  "on_type\030\034 \001(\01623.research_scann.Partition"
  "ingConfig.TokenizationType:\005FLOAT\022^\n\032dat"
  "abase_tokenization_type\030\035 \001(\01623.research"
  "_scann.PartitioningConfig.TokenizationTy"
  "pe:\005FLOAT\022%\n\031max_clustering_iterations\030\006"
  " \001(\005:\00210\022\033\n\020num_mini_batches\030& \001(\005:\0011\022/\n"
  " clustering_convergence_tolerance\030\007 \001(\002:"
  "\0051e-05\022\033\n\020min_cluster_size\030\t \001(\002:\0011\022\030\n\020m"
  "ax_cluster_size\030( \001(\005\022\024\n\014perturbation\030) "
  "\001(\001\022W\n\021partitioning_type\030\027 \001(\01623.researc"
  "h_scann.PartitioningConfig.PartitioningT"
  "ype:\007GENERIC\022\\\n\016balancing_type\030# \001(\01620.r"
  "esearch_scann.PartitioningConfig.Balanci"
  "ngType:\022DEFAULT_UNBALANCED\022\220\001\n$single_ma"
  "chine_center_initialization\0301 \001(\0162H.rese"
  "arch_scann.PartitioningConfig.SingleMach"
  "ineCenterInitializationType:\030DEFAULT_KME"
  "ANS_PLUS_PLUS\022A\n\021database_spilling\030\024 \001(\013"
  "2&.research_scann.DatabaseSpillingConfig"
  "\022;\n\016query_spilling\030\025 \001(\0132#.research_scan"
  "n.QuerySpillingConfig\022\030\n\020resharded_prefi"
  "x\030\016 \001(\t\022\"\n\027num_partitioning_epochs\030\001 \001(\005"
  ":\0011\022+\n\021mr_jobname_prefix\030\r \001(\t:\020Partitio"
  "nReshard\022\014\n\004cell\030\017 \001(\t\022\023\n\010num_cpus\030\023 \001(\005"
  ":\0011\022\037\n\023num_mapper_machines\030\036 \001(\005:\002-1\022\021\n\006"
  "ram_gb\030\020 \001(\005:\0014\022\022\n\007disk_gb\030\021 \001(\005:\0011\022i\n\014t"
  "rainer_type\030$ \001(\01629.research_scann.Parti"
  "tioningConfig.PartitionerTrainerType:\030DE"
  "FAULT_SAMPLING_TRAINER\022\034\n\024trainer_stats_"
  "prefix\030% \001(\t\022\037\n\024max_power_of_2_split\030\' \001"
  "(\005:\0012\022\"\n\026num_top_tokens_for_pca\030* \001(\005:\0022"
  "0\0221\n\"pca_splitting_similarity_threshold\030"
  "+ \001(\002:\0051e-05\022*\n\034desired_average_cluster_"
  "size\030\" \001(\005:\0043000\022%\n\026compute_residual_std"
  "ev\030/ \001(\010:\005false\022\'\n\030residual_stdev_min_va"
  "lue\0300 \001(\001:\0051e-05\022\020\n\003avq\0303 \001(\002:\003nan\022;\n(us"
  "e_float_centers_for_query_tokenization\030\032"
  " \001(\010:\005falseB\002\030\001\022*\n\027partitioning_on_the_f"
  "ly\030\026 \001(\010:\005falseB\002\030\001\022#\n\020use_flume_kmeans\030"
  "  \001(\010:\005falseB\002\030\001\022\'\n\017max_sample_size\030! \001("
  "\005:\n2147483647B\002\030\001\"s\n\010TreeType\022\017\n\013KMEANS_"
  "TREE\020\000\022\014\n\010PCA_TREE\020\001\022\032\n\026RANDOM_PROJECTIO"
  "N_TREE\020\002\022\r\n\tBALL_TREE\020\003\022\n\n\006RANDOM\020\004\022\021\n\rT"
  "REE_X_HYBRID\020\005\"I\n\020TokenizationType\022\t\n\005FL"
  "OAT\020\001\022\024\n\020FIXED_POINT_INT8\020\002\022\016\n\nASYMMETRI"
  "C\020\003\"\004\010\000\020\000\".\n\020PartitioningType\022\013\n\007GENERIC"
  "\020\000\022\r\n\tSPHERICAL\020\001\"<\n\rBalancingType\022\026\n\022DE"
  "FAULT_UNBALANCED\020\000\022\023\n\017GREEDY_BALANCED\020\001\""
  "`\n%SingleMachineCenterInitializationType"
  "\022\034\n\030DEFAULT_KMEANS_PLUS_PLUS\020\000\022\031\n\025RANDOM"
  "_INITIALIZATION\020\001\"\211\001\n\026PartitionerTrainer"
  "Type\022\034\n\030DEFAULT_SAMPLING_TRAINER\020\000\022\030\n\024FL"
  "UME_KMEANS_TRAINER\020\001\022\026\n\022PCA_KMEANS_TRAIN"
  "ER\020\003\022\037\n\033SAMPLING_PCA_KMEANS_TRAINER\020\004B \n"
  "\036SamplingFractionOrExpectedSizeJ\004\010,\020-R\023k"
  "means_flume_config\"\224\002\n\026DatabaseSpillingC"
  "onfig\022W\n\rspilling_type\030\001 \001(\01623.research_"
  "scann.DatabaseSpillingConfig.SpillingTyp"
  "e:\013NO_SPILLING\022\032\n\022replication_factor\030\002 \001"
  "(\002\022%\n\021max_spill_centers\030\003 \001(\r:\n429496729"
  "5\"^\n\014SpillingType\022\017\n\013NO_SPILLING\020\000\022\022\n\016MU"
  "LTIPLICATIVE\020\001\022\014\n\010ADDITIVE\020\002\022\033\n\027FIXED_NU"
  "MBER_OF_CENTERS\020\003\"\245\002\n\023QuerySpillingConfi"
  "g\022T\n\rspilling_type\030\001 \001(\01620.research_scan"
  "n.QuerySpillingConfig.SpillingType:\013NO_S"
  "PILLING\022\032\n\022spilling_threshold\030\002 \001(\002\022%\n\021m"
  "ax_spill_centers\030\003 \001(\r:\n4294967295\"u\n\014Sp"
  "illingType\022\017\n\013NO_SPILLING\020\000\022\022\n\016MULTIPLIC"
  "ATIVE\020\001\022\014\n\010ADDITIVE\020\002\022\025\n\021ABSOLUTE_DISTAN"
  "CE\020\003\022\033\n\027FIXED_NUMBER_OF_CENTERS\020\004\"\334\005\n\035Tr"
  "eeXHybridPartitioningConfig\022!\n\031top_parti"
  "tioning_children\030\001 \001(\r\022,\n\036top_partitione"
  "r_spilling_ratio\030\002 \001(\002:\0040.05\022k\n\'top_part"
  "itioner_query_tokenization_type\030\007 \001(\01623."
  "research_scann.PartitioningConfig.Tokeni"
  "zationType:\005FLOAT\022n\n*top_partitioner_dat"
  "abase_tokenization_type\030\010 \001(\01623.research"
  "_scann.PartitioningConfig.TokenizationTy"
  "pe:\005FLOAT\022n\n*top_partitioner_training_to"
  "kenization_type\030\n \001(\01623.research_scann.P"
  "artitioningConfig.TokenizationType:\005FLOA"
  "T\0220\n!top_partitioner_use_flume_trainer\030\t"
  " \001(\010:\005false\022\022\n\nassets_dir\030\003 \001(\t\022F\n\035query"
  "_tokenization_reordering\030\006 \001(\0132\037.researc"
  "h_scann.ExactReordering\022@\n\023training_reor"
  "dering\030\004 \001(\0132\037.research_scann.ExactReord"
  "eringB\002\030\001\022M\n database_tokenization_reord"
  "ering\030\005 \001(\0132\037.research_scann.ExactReorde"
  "ringB\002\030\001\"0\n\tTokenList\022\n\n\002id\030\001 \001(\004\022\027\n\017dat"
  "apoint_index\030\002 \003(\003\"\222\001\n\035HierarchicalParti"
  "tionerConfig\0227\n\014input_output\030\001 \001(\0132!.res"
  "earch_scann.InputOutputConfig\0228\n\014partiti"
  "oning\030\002 \003(\0132\".research_scann.Partitionin"
  "gConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fpartitioning_2eproto_deps[4] = {
  &::descriptor_table_scann_2fproto_2fdistance_5fmeasure_2eproto,
  &::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto,
  &::descriptor_table_scann_2fproto_2finput_5foutput_2eproto,
  &::descriptor_table_scann_2fproto_2fprojection_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fpartitioning_2eproto_sccs[6] = {
  &scc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto.base,
  &scc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto.base,
  &scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base,
  &scc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto.base,
  &scc_info_TokenList_scann_2fproto_2fpartitioning_2eproto.base,
  &scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fpartitioning_2eproto_once;
static bool descriptor_table_scann_2fproto_2fpartitioning_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fpartitioning_2eproto = {
  &descriptor_table_scann_2fproto_2fpartitioning_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fpartitioning_2eproto, "scann/proto/partitioning.proto", 4607,
  &descriptor_table_scann_2fproto_2fpartitioning_2eproto_once, descriptor_table_scann_2fproto_2fpartitioning_2eproto_sccs, descriptor_table_scann_2fproto_2fpartitioning_2eproto_deps, 6, 4,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fpartitioning_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fpartitioning_2eproto, 6, file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto, file_level_service_descriptors_scann_2fproto_2fpartitioning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fpartitioning_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto), true);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_TreeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[0];
}
bool PartitioningConfig_TreeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_TreeType PartitioningConfig::KMEANS_TREE;
constexpr PartitioningConfig_TreeType PartitioningConfig::PCA_TREE;
constexpr PartitioningConfig_TreeType PartitioningConfig::RANDOM_PROJECTION_TREE;
constexpr PartitioningConfig_TreeType PartitioningConfig::BALL_TREE;
constexpr PartitioningConfig_TreeType PartitioningConfig::RANDOM;
constexpr PartitioningConfig_TreeType PartitioningConfig::TREE_X_HYBRID;
constexpr PartitioningConfig_TreeType PartitioningConfig::TreeType_MIN;
constexpr PartitioningConfig_TreeType PartitioningConfig::TreeType_MAX;
constexpr int PartitioningConfig::TreeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_TokenizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[1];
}
bool PartitioningConfig_TokenizationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_TokenizationType PartitioningConfig::FLOAT;
constexpr PartitioningConfig_TokenizationType PartitioningConfig::FIXED_POINT_INT8;
constexpr PartitioningConfig_TokenizationType PartitioningConfig::ASYMMETRIC;
constexpr PartitioningConfig_TokenizationType PartitioningConfig::TokenizationType_MIN;
constexpr PartitioningConfig_TokenizationType PartitioningConfig::TokenizationType_MAX;
constexpr int PartitioningConfig::TokenizationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_PartitioningType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[2];
}
bool PartitioningConfig_PartitioningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_PartitioningType PartitioningConfig::GENERIC;
constexpr PartitioningConfig_PartitioningType PartitioningConfig::SPHERICAL;
constexpr PartitioningConfig_PartitioningType PartitioningConfig::PartitioningType_MIN;
constexpr PartitioningConfig_PartitioningType PartitioningConfig::PartitioningType_MAX;
constexpr int PartitioningConfig::PartitioningType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_BalancingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[3];
}
bool PartitioningConfig_BalancingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_BalancingType PartitioningConfig::DEFAULT_UNBALANCED;
constexpr PartitioningConfig_BalancingType PartitioningConfig::GREEDY_BALANCED;
constexpr PartitioningConfig_BalancingType PartitioningConfig::BalancingType_MIN;
constexpr PartitioningConfig_BalancingType PartitioningConfig::BalancingType_MAX;
constexpr int PartitioningConfig::BalancingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_SingleMachineCenterInitializationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[4];
}
bool PartitioningConfig_SingleMachineCenterInitializationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_SingleMachineCenterInitializationType PartitioningConfig::DEFAULT_KMEANS_PLUS_PLUS;
constexpr PartitioningConfig_SingleMachineCenterInitializationType PartitioningConfig::RANDOM_INITIALIZATION;
constexpr PartitioningConfig_SingleMachineCenterInitializationType PartitioningConfig::SingleMachineCenterInitializationType_MIN;
constexpr PartitioningConfig_SingleMachineCenterInitializationType PartitioningConfig::SingleMachineCenterInitializationType_MAX;
constexpr int PartitioningConfig::SingleMachineCenterInitializationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitioningConfig_PartitionerTrainerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[5];
}
bool PartitioningConfig_PartitionerTrainerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::DEFAULT_SAMPLING_TRAINER;
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::FLUME_KMEANS_TRAINER;
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::PCA_KMEANS_TRAINER;
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::SAMPLING_PCA_KMEANS_TRAINER;
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::PartitionerTrainerType_MIN;
constexpr PartitioningConfig_PartitionerTrainerType PartitioningConfig::PartitionerTrainerType_MAX;
constexpr int PartitioningConfig::PartitionerTrainerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatabaseSpillingConfig_SpillingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[6];
}
bool DatabaseSpillingConfig_SpillingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::NO_SPILLING;
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::MULTIPLICATIVE;
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::ADDITIVE;
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::FIXED_NUMBER_OF_CENTERS;
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::SpillingType_MIN;
constexpr DatabaseSpillingConfig_SpillingType DatabaseSpillingConfig::SpillingType_MAX;
constexpr int DatabaseSpillingConfig::SpillingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuerySpillingConfig_SpillingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fpartitioning_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fpartitioning_2eproto[7];
}
bool QuerySpillingConfig_SpillingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::NO_SPILLING;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::MULTIPLICATIVE;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::ADDITIVE;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::ABSOLUTE_DISTANCE;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::FIXED_NUMBER_OF_CENTERS;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::SpillingType_MIN;
constexpr QuerySpillingConfig_SpillingType QuerySpillingConfig::SpillingType_MAX;
constexpr int QuerySpillingConfig::SpillingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PartitioningConfig::InitAsDefaultInstance() {
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->tree_x_hybrid_ = const_cast< ::research_scann::TreeXHybridPartitioningConfig*>(
      ::research_scann::TreeXHybridPartitioningConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_.partitioning_sampling_fraction_ = 1;
  ::research_scann::_PartitioningConfig_default_instance_.expected_sample_size_ = 0;
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->projection_ = const_cast< ::research_scann::ProjectionConfig*>(
      ::research_scann::ProjectionConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->partitioning_distance_ = const_cast< ::research_scann::DistanceMeasureConfig*>(
      ::research_scann::DistanceMeasureConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->database_tokenization_distance_override_ = const_cast< ::research_scann::DistanceMeasureConfig*>(
      ::research_scann::DistanceMeasureConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->query_tokenization_distance_override_ = const_cast< ::research_scann::DistanceMeasureConfig*>(
      ::research_scann::DistanceMeasureConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->database_spilling_ = const_cast< ::research_scann::DatabaseSpillingConfig*>(
      ::research_scann::DatabaseSpillingConfig::internal_default_instance());
  ::research_scann::_PartitioningConfig_default_instance_._instance.get_mutable()->query_spilling_ = const_cast< ::research_scann::QuerySpillingConfig*>(
      ::research_scann::QuerySpillingConfig::internal_default_instance());
}
class PartitioningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PartitioningConfig>()._has_bits_);
  static void set_has_tree_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::research_scann::TreeXHybridPartitioningConfig& tree_x_hybrid(const PartitioningConfig* msg);
  static void set_has_tree_x_hybrid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_partitioner_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_num_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_leaf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_clustering_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::research_scann::ProjectionConfig& projection(const PartitioningConfig* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_children(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::research_scann::DistanceMeasureConfig& partitioning_distance(const PartitioningConfig* msg);
  static void set_has_partitioning_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::research_scann::DistanceMeasureConfig& database_tokenization_distance_override(const PartitioningConfig* msg);
  static void set_has_database_tokenization_distance_override(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::research_scann::DistanceMeasureConfig& query_tokenization_distance_override(const PartitioningConfig* msg);
  static void set_has_query_tokenization_distance_override(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_query_tokenization_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_database_tokenization_type(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_max_clustering_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_num_mini_batches(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_clustering_convergence_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_min_cluster_size(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_cluster_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_perturbation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_partitioning_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_balancing_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_single_machine_center_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::research_scann::DatabaseSpillingConfig& database_spilling(const PartitioningConfig* msg);
  static void set_has_database_spilling(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::research_scann::QuerySpillingConfig& query_spilling(const PartitioningConfig* msg);
  static void set_has_query_spilling(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_resharded_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_partitioning_epochs(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mr_jobname_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_cpus(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_num_mapper_machines(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ram_gb(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_disk_gb(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_trainer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_trainer_stats_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_power_of_2_split(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_num_top_tokens_for_pca(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_pca_splitting_similarity_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_desired_average_cluster_size(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_compute_residual_stdev(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_residual_stdev_min_value(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_avq(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_use_float_centers_for_query_tokenization(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_partitioning_on_the_fly(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_use_flume_kmeans(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_sample_size(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
};

const ::research_scann::TreeXHybridPartitioningConfig&
PartitioningConfig::_Internal::tree_x_hybrid(const PartitioningConfig* msg) {
  return *msg->tree_x_hybrid_;
}
const ::research_scann::ProjectionConfig&
PartitioningConfig::_Internal::projection(const PartitioningConfig* msg) {
  return *msg->projection_;
}
const ::research_scann::DistanceMeasureConfig&
PartitioningConfig::_Internal::partitioning_distance(const PartitioningConfig* msg) {
  return *msg->partitioning_distance_;
}
const ::research_scann::DistanceMeasureConfig&
PartitioningConfig::_Internal::database_tokenization_distance_override(const PartitioningConfig* msg) {
  return *msg->database_tokenization_distance_override_;
}
const ::research_scann::DistanceMeasureConfig&
PartitioningConfig::_Internal::query_tokenization_distance_override(const PartitioningConfig* msg) {
  return *msg->query_tokenization_distance_override_;
}
const ::research_scann::DatabaseSpillingConfig&
PartitioningConfig::_Internal::database_spilling(const PartitioningConfig* msg) {
  return *msg->database_spilling_;
}
const ::research_scann::QuerySpillingConfig&
PartitioningConfig::_Internal::query_spilling(const PartitioningConfig* msg) {
  return *msg->query_spilling_;
}
void PartitioningConfig::clear_projection() {
  if (projection_ != nullptr) projection_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void PartitioningConfig::clear_partitioning_distance() {
  if (partitioning_distance_ != nullptr) partitioning_distance_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void PartitioningConfig::clear_database_tokenization_distance_override() {
  if (database_tokenization_distance_override_ != nullptr) database_tokenization_distance_override_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void PartitioningConfig::clear_query_tokenization_distance_override() {
  if (query_tokenization_distance_override_ != nullptr) query_tokenization_distance_override_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_;
PartitioningConfig::PartitioningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.PartitioningConfig)
}
PartitioningConfig::PartitioningConfig(const PartitioningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partitioner_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_partitioner_prefix()) {
    partitioner_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partitioner_prefix_);
  }
  mr_jobname_prefix_.UnsafeSetDefault(&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get());
  if (from.has_mr_jobname_prefix()) {
    mr_jobname_prefix_.AssignWithDefault(&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get(), from.mr_jobname_prefix_);
  }
  resharded_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_resharded_prefix()) {
    resharded_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resharded_prefix_);
  }
  cell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cell()) {
    cell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_);
  }
  trainer_stats_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trainer_stats_prefix()) {
    trainer_stats_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_stats_prefix_);
  }
  if (from.has_partitioning_distance()) {
    partitioning_distance_ = new ::research_scann::DistanceMeasureConfig(*from.partitioning_distance_);
  } else {
    partitioning_distance_ = nullptr;
  }
  if (from.has_projection()) {
    projection_ = new ::research_scann::ProjectionConfig(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  if (from.has_database_spilling()) {
    database_spilling_ = new ::research_scann::DatabaseSpillingConfig(*from.database_spilling_);
  } else {
    database_spilling_ = nullptr;
  }
  if (from.has_query_spilling()) {
    query_spilling_ = new ::research_scann::QuerySpillingConfig(*from.query_spilling_);
  } else {
    query_spilling_ = nullptr;
  }
  if (from.has_database_tokenization_distance_override()) {
    database_tokenization_distance_override_ = new ::research_scann::DistanceMeasureConfig(*from.database_tokenization_distance_override_);
  } else {
    database_tokenization_distance_override_ = nullptr;
  }
  if (from.has_query_tokenization_distance_override()) {
    query_tokenization_distance_override_ = new ::research_scann::DistanceMeasureConfig(*from.query_tokenization_distance_override_);
  } else {
    query_tokenization_distance_override_ = nullptr;
  }
  if (from.has_tree_x_hybrid()) {
    tree_x_hybrid_ = new ::research_scann::TreeXHybridPartitioningConfig(*from.tree_x_hybrid_);
  } else {
    tree_x_hybrid_ = nullptr;
  }
  ::memcpy(&partitioning_type_, &from.partitioning_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&residual_stdev_min_value_) -
    reinterpret_cast<char*>(&partitioning_type_)) + sizeof(residual_stdev_min_value_));
  clear_has_SamplingFractionOrExpectedSize();
  switch (from.SamplingFractionOrExpectedSize_case()) {
    case kPartitioningSamplingFraction: {
      set_partitioning_sampling_fraction(from.partitioning_sampling_fraction());
      break;
    }
    case kExpectedSampleSize: {
      set_expected_sample_size(from.expected_sample_size());
      break;
    }
    case SAMPLINGFRACTIONOREXPECTEDSIZE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.PartitioningConfig)
}

void PartitioningConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base);
  partitioner_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_jobname_prefix_.UnsafeSetDefault(&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get());
  resharded_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_stats_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&partitioning_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_machine_center_initialization_) -
      reinterpret_cast<char*>(&partitioning_distance_)) + sizeof(single_machine_center_initialization_));
  num_partitioning_epochs_ = 1;
  max_num_levels_ = 1;
  num_children_ = 2;
  max_clustering_iterations_ = 10;
  clustering_convergence_tolerance_ = 1e-05f;
  min_cluster_size_ = 1;
  max_leaf_size_ = 1;
  ram_gb_ = 4;
  disk_gb_ = 1;
  num_cpus_ = 1;
  query_tokenization_type_ = 1;
  database_tokenization_type_ = 1;
  num_mapper_machines_ = -1;
  max_sample_size_ = 2147483647;
  desired_average_cluster_size_ = 3000;
  num_mini_batches_ = 1;
  max_power_of_2_split_ = 2;
  num_top_tokens_for_pca_ = 20;
  pca_splitting_similarity_threshold_ = 1e-05f;
  avq_ = std::numeric_limits<float>::quiet_NaN();
  residual_stdev_min_value_ = 1e-05;
  clear_has_SamplingFractionOrExpectedSize();
}

PartitioningConfig::~PartitioningConfig() {
  // @@protoc_insertion_point(destructor:research_scann.PartitioningConfig)
  SharedDtor();
}

void PartitioningConfig::SharedDtor() {
  partitioner_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_jobname_prefix_.DestroyNoArena(&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get());
  resharded_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_stats_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete partitioning_distance_;
  if (this != internal_default_instance()) delete projection_;
  if (this != internal_default_instance()) delete database_spilling_;
  if (this != internal_default_instance()) delete query_spilling_;
  if (this != internal_default_instance()) delete database_tokenization_distance_override_;
  if (this != internal_default_instance()) delete query_tokenization_distance_override_;
  if (this != internal_default_instance()) delete tree_x_hybrid_;
  if (has_SamplingFractionOrExpectedSize()) {
    clear_SamplingFractionOrExpectedSize();
  }
}

void PartitioningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartitioningConfig& PartitioningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void PartitioningConfig::clear_SamplingFractionOrExpectedSize() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.PartitioningConfig)
  switch (SamplingFractionOrExpectedSize_case()) {
    case kPartitioningSamplingFraction: {
      // No need to clear
      break;
    }
    case kExpectedSampleSize: {
      // No need to clear
      break;
    }
    case SAMPLINGFRACTIONOREXPECTEDSIZE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAMPLINGFRACTIONOREXPECTEDSIZE_NOT_SET;
}


void PartitioningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.PartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      partitioner_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mr_jobname_prefix_.UnsafeMutablePointer()->assign(*&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      resharded_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      cell_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      trainer_stats_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(partitioning_distance_ != nullptr);
      partitioning_distance_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(projection_ != nullptr);
      projection_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(database_spilling_ != nullptr);
      database_spilling_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(query_spilling_ != nullptr);
      query_spilling_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(database_tokenization_distance_override_ != nullptr);
      database_tokenization_distance_override_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(query_tokenization_distance_override_ != nullptr);
      query_tokenization_distance_override_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tree_x_hybrid_ != nullptr);
      tree_x_hybrid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&partitioning_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compute_residual_stdev_) -
        reinterpret_cast<char*>(&partitioning_type_)) + sizeof(compute_residual_stdev_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&use_float_centers_for_query_tokenization_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&single_machine_center_initialization_) -
        reinterpret_cast<char*>(&use_float_centers_for_query_tokenization_)) + sizeof(single_machine_center_initialization_));
  }
  if (cached_has_bits & 0xff000000u) {
    num_partitioning_epochs_ = 1;
    max_num_levels_ = 1;
    num_children_ = 2;
    max_clustering_iterations_ = 10;
    clustering_convergence_tolerance_ = 1e-05f;
    min_cluster_size_ = 1;
    max_leaf_size_ = 1;
    ram_gb_ = 4;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    disk_gb_ = 1;
    num_cpus_ = 1;
    query_tokenization_type_ = 1;
    database_tokenization_type_ = 1;
    num_mapper_machines_ = -1;
    max_sample_size_ = 2147483647;
    desired_average_cluster_size_ = 3000;
    num_mini_batches_ = 1;
  }
  if (cached_has_bits & 0x00001f00u) {
    max_power_of_2_split_ = 2;
    num_top_tokens_for_pca_ = 20;
    pca_splitting_similarity_threshold_ = 1e-05f;
    avq_ = std::numeric_limits<float>::quiet_NaN();
    residual_stdev_min_value_ = 1e-05;
  }
  clear_SamplingFractionOrExpectedSize();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartitioningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_partitioning_epochs = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_partitioning_epochs(&_has_bits_);
          num_partitioning_epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_levels = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_num_levels(&_has_bits_);
          max_num_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_children = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_children(&_has_bits_);
          num_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float partitioning_sampling_fraction = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          set_partitioning_sampling_fraction(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_clustering_iterations = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_clustering_iterations(&_has_bits_);
          max_clustering_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clustering_convergence_tolerance = 7 [default = 1e-05];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_clustering_convergence_tolerance(&_has_bits_);
          clustering_convergence_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string partitioner_prefix = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_partitioner_prefix(), ptr, ctx, "research_scann.PartitioningConfig.partitioner_prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_cluster_size = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_min_cluster_size(&_has_bits_);
          min_cluster_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig partitioning_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_partitioning_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_leaf_size = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_leaf_size(&_has_bits_);
          max_leaf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ProjectionConfig projection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mr_jobname_prefix = 13 [default = "PartitionReshard"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_mr_jobname_prefix(), ptr, ctx, "research_scann.PartitioningConfig.mr_jobname_prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string resharded_prefix = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_resharded_prefix(), ptr, ctx, "research_scann.PartitioningConfig.resharded_prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cell = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cell(), ptr, ctx, "research_scann.PartitioningConfig.cell");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ram_gb = 16 [default = 4];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_ram_gb(&_has_bits_);
          ram_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 disk_gb = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_disk_gb(&_has_bits_);
          disk_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_cpus = 19 [default = 1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_cpus(&_has_bits_);
          num_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DatabaseSpillingConfig database_spilling = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_database_spilling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.QuerySpillingConfig query_spilling = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_query_spilling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool partitioning_on_the_fly = 22 [default = false, deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_partitioning_on_the_fly(&_has_bits_);
          partitioning_on_the_fly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.PartitioningType partitioning_type = 23 [default = GENERIC];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_PartitioningType_IsValid(val))) {
            set_partitioning_type(static_cast<::research_scann::PartitioningConfig_PartitioningType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig database_tokenization_distance_override = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_database_tokenization_distance_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig query_tokenization_distance_override = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_query_tokenization_distance_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_float_centers_for_query_tokenization = 26 [default = false, deprecated = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_float_centers_for_query_tokenization(&_has_bits_);
          use_float_centers_for_query_tokenization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clustering_seed = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_clustering_seed(&_has_bits_);
          clustering_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TokenizationType query_tokenization_type = 28 [default = FLOAT];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TokenizationType_IsValid(val))) {
            set_query_tokenization_type(static_cast<::research_scann::PartitioningConfig_TokenizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TokenizationType database_tokenization_type = 29 [default = FLOAT];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TokenizationType_IsValid(val))) {
            set_database_tokenization_type(static_cast<::research_scann::PartitioningConfig_TokenizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_mapper_machines = 30 [default = -1];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_num_mapper_machines(&_has_bits_);
          num_mapper_machines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TreeType tree_type = 31 [default = KMEANS_TREE];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TreeType_IsValid(val))) {
            set_tree_type(static_cast<::research_scann::PartitioningConfig_TreeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_flume_kmeans = 32 [default = false, deprecated = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_use_flume_kmeans(&_has_bits_);
          use_flume_kmeans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_sample_size = 33 [default = 2147483647, deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_sample_size(&_has_bits_);
          max_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 desired_average_cluster_size = 34 [default = 3000];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_desired_average_cluster_size(&_has_bits_);
          desired_average_cluster_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.BalancingType balancing_type = 35 [default = DEFAULT_UNBALANCED];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_BalancingType_IsValid(val))) {
            set_balancing_type(static_cast<::research_scann::PartitioningConfig_BalancingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.PartitionerTrainerType trainer_type = 36 [default = DEFAULT_SAMPLING_TRAINER];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_PartitionerTrainerType_IsValid(val))) {
            set_trainer_type(static_cast<::research_scann::PartitioningConfig_PartitionerTrainerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string trainer_stats_prefix = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_trainer_stats_prefix(), ptr, ctx, "research_scann.PartitioningConfig.trainer_stats_prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_mini_batches = 38 [default = 1];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_mini_batches(&_has_bits_);
          num_mini_batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_power_of_2_split = 39 [default = 2];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_power_of_2_split(&_has_bits_);
          max_power_of_2_split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_cluster_size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_cluster_size(&_has_bits_);
          max_cluster_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double perturbation = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_perturbation(&_has_bits_);
          perturbation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 num_top_tokens_for_pca = 42 [default = 20];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_top_tokens_for_pca(&_has_bits_);
          num_top_tokens_for_pca_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pca_splitting_similarity_threshold = 43 [default = 1e-05];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_pca_splitting_similarity_threshold(&_has_bits_);
          pca_splitting_similarity_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 expected_sample_size = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          set_expected_sample_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.TreeXHybridPartitioningConfig tree_x_hybrid = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_tree_x_hybrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_residual_stdev = 47 [default = false];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_compute_residual_stdev(&_has_bits_);
          compute_residual_stdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double residual_stdev_min_value = 48 [default = 1e-05];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_residual_stdev_min_value(&_has_bits_);
          residual_stdev_min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.SingleMachineCenterInitializationType single_machine_center_initialization = 49 [default = DEFAULT_KMEANS_PLUS_PLUS];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_SingleMachineCenterInitializationType_IsValid(val))) {
            set_single_machine_center_initialization(static_cast<::research_scann::PartitioningConfig_SingleMachineCenterInitializationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float avq = 51 [default = nan];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_avq(&_has_bits_);
          avq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartitioningConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.PartitioningConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_partitioning_epochs = 1 [default = 1];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_partitioning_epochs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_partitioning_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_num_levels = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_num_levels(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_children = 3 [default = 2];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_children(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float partitioning_sampling_fraction = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          clear_SamplingFractionOrExpectedSize();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &SamplingFractionOrExpectedSize_.partitioning_sampling_fraction_)));
          set_has_partitioning_sampling_fraction();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_clustering_iterations = 6 [default = 10];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_clustering_iterations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_clustering_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clustering_convergence_tolerance = 7 [default = 1e-05];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_clustering_convergence_tolerance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clustering_convergence_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string partitioner_prefix = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partitioner_prefix()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partitioner_prefix().data(), static_cast<int>(this->partitioner_prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.PartitioningConfig.partitioner_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_cluster_size = 9 [default = 1];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_min_cluster_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_cluster_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DistanceMeasureConfig partitioning_distance = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_partitioning_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_leaf_size = 11 [default = 1];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_max_leaf_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_leaf_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.ProjectionConfig projection = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mr_jobname_prefix = 13 [default = "PartitionReshard"];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mr_jobname_prefix()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.PartitioningConfig.mr_jobname_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string resharded_prefix = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_resharded_prefix()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resharded_prefix().data(), static_cast<int>(this->resharded_prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.PartitioningConfig.resharded_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cell = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cell()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell().data(), static_cast<int>(this->cell().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.PartitioningConfig.cell");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ram_gb = 16 [default = 4];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_ram_gb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ram_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 disk_gb = 17 [default = 1];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_disk_gb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_cpus = 19 [default = 1];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_num_cpus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cpus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DatabaseSpillingConfig database_spilling = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_spilling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.QuerySpillingConfig query_spilling = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_spilling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool partitioning_on_the_fly = 22 [default = false, deprecated = true];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_partitioning_on_the_fly(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partitioning_on_the_fly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.PartitioningType partitioning_type = 23 [default = GENERIC];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_PartitioningType_IsValid(value)) {
            set_partitioning_type(static_cast< ::research_scann::PartitioningConfig_PartitioningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DistanceMeasureConfig database_tokenization_distance_override = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_tokenization_distance_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.DistanceMeasureConfig query_tokenization_distance_override = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_tokenization_distance_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_float_centers_for_query_tokenization = 26 [default = false, deprecated = true];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_use_float_centers_for_query_tokenization(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_float_centers_for_query_tokenization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clustering_seed = 27 [default = 0];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_clustering_seed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &clustering_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TokenizationType query_tokenization_type = 28 [default = FLOAT];
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TokenizationType_IsValid(value)) {
            set_query_tokenization_type(static_cast< ::research_scann::PartitioningConfig_TokenizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                28, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TokenizationType database_tokenization_type = 29 [default = FLOAT];
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TokenizationType_IsValid(value)) {
            set_database_tokenization_type(static_cast< ::research_scann::PartitioningConfig_TokenizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_mapper_machines = 30 [default = -1];
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_num_mapper_machines(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_mapper_machines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TreeType tree_type = 31 [default = KMEANS_TREE];
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TreeType_IsValid(value)) {
            set_tree_type(static_cast< ::research_scann::PartitioningConfig_TreeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_flume_kmeans = 32 [default = false, deprecated = true];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_use_flume_kmeans(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_flume_kmeans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_sample_size = 33 [default = 2147483647, deprecated = true];
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_max_sample_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sample_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 desired_average_cluster_size = 34 [default = 3000];
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_desired_average_cluster_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &desired_average_cluster_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.BalancingType balancing_type = 35 [default = DEFAULT_UNBALANCED];
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_BalancingType_IsValid(value)) {
            set_balancing_type(static_cast< ::research_scann::PartitioningConfig_BalancingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                35, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.PartitionerTrainerType trainer_type = 36 [default = DEFAULT_SAMPLING_TRAINER];
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_PartitionerTrainerType_IsValid(value)) {
            set_trainer_type(static_cast< ::research_scann::PartitioningConfig_PartitionerTrainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trainer_stats_prefix = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_stats_prefix()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trainer_stats_prefix().data(), static_cast<int>(this->trainer_stats_prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.PartitioningConfig.trainer_stats_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_mini_batches = 38 [default = 1];
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_num_mini_batches(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_mini_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_power_of_2_split = 39 [default = 2];
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_max_power_of_2_split(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_power_of_2_split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_cluster_size = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_max_cluster_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cluster_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double perturbation = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (329 & 0xFF)) {
          _Internal::set_has_perturbation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_top_tokens_for_pca = 42 [default = 20];
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_num_top_tokens_for_pca(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_top_tokens_for_pca_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pca_splitting_similarity_threshold = 43 [default = 1e-05];
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (349 & 0xFF)) {
          _Internal::set_has_pca_splitting_similarity_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pca_splitting_similarity_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expected_sample_size = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          clear_SamplingFractionOrExpectedSize();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &SamplingFractionOrExpectedSize_.expected_sample_size_)));
          set_has_expected_sample_size();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.TreeXHybridPartitioningConfig tree_x_hybrid = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tree_x_hybrid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compute_residual_stdev = 47 [default = false];
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (376 & 0xFF)) {
          _Internal::set_has_compute_residual_stdev(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_residual_stdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double residual_stdev_min_value = 48 [default = 1e-05];
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (385 & 0xFF)) {
          _Internal::set_has_residual_stdev_min_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &residual_stdev_min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.SingleMachineCenterInitializationType single_machine_center_initialization = 49 [default = DEFAULT_KMEANS_PLUS_PLUS];
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (392 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_SingleMachineCenterInitializationType_IsValid(value)) {
            set_single_machine_center_initialization(static_cast< ::research_scann::PartitioningConfig_SingleMachineCenterInitializationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                49, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avq = 51 [default = nan];
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (413 & 0xFF)) {
          _Internal::set_has_avq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.PartitioningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.PartitioningConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartitioningConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.PartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_partitioning_epochs = 1 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_partitioning_epochs(), output);
  }

  // optional int32 max_num_levels = 2 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_num_levels(), output);
  }

  // optional int32 num_children = 3 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_children(), output);
  }

  // optional float partitioning_sampling_fraction = 4 [default = 1];
  if (has_partitioning_sampling_fraction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->partitioning_sampling_fraction(), output);
  }

  // optional int32 max_clustering_iterations = 6 [default = 10];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->max_clustering_iterations(), output);
  }

  // optional float clustering_convergence_tolerance = 7 [default = 1e-05];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->clustering_convergence_tolerance(), output);
  }

  // optional string partitioner_prefix = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioner_prefix().data(), static_cast<int>(this->partitioner_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.partitioner_prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->partitioner_prefix(), output);
  }

  // optional float min_cluster_size = 9 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->min_cluster_size(), output);
  }

  // optional .research_scann.DistanceMeasureConfig partitioning_distance = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::partitioning_distance(this), output);
  }

  // optional int32 max_leaf_size = 11 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->max_leaf_size(), output);
  }

  // optional .research_scann.ProjectionConfig projection = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::projection(this), output);
  }

  // optional string mr_jobname_prefix = 13 [default = "PartitionReshard"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.mr_jobname_prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->mr_jobname_prefix(), output);
  }

  // optional string resharded_prefix = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resharded_prefix().data(), static_cast<int>(this->resharded_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.resharded_prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->resharded_prefix(), output);
  }

  // optional string cell = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell().data(), static_cast<int>(this->cell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.cell");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cell(), output);
  }

  // optional int32 ram_gb = 16 [default = 4];
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->ram_gb(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 disk_gb = 17 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->disk_gb(), output);
  }

  // optional int32 num_cpus = 19 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->num_cpus(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.DatabaseSpillingConfig database_spilling = 20;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::database_spilling(this), output);
  }

  // optional .research_scann.QuerySpillingConfig query_spilling = 21;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::query_spilling(this), output);
  }

  // optional bool partitioning_on_the_fly = 22 [default = false, deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->partitioning_on_the_fly(), output);
  }

  // optional .research_scann.PartitioningConfig.PartitioningType partitioning_type = 23 [default = GENERIC];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->partitioning_type(), output);
  }

  // optional .research_scann.DistanceMeasureConfig database_tokenization_distance_override = 24;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::database_tokenization_distance_override(this), output);
  }

  // optional .research_scann.DistanceMeasureConfig query_tokenization_distance_override = 25;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::query_tokenization_distance_override(this), output);
  }

  // optional bool use_float_centers_for_query_tokenization = 26 [default = false, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->use_float_centers_for_query_tokenization(), output);
  }

  // optional int32 clustering_seed = 27 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(27, this->clustering_seed(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .research_scann.PartitioningConfig.TokenizationType query_tokenization_type = 28 [default = FLOAT];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      28, this->query_tokenization_type(), output);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType database_tokenization_type = 29 [default = FLOAT];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      29, this->database_tokenization_type(), output);
  }

  // optional int32 num_mapper_machines = 30 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->num_mapper_machines(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.TreeType tree_type = 31 [default = KMEANS_TREE];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->tree_type(), output);
  }

  // optional bool use_flume_kmeans = 32 [default = false, deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(32, this->use_flume_kmeans(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 max_sample_size = 33 [default = 2147483647, deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(33, this->max_sample_size(), output);
  }

  // optional int32 desired_average_cluster_size = 34 [default = 3000];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(34, this->desired_average_cluster_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.BalancingType balancing_type = 35 [default = DEFAULT_UNBALANCED];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      35, this->balancing_type(), output);
  }

  // optional .research_scann.PartitioningConfig.PartitionerTrainerType trainer_type = 36 [default = DEFAULT_SAMPLING_TRAINER];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      36, this->trainer_type(), output);
  }

  // optional string trainer_stats_prefix = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainer_stats_prefix().data(), static_cast<int>(this->trainer_stats_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.trainer_stats_prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->trainer_stats_prefix(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_mini_batches = 38 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(38, this->num_mini_batches(), output);
  }

  // optional int32 max_power_of_2_split = 39 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(39, this->max_power_of_2_split(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 max_cluster_size = 40;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(40, this->max_cluster_size(), output);
  }

  // optional double perturbation = 41;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(41, this->perturbation(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_top_tokens_for_pca = 42 [default = 20];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(42, this->num_top_tokens_for_pca(), output);
  }

  // optional float pca_splitting_similarity_threshold = 43 [default = 1e-05];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(43, this->pca_splitting_similarity_threshold(), output);
  }

  // optional int32 expected_sample_size = 45;
  if (has_expected_sample_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(45, this->expected_sample_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.TreeXHybridPartitioningConfig tree_x_hybrid = 46;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, _Internal::tree_x_hybrid(this), output);
  }

  // optional bool compute_residual_stdev = 47 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(47, this->compute_residual_stdev(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double residual_stdev_min_value = 48 [default = 1e-05];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(48, this->residual_stdev_min_value(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.SingleMachineCenterInitializationType single_machine_center_initialization = 49 [default = DEFAULT_KMEANS_PLUS_PLUS];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      49, this->single_machine_center_initialization(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float avq = 51 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(51, this->avq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.PartitioningConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* PartitioningConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.PartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_partitioning_epochs = 1 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_partitioning_epochs(), target);
  }

  // optional int32 max_num_levels = 2 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_levels(), target);
  }

  // optional int32 num_children = 3 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_children(), target);
  }

  // optional float partitioning_sampling_fraction = 4 [default = 1];
  if (has_partitioning_sampling_fraction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->partitioning_sampling_fraction(), target);
  }

  // optional int32 max_clustering_iterations = 6 [default = 10];
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->max_clustering_iterations(), target);
  }

  // optional float clustering_convergence_tolerance = 7 [default = 1e-05];
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->clustering_convergence_tolerance(), target);
  }

  // optional string partitioner_prefix = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioner_prefix().data(), static_cast<int>(this->partitioner_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.partitioner_prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->partitioner_prefix(), target);
  }

  // optional float min_cluster_size = 9 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->min_cluster_size(), target);
  }

  // optional .research_scann.DistanceMeasureConfig partitioning_distance = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::partitioning_distance(this), target);
  }

  // optional int32 max_leaf_size = 11 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->max_leaf_size(), target);
  }

  // optional .research_scann.ProjectionConfig projection = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::projection(this), target);
  }

  // optional string mr_jobname_prefix = 13 [default = "PartitionReshard"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mr_jobname_prefix().data(), static_cast<int>(this->mr_jobname_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.mr_jobname_prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->mr_jobname_prefix(), target);
  }

  // optional string resharded_prefix = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resharded_prefix().data(), static_cast<int>(this->resharded_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.resharded_prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->resharded_prefix(), target);
  }

  // optional string cell = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell().data(), static_cast<int>(this->cell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.cell");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->cell(), target);
  }

  // optional int32 ram_gb = 16 [default = 4];
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->ram_gb(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 disk_gb = 17 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->disk_gb(), target);
  }

  // optional int32 num_cpus = 19 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->num_cpus(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.DatabaseSpillingConfig database_spilling = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::database_spilling(this), target);
  }

  // optional .research_scann.QuerySpillingConfig query_spilling = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::query_spilling(this), target);
  }

  // optional bool partitioning_on_the_fly = 22 [default = false, deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->partitioning_on_the_fly(), target);
  }

  // optional .research_scann.PartitioningConfig.PartitioningType partitioning_type = 23 [default = GENERIC];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->partitioning_type(), target);
  }

  // optional .research_scann.DistanceMeasureConfig database_tokenization_distance_override = 24;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::database_tokenization_distance_override(this), target);
  }

  // optional .research_scann.DistanceMeasureConfig query_tokenization_distance_override = 25;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::query_tokenization_distance_override(this), target);
  }

  // optional bool use_float_centers_for_query_tokenization = 26 [default = false, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->use_float_centers_for_query_tokenization(), target);
  }

  // optional int32 clustering_seed = 27 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->clustering_seed(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .research_scann.PartitioningConfig.TokenizationType query_tokenization_type = 28 [default = FLOAT];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->query_tokenization_type(), target);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType database_tokenization_type = 29 [default = FLOAT];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->database_tokenization_type(), target);
  }

  // optional int32 num_mapper_machines = 30 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->num_mapper_machines(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.TreeType tree_type = 31 [default = KMEANS_TREE];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->tree_type(), target);
  }

  // optional bool use_flume_kmeans = 32 [default = false, deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->use_flume_kmeans(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 max_sample_size = 33 [default = 2147483647, deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->max_sample_size(), target);
  }

  // optional int32 desired_average_cluster_size = 34 [default = 3000];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->desired_average_cluster_size(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.BalancingType balancing_type = 35 [default = DEFAULT_UNBALANCED];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      35, this->balancing_type(), target);
  }

  // optional .research_scann.PartitioningConfig.PartitionerTrainerType trainer_type = 36 [default = DEFAULT_SAMPLING_TRAINER];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->trainer_type(), target);
  }

  // optional string trainer_stats_prefix = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainer_stats_prefix().data(), static_cast<int>(this->trainer_stats_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.PartitioningConfig.trainer_stats_prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        37, this->trainer_stats_prefix(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_mini_batches = 38 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->num_mini_batches(), target);
  }

  // optional int32 max_power_of_2_split = 39 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->max_power_of_2_split(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 max_cluster_size = 40;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->max_cluster_size(), target);
  }

  // optional double perturbation = 41;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->perturbation(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_top_tokens_for_pca = 42 [default = 20];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->num_top_tokens_for_pca(), target);
  }

  // optional float pca_splitting_similarity_threshold = 43 [default = 1e-05];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(43, this->pca_splitting_similarity_threshold(), target);
  }

  // optional int32 expected_sample_size = 45;
  if (has_expected_sample_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->expected_sample_size(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.TreeXHybridPartitioningConfig tree_x_hybrid = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, _Internal::tree_x_hybrid(this), target);
  }

  // optional bool compute_residual_stdev = 47 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->compute_residual_stdev(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double residual_stdev_min_value = 48 [default = 1e-05];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->residual_stdev_min_value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.PartitioningConfig.SingleMachineCenterInitializationType single_machine_center_initialization = 49 [default = DEFAULT_KMEANS_PLUS_PLUS];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      49, this->single_machine_center_initialization(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float avq = 51 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->avq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.PartitioningConfig)
  return target;
}

size_t PartitioningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.PartitioningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string partitioner_prefix = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->partitioner_prefix());
    }

    // optional string mr_jobname_prefix = 13 [default = "PartitionReshard"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mr_jobname_prefix());
    }

    // optional string resharded_prefix = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->resharded_prefix());
    }

    // optional string cell = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cell());
    }

    // optional string trainer_stats_prefix = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->trainer_stats_prefix());
    }

    // optional .research_scann.DistanceMeasureConfig partitioning_distance = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partitioning_distance_);
    }

    // optional .research_scann.ProjectionConfig projection = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *projection_);
    }

    // optional .research_scann.DatabaseSpillingConfig database_spilling = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_spilling_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .research_scann.QuerySpillingConfig query_spilling = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_spilling_);
    }

    // optional .research_scann.DistanceMeasureConfig database_tokenization_distance_override = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_tokenization_distance_override_);
    }

    // optional .research_scann.DistanceMeasureConfig query_tokenization_distance_override = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_tokenization_distance_override_);
    }

    // optional .research_scann.TreeXHybridPartitioningConfig tree_x_hybrid = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tree_x_hybrid_);
    }

    // optional .research_scann.PartitioningConfig.PartitioningType partitioning_type = 23 [default = GENERIC];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->partitioning_type());
    }

    // optional int32 clustering_seed = 27 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->clustering_seed());
    }

    // optional .research_scann.PartitioningConfig.TreeType tree_type = 31 [default = KMEANS_TREE];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tree_type());
    }

    // optional bool compute_residual_stdev = 47 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool use_float_centers_for_query_tokenization = 26 [default = false, deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool partitioning_on_the_fly = 22 [default = false, deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool use_flume_kmeans = 32 [default = false, deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional .research_scann.PartitioningConfig.BalancingType balancing_type = 35 [default = DEFAULT_UNBALANCED];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->balancing_type());
    }

    // optional .research_scann.PartitioningConfig.PartitionerTrainerType trainer_type = 36 [default = DEFAULT_SAMPLING_TRAINER];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trainer_type());
    }

    // optional double perturbation = 41;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_cluster_size = 40;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_cluster_size());
    }

    // optional .research_scann.PartitioningConfig.SingleMachineCenterInitializationType single_machine_center_initialization = 49 [default = DEFAULT_KMEANS_PLUS_PLUS];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->single_machine_center_initialization());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 num_partitioning_epochs = 1 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_partitioning_epochs());
    }

    // optional int32 max_num_levels = 2 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_num_levels());
    }

    // optional int32 num_children = 3 [default = 2];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_children());
    }

    // optional int32 max_clustering_iterations = 6 [default = 10];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_clustering_iterations());
    }

    // optional float clustering_convergence_tolerance = 7 [default = 1e-05];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float min_cluster_size = 9 [default = 1];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional int32 max_leaf_size = 11 [default = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_leaf_size());
    }

    // optional int32 ram_gb = 16 [default = 4];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ram_gb());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 disk_gb = 17 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->disk_gb());
    }

    // optional int32 num_cpus = 19 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_cpus());
    }

    // optional .research_scann.PartitioningConfig.TokenizationType query_tokenization_type = 28 [default = FLOAT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->query_tokenization_type());
    }

    // optional .research_scann.PartitioningConfig.TokenizationType database_tokenization_type = 29 [default = FLOAT];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->database_tokenization_type());
    }

    // optional int32 num_mapper_machines = 30 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_mapper_machines());
    }

    // optional int32 max_sample_size = 33 [default = 2147483647, deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_sample_size());
    }

    // optional int32 desired_average_cluster_size = 34 [default = 3000];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->desired_average_cluster_size());
    }

    // optional int32 num_mini_batches = 38 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_mini_batches());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 max_power_of_2_split = 39 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_power_of_2_split());
    }

    // optional int32 num_top_tokens_for_pca = 42 [default = 20];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_top_tokens_for_pca());
    }

    // optional float pca_splitting_similarity_threshold = 43 [default = 1e-05];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float avq = 51 [default = nan];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional double residual_stdev_min_value = 48 [default = 1e-05];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

  }
  switch (SamplingFractionOrExpectedSize_case()) {
    // optional float partitioning_sampling_fraction = 4 [default = 1];
    case kPartitioningSamplingFraction: {
      total_size += 1 + 4;
      break;
    }
    // optional int32 expected_sample_size = 45;
    case kExpectedSampleSize: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->expected_sample_size());
      break;
    }
    case SAMPLINGFRACTIONOREXPECTEDSIZE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitioningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.PartitioningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitioningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartitioningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.PartitioningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.PartitioningConfig)
    MergeFrom(*source);
  }
}

void PartitioningConfig::MergeFrom(const PartitioningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.PartitioningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      partitioner_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partitioner_prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mr_jobname_prefix_.AssignWithDefault(&::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get(), from.mr_jobname_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      resharded_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resharded_prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      cell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      trainer_stats_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_stats_prefix_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_partitioning_distance()->::research_scann::DistanceMeasureConfig::MergeFrom(from.partitioning_distance());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_projection()->::research_scann::ProjectionConfig::MergeFrom(from.projection());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_database_spilling()->::research_scann::DatabaseSpillingConfig::MergeFrom(from.database_spilling());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_query_spilling()->::research_scann::QuerySpillingConfig::MergeFrom(from.query_spilling());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_database_tokenization_distance_override()->::research_scann::DistanceMeasureConfig::MergeFrom(from.database_tokenization_distance_override());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_query_tokenization_distance_override()->::research_scann::DistanceMeasureConfig::MergeFrom(from.query_tokenization_distance_override());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_tree_x_hybrid()->::research_scann::TreeXHybridPartitioningConfig::MergeFrom(from.tree_x_hybrid());
    }
    if (cached_has_bits & 0x00001000u) {
      partitioning_type_ = from.partitioning_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      clustering_seed_ = from.clustering_seed_;
    }
    if (cached_has_bits & 0x00004000u) {
      tree_type_ = from.tree_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      compute_residual_stdev_ = from.compute_residual_stdev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_float_centers_for_query_tokenization_ = from.use_float_centers_for_query_tokenization_;
    }
    if (cached_has_bits & 0x00020000u) {
      partitioning_on_the_fly_ = from.partitioning_on_the_fly_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_flume_kmeans_ = from.use_flume_kmeans_;
    }
    if (cached_has_bits & 0x00080000u) {
      balancing_type_ = from.balancing_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      trainer_type_ = from.trainer_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      perturbation_ = from.perturbation_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_cluster_size_ = from.max_cluster_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      single_machine_center_initialization_ = from.single_machine_center_initialization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      num_partitioning_epochs_ = from.num_partitioning_epochs_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_num_levels_ = from.max_num_levels_;
    }
    if (cached_has_bits & 0x04000000u) {
      num_children_ = from.num_children_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_clustering_iterations_ = from.max_clustering_iterations_;
    }
    if (cached_has_bits & 0x10000000u) {
      clustering_convergence_tolerance_ = from.clustering_convergence_tolerance_;
    }
    if (cached_has_bits & 0x20000000u) {
      min_cluster_size_ = from.min_cluster_size_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_leaf_size_ = from.max_leaf_size_;
    }
    if (cached_has_bits & 0x80000000u) {
      ram_gb_ = from.ram_gb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      disk_gb_ = from.disk_gb_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_cpus_ = from.num_cpus_;
    }
    if (cached_has_bits & 0x00000004u) {
      query_tokenization_type_ = from.query_tokenization_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      database_tokenization_type_ = from.database_tokenization_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_mapper_machines_ = from.num_mapper_machines_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_sample_size_ = from.max_sample_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      desired_average_cluster_size_ = from.desired_average_cluster_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_mini_batches_ = from.num_mini_batches_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      max_power_of_2_split_ = from.max_power_of_2_split_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_top_tokens_for_pca_ = from.num_top_tokens_for_pca_;
    }
    if (cached_has_bits & 0x00000400u) {
      pca_splitting_similarity_threshold_ = from.pca_splitting_similarity_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      avq_ = from.avq_;
    }
    if (cached_has_bits & 0x00001000u) {
      residual_stdev_min_value_ = from.residual_stdev_min_value_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  switch (from.SamplingFractionOrExpectedSize_case()) {
    case kPartitioningSamplingFraction: {
      set_partitioning_sampling_fraction(from.partitioning_sampling_fraction());
      break;
    }
    case kExpectedSampleSize: {
      set_expected_sample_size(from.expected_sample_size());
      break;
    }
    case SAMPLINGFRACTIONOREXPECTEDSIZE_NOT_SET: {
      break;
    }
  }
}

void PartitioningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.PartitioningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitioningConfig::CopyFrom(const PartitioningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.PartitioningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitioningConfig::IsInitialized() const {
  if (has_projection()) {
    if (!this->projection_->IsInitialized()) return false;
  }
  return true;
}

void PartitioningConfig::InternalSwap(PartitioningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  partitioner_prefix_.Swap(&other->partitioner_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mr_jobname_prefix_.Swap(&other->mr_jobname_prefix_, &::research_scann::PartitioningConfig::_i_give_permission_to_break_this_code_default_mr_jobname_prefix_.get(),
    GetArenaNoVirtual());
  resharded_prefix_.Swap(&other->resharded_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cell_.Swap(&other->cell_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trainer_stats_prefix_.Swap(&other->trainer_stats_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partitioning_distance_, other->partitioning_distance_);
  swap(projection_, other->projection_);
  swap(database_spilling_, other->database_spilling_);
  swap(query_spilling_, other->query_spilling_);
  swap(database_tokenization_distance_override_, other->database_tokenization_distance_override_);
  swap(query_tokenization_distance_override_, other->query_tokenization_distance_override_);
  swap(tree_x_hybrid_, other->tree_x_hybrid_);
  swap(partitioning_type_, other->partitioning_type_);
  swap(clustering_seed_, other->clustering_seed_);
  swap(tree_type_, other->tree_type_);
  swap(compute_residual_stdev_, other->compute_residual_stdev_);
  swap(use_float_centers_for_query_tokenization_, other->use_float_centers_for_query_tokenization_);
  swap(partitioning_on_the_fly_, other->partitioning_on_the_fly_);
  swap(use_flume_kmeans_, other->use_flume_kmeans_);
  swap(balancing_type_, other->balancing_type_);
  swap(trainer_type_, other->trainer_type_);
  swap(perturbation_, other->perturbation_);
  swap(max_cluster_size_, other->max_cluster_size_);
  swap(single_machine_center_initialization_, other->single_machine_center_initialization_);
  swap(num_partitioning_epochs_, other->num_partitioning_epochs_);
  swap(max_num_levels_, other->max_num_levels_);
  swap(num_children_, other->num_children_);
  swap(max_clustering_iterations_, other->max_clustering_iterations_);
  swap(clustering_convergence_tolerance_, other->clustering_convergence_tolerance_);
  swap(min_cluster_size_, other->min_cluster_size_);
  swap(max_leaf_size_, other->max_leaf_size_);
  swap(ram_gb_, other->ram_gb_);
  swap(disk_gb_, other->disk_gb_);
  swap(num_cpus_, other->num_cpus_);
  swap(query_tokenization_type_, other->query_tokenization_type_);
  swap(database_tokenization_type_, other->database_tokenization_type_);
  swap(num_mapper_machines_, other->num_mapper_machines_);
  swap(max_sample_size_, other->max_sample_size_);
  swap(desired_average_cluster_size_, other->desired_average_cluster_size_);
  swap(num_mini_batches_, other->num_mini_batches_);
  swap(max_power_of_2_split_, other->max_power_of_2_split_);
  swap(num_top_tokens_for_pca_, other->num_top_tokens_for_pca_);
  swap(pca_splitting_similarity_threshold_, other->pca_splitting_similarity_threshold_);
  swap(avq_, other->avq_);
  swap(residual_stdev_min_value_, other->residual_stdev_min_value_);
  swap(SamplingFractionOrExpectedSize_, other->SamplingFractionOrExpectedSize_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitioningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatabaseSpillingConfig::InitAsDefaultInstance() {
}
class DatabaseSpillingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseSpillingConfig>()._has_bits_);
  static void set_has_spilling_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_replication_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_spill_centers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DatabaseSpillingConfig::DatabaseSpillingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.DatabaseSpillingConfig)
}
DatabaseSpillingConfig::DatabaseSpillingConfig(const DatabaseSpillingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spilling_type_, &from.spilling_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spill_centers_) -
    reinterpret_cast<char*>(&spilling_type_)) + sizeof(max_spill_centers_));
  // @@protoc_insertion_point(copy_constructor:research_scann.DatabaseSpillingConfig)
}

void DatabaseSpillingConfig::SharedCtor() {
  ::memset(&spilling_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replication_factor_) -
      reinterpret_cast<char*>(&spilling_type_)) + sizeof(replication_factor_));
  max_spill_centers_ = 4294967295u;
}

DatabaseSpillingConfig::~DatabaseSpillingConfig() {
  // @@protoc_insertion_point(destructor:research_scann.DatabaseSpillingConfig)
  SharedDtor();
}

void DatabaseSpillingConfig::SharedDtor() {
}

void DatabaseSpillingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseSpillingConfig& DatabaseSpillingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseSpillingConfig_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void DatabaseSpillingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.DatabaseSpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&spilling_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replication_factor_) -
        reinterpret_cast<char*>(&spilling_type_)) + sizeof(replication_factor_));
    max_spill_centers_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatabaseSpillingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.DatabaseSpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::DatabaseSpillingConfig_SpillingType_IsValid(val))) {
            set_spilling_type(static_cast<::research_scann::DatabaseSpillingConfig_SpillingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float replication_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_replication_factor(&has_bits);
          replication_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_spill_centers = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_spill_centers(&has_bits);
          max_spill_centers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatabaseSpillingConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.DatabaseSpillingConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.DatabaseSpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::DatabaseSpillingConfig_SpillingType_IsValid(value)) {
            set_spilling_type(static_cast< ::research_scann::DatabaseSpillingConfig_SpillingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replication_factor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_replication_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replication_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_spill_centers = 3 [default = 4294967295];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_spill_centers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spill_centers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.DatabaseSpillingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.DatabaseSpillingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatabaseSpillingConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.DatabaseSpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.DatabaseSpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->spilling_type(), output);
  }

  // optional float replication_factor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->replication_factor(), output);
  }

  // optional uint32 max_spill_centers = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->max_spill_centers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.DatabaseSpillingConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseSpillingConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.DatabaseSpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.DatabaseSpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->spilling_type(), target);
  }

  // optional float replication_factor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->replication_factor(), target);
  }

  // optional uint32 max_spill_centers = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_spill_centers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.DatabaseSpillingConfig)
  return target;
}

size_t DatabaseSpillingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.DatabaseSpillingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.DatabaseSpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->spilling_type());
    }

    // optional float replication_factor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 max_spill_centers = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_spill_centers());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseSpillingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.DatabaseSpillingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseSpillingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatabaseSpillingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.DatabaseSpillingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.DatabaseSpillingConfig)
    MergeFrom(*source);
  }
}

void DatabaseSpillingConfig::MergeFrom(const DatabaseSpillingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.DatabaseSpillingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      spilling_type_ = from.spilling_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      replication_factor_ = from.replication_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_spill_centers_ = from.max_spill_centers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseSpillingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.DatabaseSpillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseSpillingConfig::CopyFrom(const DatabaseSpillingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.DatabaseSpillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseSpillingConfig::IsInitialized() const {
  return true;
}

void DatabaseSpillingConfig::InternalSwap(DatabaseSpillingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spilling_type_, other->spilling_type_);
  swap(replication_factor_, other->replication_factor_);
  swap(max_spill_centers_, other->max_spill_centers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatabaseSpillingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuerySpillingConfig::InitAsDefaultInstance() {
}
class QuerySpillingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySpillingConfig>()._has_bits_);
  static void set_has_spilling_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spilling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_spill_centers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

QuerySpillingConfig::QuerySpillingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.QuerySpillingConfig)
}
QuerySpillingConfig::QuerySpillingConfig(const QuerySpillingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spilling_type_, &from.spilling_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spill_centers_) -
    reinterpret_cast<char*>(&spilling_type_)) + sizeof(max_spill_centers_));
  // @@protoc_insertion_point(copy_constructor:research_scann.QuerySpillingConfig)
}

void QuerySpillingConfig::SharedCtor() {
  ::memset(&spilling_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spilling_threshold_) -
      reinterpret_cast<char*>(&spilling_type_)) + sizeof(spilling_threshold_));
  max_spill_centers_ = 4294967295u;
}

QuerySpillingConfig::~QuerySpillingConfig() {
  // @@protoc_insertion_point(destructor:research_scann.QuerySpillingConfig)
  SharedDtor();
}

void QuerySpillingConfig::SharedDtor() {
}

void QuerySpillingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuerySpillingConfig& QuerySpillingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuerySpillingConfig_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void QuerySpillingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.QuerySpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&spilling_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spilling_threshold_) -
        reinterpret_cast<char*>(&spilling_type_)) + sizeof(spilling_threshold_));
    max_spill_centers_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuerySpillingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.QuerySpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::QuerySpillingConfig_SpillingType_IsValid(val))) {
            set_spilling_type(static_cast<::research_scann::QuerySpillingConfig_SpillingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float spilling_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_spilling_threshold(&has_bits);
          spilling_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_spill_centers = 3 [default = 4294967295];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_spill_centers(&has_bits);
          max_spill_centers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuerySpillingConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.QuerySpillingConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.QuerySpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::QuerySpillingConfig_SpillingType_IsValid(value)) {
            set_spilling_type(static_cast< ::research_scann::QuerySpillingConfig_SpillingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spilling_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_spilling_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spilling_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_spill_centers = 3 [default = 4294967295];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_spill_centers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spill_centers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.QuerySpillingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.QuerySpillingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuerySpillingConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.QuerySpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.QuerySpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->spilling_type(), output);
  }

  // optional float spilling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->spilling_threshold(), output);
  }

  // optional uint32 max_spill_centers = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->max_spill_centers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.QuerySpillingConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuerySpillingConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.QuerySpillingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.QuerySpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->spilling_type(), target);
  }

  // optional float spilling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->spilling_threshold(), target);
  }

  // optional uint32 max_spill_centers = 3 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_spill_centers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.QuerySpillingConfig)
  return target;
}

size_t QuerySpillingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.QuerySpillingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.QuerySpillingConfig.SpillingType spilling_type = 1 [default = NO_SPILLING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->spilling_type());
    }

    // optional float spilling_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 max_spill_centers = 3 [default = 4294967295];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_spill_centers());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuerySpillingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.QuerySpillingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySpillingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuerySpillingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.QuerySpillingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.QuerySpillingConfig)
    MergeFrom(*source);
  }
}

void QuerySpillingConfig::MergeFrom(const QuerySpillingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.QuerySpillingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      spilling_type_ = from.spilling_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      spilling_threshold_ = from.spilling_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_spill_centers_ = from.max_spill_centers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuerySpillingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.QuerySpillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySpillingConfig::CopyFrom(const QuerySpillingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.QuerySpillingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpillingConfig::IsInitialized() const {
  return true;
}

void QuerySpillingConfig::InternalSwap(QuerySpillingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spilling_type_, other->spilling_type_);
  swap(spilling_threshold_, other->spilling_threshold_);
  swap(max_spill_centers_, other->max_spill_centers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpillingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeXHybridPartitioningConfig::InitAsDefaultInstance() {
  ::research_scann::_TreeXHybridPartitioningConfig_default_instance_._instance.get_mutable()->query_tokenization_reordering_ = const_cast< ::research_scann::ExactReordering*>(
      ::research_scann::ExactReordering::internal_default_instance());
  ::research_scann::_TreeXHybridPartitioningConfig_default_instance_._instance.get_mutable()->training_reordering_ = const_cast< ::research_scann::ExactReordering*>(
      ::research_scann::ExactReordering::internal_default_instance());
  ::research_scann::_TreeXHybridPartitioningConfig_default_instance_._instance.get_mutable()->database_tokenization_reordering_ = const_cast< ::research_scann::ExactReordering*>(
      ::research_scann::ExactReordering::internal_default_instance());
}
class TreeXHybridPartitioningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TreeXHybridPartitioningConfig>()._has_bits_);
  static void set_has_top_partitioning_children(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_top_partitioner_spilling_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_top_partitioner_query_tokenization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_top_partitioner_database_tokenization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_top_partitioner_training_tokenization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_top_partitioner_use_flume_trainer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assets_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::research_scann::ExactReordering& query_tokenization_reordering(const TreeXHybridPartitioningConfig* msg);
  static void set_has_query_tokenization_reordering(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::research_scann::ExactReordering& training_reordering(const TreeXHybridPartitioningConfig* msg);
  static void set_has_training_reordering(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::ExactReordering& database_tokenization_reordering(const TreeXHybridPartitioningConfig* msg);
  static void set_has_database_tokenization_reordering(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::research_scann::ExactReordering&
TreeXHybridPartitioningConfig::_Internal::query_tokenization_reordering(const TreeXHybridPartitioningConfig* msg) {
  return *msg->query_tokenization_reordering_;
}
const ::research_scann::ExactReordering&
TreeXHybridPartitioningConfig::_Internal::training_reordering(const TreeXHybridPartitioningConfig* msg) {
  return *msg->training_reordering_;
}
const ::research_scann::ExactReordering&
TreeXHybridPartitioningConfig::_Internal::database_tokenization_reordering(const TreeXHybridPartitioningConfig* msg) {
  return *msg->database_tokenization_reordering_;
}
void TreeXHybridPartitioningConfig::clear_query_tokenization_reordering() {
  if (query_tokenization_reordering_ != nullptr) query_tokenization_reordering_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TreeXHybridPartitioningConfig::clear_training_reordering() {
  if (training_reordering_ != nullptr) training_reordering_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TreeXHybridPartitioningConfig::clear_database_tokenization_reordering() {
  if (database_tokenization_reordering_ != nullptr) database_tokenization_reordering_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TreeXHybridPartitioningConfig::TreeXHybridPartitioningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.TreeXHybridPartitioningConfig)
}
TreeXHybridPartitioningConfig::TreeXHybridPartitioningConfig(const TreeXHybridPartitioningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assets_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_assets_dir()) {
    assets_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assets_dir_);
  }
  if (from.has_training_reordering()) {
    training_reordering_ = new ::research_scann::ExactReordering(*from.training_reordering_);
  } else {
    training_reordering_ = nullptr;
  }
  if (from.has_database_tokenization_reordering()) {
    database_tokenization_reordering_ = new ::research_scann::ExactReordering(*from.database_tokenization_reordering_);
  } else {
    database_tokenization_reordering_ = nullptr;
  }
  if (from.has_query_tokenization_reordering()) {
    query_tokenization_reordering_ = new ::research_scann::ExactReordering(*from.query_tokenization_reordering_);
  } else {
    query_tokenization_reordering_ = nullptr;
  }
  ::memcpy(&top_partitioning_children_, &from.top_partitioning_children_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_partitioner_training_tokenization_type_) -
    reinterpret_cast<char*>(&top_partitioning_children_)) + sizeof(top_partitioner_training_tokenization_type_));
  // @@protoc_insertion_point(copy_constructor:research_scann.TreeXHybridPartitioningConfig)
}

void TreeXHybridPartitioningConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base);
  assets_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&training_reordering_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_partitioner_use_flume_trainer_) -
      reinterpret_cast<char*>(&training_reordering_)) + sizeof(top_partitioner_use_flume_trainer_));
  top_partitioner_spilling_ratio_ = 0.05f;
  top_partitioner_query_tokenization_type_ = 1;
  top_partitioner_database_tokenization_type_ = 1;
  top_partitioner_training_tokenization_type_ = 1;
}

TreeXHybridPartitioningConfig::~TreeXHybridPartitioningConfig() {
  // @@protoc_insertion_point(destructor:research_scann.TreeXHybridPartitioningConfig)
  SharedDtor();
}

void TreeXHybridPartitioningConfig::SharedDtor() {
  assets_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete training_reordering_;
  if (this != internal_default_instance()) delete database_tokenization_reordering_;
  if (this != internal_default_instance()) delete query_tokenization_reordering_;
}

void TreeXHybridPartitioningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeXHybridPartitioningConfig& TreeXHybridPartitioningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeXHybridPartitioningConfig_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void TreeXHybridPartitioningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.TreeXHybridPartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      assets_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(training_reordering_ != nullptr);
      training_reordering_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(database_tokenization_reordering_ != nullptr);
      database_tokenization_reordering_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(query_tokenization_reordering_ != nullptr);
      query_tokenization_reordering_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&top_partitioning_children_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_partitioner_use_flume_trainer_) -
        reinterpret_cast<char*>(&top_partitioning_children_)) + sizeof(top_partitioner_use_flume_trainer_));
    top_partitioner_spilling_ratio_ = 0.05f;
    top_partitioner_query_tokenization_type_ = 1;
  }
  if (cached_has_bits & 0x00000300u) {
    top_partitioner_database_tokenization_type_ = 1;
    top_partitioner_training_tokenization_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TreeXHybridPartitioningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 top_partitioning_children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_partitioning_children(&has_bits);
          top_partitioning_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float top_partitioner_spilling_ratio = 2 [default = 0.05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_top_partitioner_spilling_ratio(&has_bits);
          top_partitioner_spilling_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string assets_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_assets_dir(), ptr, ctx, "research_scann.TreeXHybridPartitioningConfig.assets_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ExactReordering training_reordering = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_training_reordering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ExactReordering database_tokenization_reordering = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_database_tokenization_reordering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ExactReordering query_tokenization_reordering = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_query_tokenization_reordering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_query_tokenization_type = 7 [default = FLOAT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TokenizationType_IsValid(val))) {
            set_top_partitioner_query_tokenization_type(static_cast<::research_scann::PartitioningConfig_TokenizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_database_tokenization_type = 8 [default = FLOAT];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TokenizationType_IsValid(val))) {
            set_top_partitioner_database_tokenization_type(static_cast<::research_scann::PartitioningConfig_TokenizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool top_partitioner_use_flume_trainer = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_top_partitioner_use_flume_trainer(&has_bits);
          top_partitioner_use_flume_trainer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_training_tokenization_type = 10 [default = FLOAT];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::PartitioningConfig_TokenizationType_IsValid(val))) {
            set_top_partitioner_training_tokenization_type(static_cast<::research_scann::PartitioningConfig_TokenizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TreeXHybridPartitioningConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.TreeXHybridPartitioningConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_partitioning_children = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_top_partitioning_children(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_partitioning_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float top_partitioner_spilling_ratio = 2 [default = 0.05];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_top_partitioner_spilling_ratio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_partitioner_spilling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string assets_dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_assets_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assets_dir().data(), static_cast<int>(this->assets_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.TreeXHybridPartitioningConfig.assets_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.ExactReordering training_reordering = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_training_reordering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.ExactReordering database_tokenization_reordering = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database_tokenization_reordering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.ExactReordering query_tokenization_reordering = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_tokenization_reordering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_query_tokenization_type = 7 [default = FLOAT];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TokenizationType_IsValid(value)) {
            set_top_partitioner_query_tokenization_type(static_cast< ::research_scann::PartitioningConfig_TokenizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_database_tokenization_type = 8 [default = FLOAT];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TokenizationType_IsValid(value)) {
            set_top_partitioner_database_tokenization_type(static_cast< ::research_scann::PartitioningConfig_TokenizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool top_partitioner_use_flume_trainer = 9 [default = false];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_top_partitioner_use_flume_trainer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_partitioner_use_flume_trainer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_training_tokenization_type = 10 [default = FLOAT];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::PartitioningConfig_TokenizationType_IsValid(value)) {
            set_top_partitioner_training_tokenization_type(static_cast< ::research_scann::PartitioningConfig_TokenizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.TreeXHybridPartitioningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.TreeXHybridPartitioningConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TreeXHybridPartitioningConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.TreeXHybridPartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_partitioning_children = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->top_partitioning_children(), output);
  }

  // optional float top_partitioner_spilling_ratio = 2 [default = 0.05];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->top_partitioner_spilling_ratio(), output);
  }

  // optional string assets_dir = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assets_dir().data(), static_cast<int>(this->assets_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TreeXHybridPartitioningConfig.assets_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assets_dir(), output);
  }

  // optional .research_scann.ExactReordering training_reordering = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::training_reordering(this), output);
  }

  // optional .research_scann.ExactReordering database_tokenization_reordering = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::database_tokenization_reordering(this), output);
  }

  // optional .research_scann.ExactReordering query_tokenization_reordering = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::query_tokenization_reordering(this), output);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_query_tokenization_type = 7 [default = FLOAT];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->top_partitioner_query_tokenization_type(), output);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_database_tokenization_type = 8 [default = FLOAT];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->top_partitioner_database_tokenization_type(), output);
  }

  // optional bool top_partitioner_use_flume_trainer = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->top_partitioner_use_flume_trainer(), output);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_training_tokenization_type = 10 [default = FLOAT];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->top_partitioner_training_tokenization_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.TreeXHybridPartitioningConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeXHybridPartitioningConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.TreeXHybridPartitioningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_partitioning_children = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_partitioning_children(), target);
  }

  // optional float top_partitioner_spilling_ratio = 2 [default = 0.05];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->top_partitioner_spilling_ratio(), target);
  }

  // optional string assets_dir = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assets_dir().data(), static_cast<int>(this->assets_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TreeXHybridPartitioningConfig.assets_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->assets_dir(), target);
  }

  // optional .research_scann.ExactReordering training_reordering = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::training_reordering(this), target);
  }

  // optional .research_scann.ExactReordering database_tokenization_reordering = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::database_tokenization_reordering(this), target);
  }

  // optional .research_scann.ExactReordering query_tokenization_reordering = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::query_tokenization_reordering(this), target);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_query_tokenization_type = 7 [default = FLOAT];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->top_partitioner_query_tokenization_type(), target);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_database_tokenization_type = 8 [default = FLOAT];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->top_partitioner_database_tokenization_type(), target);
  }

  // optional bool top_partitioner_use_flume_trainer = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->top_partitioner_use_flume_trainer(), target);
  }

  // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_training_tokenization_type = 10 [default = FLOAT];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->top_partitioner_training_tokenization_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.TreeXHybridPartitioningConfig)
  return target;
}

size_t TreeXHybridPartitioningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.TreeXHybridPartitioningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string assets_dir = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->assets_dir());
    }

    // optional .research_scann.ExactReordering training_reordering = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *training_reordering_);
    }

    // optional .research_scann.ExactReordering database_tokenization_reordering = 5 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_tokenization_reordering_);
    }

    // optional .research_scann.ExactReordering query_tokenization_reordering = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_tokenization_reordering_);
    }

    // optional uint32 top_partitioning_children = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->top_partitioning_children());
    }

    // optional bool top_partitioner_use_flume_trainer = 9 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float top_partitioner_spilling_ratio = 2 [default = 0.05];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_query_tokenization_type = 7 [default = FLOAT];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->top_partitioner_query_tokenization_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_database_tokenization_type = 8 [default = FLOAT];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->top_partitioner_database_tokenization_type());
    }

    // optional .research_scann.PartitioningConfig.TokenizationType top_partitioner_training_tokenization_type = 10 [default = FLOAT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->top_partitioner_training_tokenization_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeXHybridPartitioningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.TreeXHybridPartitioningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeXHybridPartitioningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeXHybridPartitioningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.TreeXHybridPartitioningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.TreeXHybridPartitioningConfig)
    MergeFrom(*source);
  }
}

void TreeXHybridPartitioningConfig::MergeFrom(const TreeXHybridPartitioningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.TreeXHybridPartitioningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      assets_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assets_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_training_reordering()->::research_scann::ExactReordering::MergeFrom(from.training_reordering());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_database_tokenization_reordering()->::research_scann::ExactReordering::MergeFrom(from.database_tokenization_reordering());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_query_tokenization_reordering()->::research_scann::ExactReordering::MergeFrom(from.query_tokenization_reordering());
    }
    if (cached_has_bits & 0x00000010u) {
      top_partitioning_children_ = from.top_partitioning_children_;
    }
    if (cached_has_bits & 0x00000020u) {
      top_partitioner_use_flume_trainer_ = from.top_partitioner_use_flume_trainer_;
    }
    if (cached_has_bits & 0x00000040u) {
      top_partitioner_spilling_ratio_ = from.top_partitioner_spilling_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      top_partitioner_query_tokenization_type_ = from.top_partitioner_query_tokenization_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      top_partitioner_database_tokenization_type_ = from.top_partitioner_database_tokenization_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_partitioner_training_tokenization_type_ = from.top_partitioner_training_tokenization_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TreeXHybridPartitioningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.TreeXHybridPartitioningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeXHybridPartitioningConfig::CopyFrom(const TreeXHybridPartitioningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.TreeXHybridPartitioningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeXHybridPartitioningConfig::IsInitialized() const {
  return true;
}

void TreeXHybridPartitioningConfig::InternalSwap(TreeXHybridPartitioningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assets_dir_.Swap(&other->assets_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(training_reordering_, other->training_reordering_);
  swap(database_tokenization_reordering_, other->database_tokenization_reordering_);
  swap(query_tokenization_reordering_, other->query_tokenization_reordering_);
  swap(top_partitioning_children_, other->top_partitioning_children_);
  swap(top_partitioner_use_flume_trainer_, other->top_partitioner_use_flume_trainer_);
  swap(top_partitioner_spilling_ratio_, other->top_partitioner_spilling_ratio_);
  swap(top_partitioner_query_tokenization_type_, other->top_partitioner_query_tokenization_type_);
  swap(top_partitioner_database_tokenization_type_, other->top_partitioner_database_tokenization_type_);
  swap(top_partitioner_training_tokenization_type_, other->top_partitioner_training_tokenization_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeXHybridPartitioningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenList::InitAsDefaultInstance() {
}
class TokenList::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenList>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenList::TokenList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.TokenList)
}
TokenList::TokenList(const TokenList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datapoint_index_(from.datapoint_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:research_scann.TokenList)
}

void TokenList::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

TokenList::~TokenList() {
  // @@protoc_insertion_point(destructor:research_scann.TokenList)
  SharedDtor();
}

void TokenList::SharedDtor() {
}

void TokenList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenList& TokenList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenList_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void TokenList::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.TokenList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datapoint_index_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 datapoint_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_datapoint_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_datapoint_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.TokenList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 datapoint_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_datapoint_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_datapoint_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.TokenList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.TokenList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.TokenList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated int64 datapoint_index = 2;
  for (int i = 0, n = this->datapoint_index_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->datapoint_index(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.TokenList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.TokenList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated int64 datapoint_index = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt64ToArray(2, this->datapoint_index_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.TokenList)
  return target;
}

size_t TokenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.TokenList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 datapoint_index = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->datapoint_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->datapoint_index_size());
    total_size += data_size;
  }

  // optional uint64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.TokenList)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.TokenList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.TokenList)
    MergeFrom(*source);
  }
}

void TokenList::MergeFrom(const TokenList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.TokenList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datapoint_index_.MergeFrom(from.datapoint_index_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void TokenList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.TokenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenList::CopyFrom(const TokenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.TokenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenList::IsInitialized() const {
  return true;
}

void TokenList::InternalSwap(TokenList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datapoint_index_.InternalSwap(&other->datapoint_index_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HierarchicalPartitionerConfig::InitAsDefaultInstance() {
  ::research_scann::_HierarchicalPartitionerConfig_default_instance_._instance.get_mutable()->input_output_ = const_cast< ::research_scann::InputOutputConfig*>(
      ::research_scann::InputOutputConfig::internal_default_instance());
}
class HierarchicalPartitionerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalPartitionerConfig>()._has_bits_);
  static const ::research_scann::InputOutputConfig& input_output(const HierarchicalPartitionerConfig* msg);
  static void set_has_input_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::research_scann::InputOutputConfig&
HierarchicalPartitionerConfig::_Internal::input_output(const HierarchicalPartitionerConfig* msg) {
  return *msg->input_output_;
}
void HierarchicalPartitionerConfig::clear_input_output() {
  if (input_output_ != nullptr) input_output_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HierarchicalPartitionerConfig::HierarchicalPartitionerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.HierarchicalPartitionerConfig)
}
HierarchicalPartitionerConfig::HierarchicalPartitionerConfig(const HierarchicalPartitionerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      partitioning_(from.partitioning_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_output()) {
    input_output_ = new ::research_scann::InputOutputConfig(*from.input_output_);
  } else {
    input_output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.HierarchicalPartitionerConfig)
}

void HierarchicalPartitionerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto.base);
  input_output_ = nullptr;
}

HierarchicalPartitionerConfig::~HierarchicalPartitionerConfig() {
  // @@protoc_insertion_point(destructor:research_scann.HierarchicalPartitionerConfig)
  SharedDtor();
}

void HierarchicalPartitionerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete input_output_;
}

void HierarchicalPartitionerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HierarchicalPartitionerConfig& HierarchicalPartitionerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HierarchicalPartitionerConfig_scann_2fproto_2fpartitioning_2eproto.base);
  return *internal_default_instance();
}


void HierarchicalPartitionerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.HierarchicalPartitionerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitioning_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(input_output_ != nullptr);
    input_output_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HierarchicalPartitionerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.InputOutputConfig input_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_input_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.PartitioningConfig partitioning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_partitioning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HierarchicalPartitionerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.HierarchicalPartitionerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.InputOutputConfig input_output = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.PartitioningConfig partitioning = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_partitioning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.HierarchicalPartitionerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.HierarchicalPartitionerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HierarchicalPartitionerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.HierarchicalPartitionerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.InputOutputConfig input_output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::input_output(this), output);
  }

  // repeated .research_scann.PartitioningConfig partitioning = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitioning_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->partitioning(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.HierarchicalPartitionerConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* HierarchicalPartitionerConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.HierarchicalPartitionerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.InputOutputConfig input_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::input_output(this), target);
  }

  // repeated .research_scann.PartitioningConfig partitioning = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitioning_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->partitioning(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.HierarchicalPartitionerConfig)
  return target;
}

size_t HierarchicalPartitionerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.HierarchicalPartitionerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.PartitioningConfig partitioning = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->partitioning_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->partitioning(static_cast<int>(i)));
    }
  }

  // optional .research_scann.InputOutputConfig input_output = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_output_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HierarchicalPartitionerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.HierarchicalPartitionerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HierarchicalPartitionerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HierarchicalPartitionerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.HierarchicalPartitionerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.HierarchicalPartitionerConfig)
    MergeFrom(*source);
  }
}

void HierarchicalPartitionerConfig::MergeFrom(const HierarchicalPartitionerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.HierarchicalPartitionerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitioning_.MergeFrom(from.partitioning_);
  if (from.has_input_output()) {
    mutable_input_output()->::research_scann::InputOutputConfig::MergeFrom(from.input_output());
  }
}

void HierarchicalPartitionerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.HierarchicalPartitionerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchicalPartitionerConfig::CopyFrom(const HierarchicalPartitionerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.HierarchicalPartitionerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalPartitionerConfig::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->partitioning())) return false;
  return true;
}

void HierarchicalPartitionerConfig::InternalSwap(HierarchicalPartitionerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&partitioning_)->InternalSwap(CastToBase(&other->partitioning_));
  swap(input_output_, other->input_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalPartitionerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::PartitioningConfig* Arena::CreateMaybeMessage< ::research_scann::PartitioningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::PartitioningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::DatabaseSpillingConfig* Arena::CreateMaybeMessage< ::research_scann::DatabaseSpillingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::DatabaseSpillingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::QuerySpillingConfig* Arena::CreateMaybeMessage< ::research_scann::QuerySpillingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::QuerySpillingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::TreeXHybridPartitioningConfig* Arena::CreateMaybeMessage< ::research_scann::TreeXHybridPartitioningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::TreeXHybridPartitioningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::TokenList* Arena::CreateMaybeMessage< ::research_scann::TokenList >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::TokenList >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::HierarchicalPartitionerConfig* Arena::CreateMaybeMessage< ::research_scann::HierarchicalPartitionerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::HierarchicalPartitionerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
