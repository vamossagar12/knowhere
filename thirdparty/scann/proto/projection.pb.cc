// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/projection.proto

#include "scann/proto/projection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto;
namespace research_scann {
class ProjectionConfig_VariableBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectionConfig_VariableBlock> _instance;
} _ProjectionConfig_VariableBlock_default_instance_;
class ProjectionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectionConfig> _instance;
} _ProjectionConfig_default_instance_;
class CkmeansConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CkmeansConfig> _instance;
} _CkmeansConfig_default_instance_;
class MeanStdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeanStdConfig> _instance;
} _MeanStdConfig_default_instance_;
class RandomBilinearConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomBilinearConfig> _instance;
} _RandomBilinearConfig_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_CkmeansConfig_default_instance_;
    new (ptr) ::research_scann::CkmeansConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::CkmeansConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto}, {}};

static void InitDefaultsscc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_MeanStdConfig_default_instance_;
    new (ptr) ::research_scann::MeanStdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::MeanStdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto}, {}};

static void InitDefaultsscc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_ProjectionConfig_default_instance_;
    new (ptr) ::research_scann::ProjectionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::ProjectionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto}, {
      &scc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto.base,
      &scc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto.base,
      &scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto.base,
      &scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto.base,}};

static void InitDefaultsscc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_ProjectionConfig_VariableBlock_default_instance_;
    new (ptr) ::research_scann::ProjectionConfig_VariableBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::ProjectionConfig_VariableBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto}, {}};

static void InitDefaultsscc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_RandomBilinearConfig_default_instance_;
    new (ptr) ::research_scann::RandomBilinearConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::RandomBilinearConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fprojection_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2fprojection_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fprojection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fprojection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig_VariableBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig_VariableBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig_VariableBlock, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig_VariableBlock, num_dims_per_block_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, projection_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, input_dim_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, num_dims_per_block_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, variable_blocks_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, seed_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, is_bit_packed_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, is_dense_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, build_covariance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, random_bilinear_config_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, ckmeans_config_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ProjectionConfig, meanstd_config_),
  3,
  5,
  9,
  4,
  ~0u,
  10,
  6,
  7,
  8,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, need_learning_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, projection_filename_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, num_clusters_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, num_rotation_iterations_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, rotation_convergence_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, max_sample_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, max_clustering_iterations_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CkmeansConfig, clustering_convergence_tolerance_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::MeanStdConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::MeanStdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::MeanStdConfig, projection_filename_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, input_vector_rows_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, input_vector_columns_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, proj_vector_rows_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RandomBilinearConfig, proj_vector_columns_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::research_scann::ProjectionConfig_VariableBlock)},
  { 9, 26, sizeof(::research_scann::ProjectionConfig)},
  { 38, 51, sizeof(::research_scann::CkmeansConfig)},
  { 59, 65, sizeof(::research_scann::MeanStdConfig)},
  { 66, 75, sizeof(::research_scann::RandomBilinearConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ProjectionConfig_VariableBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ProjectionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_CkmeansConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_MeanStdConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_RandomBilinearConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fprojection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034scann/proto/projection.proto\022\016research"
  "_scann\"\344\006\n\020ProjectionConfig\022H\n\017projectio"
  "n_type\030\001 \002(\0162/.research_scann.Projection"
  "Config.ProjectionType\022\021\n\tinput_dim\030\t \001(\004"
  "\022\025\n\nnum_blocks\030\002 \001(\005:\0011\022\032\n\022num_dims_per_"
  "block\030\003 \001(\005\022G\n\017variable_blocks\030\004 \003(\0132..r"
  "esearch_scann.ProjectionConfig.VariableB"
  "lock\022\017\n\004seed\030\005 \001(\005:\0011\022\034\n\ris_bit_packed\030\006"
  " \001(\010:\005false\022\026\n\010is_dense\030\007 \001(\010:\004true\022\036\n\020b"
  "uild_covariance\030\010 \001(\010:\004true\022D\n\026random_bi"
  "linear_config\030\n \001(\0132$.research_scann.Ran"
  "domBilinearConfig\0225\n\016ckmeans_config\030\013 \001("
  "\0132\035.research_scann.CkmeansConfig\0225\n\016mean"
  "std_config\030\014 \001(\0132\035.research_scann.MeanSt"
  "dConfig\032\?\n\rVariableBlock\022\022\n\nnum_blocks\030\001"
  " \002(\005\022\032\n\022num_dims_per_block\030\002 \002(\005\"\232\002\n\016Pro"
  "jectionType\022\010\n\004NONE\020\000\022\t\n\005CHUNK\020\001\022\022\n\016VARI"
  "ABLE_CHUNK\020\002\022\020\n\014RANDOM_GAUSS\020\003\022\021\n\rRANDOM"
  "_BINARY\020\004\022\031\n\025RANDOM_BINARY_DYNAMIC\020\005\022\030\n\024"
  "RANDOM_SPARSE_BINARY\020\006\022\025\n\021RANDOM_ORTHOGO"
  "NAL\020\007\022\007\n\003PCA\020\010\022\023\n\017RANDOM_BILINEAR\020\t\022\026\n\022C"
  "KMEANS_PROJECTION\020\013\022\026\n\022MEANSTD_PROJECTIO"
  "N\020\014\022\022\n\016IDENTITY_CHUNK\020\r\022\014\n\010TRUNCATE\020\016\"\250\002"
  "\n\rCkmeansConfig\022\033\n\rneed_learning\030\001 \001(\010:\004"
  "true\022\033\n\023projection_filename\030\002 \001(\t\022\031\n\014num"
  "_clusters\030\003 \001(\005:\003256\022$\n\027num_rotation_ite"
  "rations\030\004 \001(\005:\003100\022$\n\024rotation_convergen"
  "ce\030\005 \001(\002:\0060.0001\022\037\n\017max_sample_size\030\006 \001("
  "\005:\006100000\022$\n\031max_clustering_iterations\030\007"
  " \001(\005:\0011\022/\n clustering_convergence_tolera"
  "nce\030\010 \001(\002:\0051e-05\",\n\rMeanStdConfig\022\033\n\023pro"
  "jection_filename\030\001 \001(\t\"\206\001\n\024RandomBilinea"
  "rConfig\022\031\n\021input_vector_rows\030\001 \001(\005\022\034\n\024in"
  "put_vector_columns\030\002 \001(\005\022\030\n\020proj_vector_"
  "rows\030\003 \001(\005\022\033\n\023proj_vector_columns\030\004 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fprojection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fprojection_2eproto_sccs[5] = {
  &scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto.base,
  &scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto.base,
  &scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto.base,
  &scc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto.base,
  &scc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fprojection_2eproto_once;
static bool descriptor_table_scann_2fproto_2fprojection_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fprojection_2eproto = {
  &descriptor_table_scann_2fproto_2fprojection_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fprojection_2eproto, "scann/proto/projection.proto", 1399,
  &descriptor_table_scann_2fproto_2fprojection_2eproto_once, descriptor_table_scann_2fproto_2fprojection_2eproto_sccs, descriptor_table_scann_2fproto_2fprojection_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fprojection_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fprojection_2eproto, 5, file_level_enum_descriptors_scann_2fproto_2fprojection_2eproto, file_level_service_descriptors_scann_2fproto_2fprojection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fprojection_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fprojection_2eproto), true);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionConfig_ProjectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fprojection_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fprojection_2eproto[0];
}
bool ProjectionConfig_ProjectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProjectionConfig_ProjectionType ProjectionConfig::NONE;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::CHUNK;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::VARIABLE_CHUNK;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_GAUSS;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_BINARY;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_BINARY_DYNAMIC;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_SPARSE_BINARY;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_ORTHOGONAL;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::PCA;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::RANDOM_BILINEAR;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::CKMEANS_PROJECTION;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::MEANSTD_PROJECTION;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::IDENTITY_CHUNK;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::TRUNCATE;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::ProjectionType_MIN;
constexpr ProjectionConfig_ProjectionType ProjectionConfig::ProjectionType_MAX;
constexpr int ProjectionConfig::ProjectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ProjectionConfig_VariableBlock::InitAsDefaultInstance() {
}
class ProjectionConfig_VariableBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionConfig_VariableBlock>()._has_bits_);
  static void set_has_num_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_dims_per_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProjectionConfig_VariableBlock::ProjectionConfig_VariableBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.ProjectionConfig.VariableBlock)
}
ProjectionConfig_VariableBlock::ProjectionConfig_VariableBlock(const ProjectionConfig_VariableBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_blocks_, &from.num_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_dims_per_block_) -
    reinterpret_cast<char*>(&num_blocks_)) + sizeof(num_dims_per_block_));
  // @@protoc_insertion_point(copy_constructor:research_scann.ProjectionConfig.VariableBlock)
}

void ProjectionConfig_VariableBlock::SharedCtor() {
  ::memset(&num_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_dims_per_block_) -
      reinterpret_cast<char*>(&num_blocks_)) + sizeof(num_dims_per_block_));
}

ProjectionConfig_VariableBlock::~ProjectionConfig_VariableBlock() {
  // @@protoc_insertion_point(destructor:research_scann.ProjectionConfig.VariableBlock)
  SharedDtor();
}

void ProjectionConfig_VariableBlock::SharedDtor() {
}

void ProjectionConfig_VariableBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectionConfig_VariableBlock& ProjectionConfig_VariableBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectionConfig_VariableBlock_scann_2fproto_2fprojection_2eproto.base);
  return *internal_default_instance();
}


void ProjectionConfig_VariableBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ProjectionConfig.VariableBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_blocks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_dims_per_block_) -
        reinterpret_cast<char*>(&num_blocks_)) + sizeof(num_dims_per_block_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectionConfig_VariableBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_blocks(&has_bits);
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_dims_per_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_dims_per_block(&has_bits);
          num_dims_per_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectionConfig_VariableBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.ProjectionConfig.VariableBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_blocks = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_dims_per_block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_dims_per_block(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dims_per_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.ProjectionConfig.VariableBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.ProjectionConfig.VariableBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectionConfig_VariableBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.ProjectionConfig.VariableBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_blocks = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_blocks(), output);
  }

  // required int32 num_dims_per_block = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_dims_per_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.ProjectionConfig.VariableBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionConfig_VariableBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ProjectionConfig.VariableBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_blocks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_blocks(), target);
  }

  // required int32 num_dims_per_block = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_dims_per_block(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ProjectionConfig.VariableBlock)
  return target;
}

size_t ProjectionConfig_VariableBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:research_scann.ProjectionConfig.VariableBlock)
  size_t total_size = 0;

  if (has_num_blocks()) {
    // required int32 num_blocks = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_blocks());
  }

  if (has_num_dims_per_block()) {
    // required int32 num_dims_per_block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_dims_per_block());
  }

  return total_size;
}
size_t ProjectionConfig_VariableBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ProjectionConfig.VariableBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num_blocks = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_blocks());

    // required int32 num_dims_per_block = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_dims_per_block());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionConfig_VariableBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.ProjectionConfig.VariableBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionConfig_VariableBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionConfig_VariableBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.ProjectionConfig.VariableBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.ProjectionConfig.VariableBlock)
    MergeFrom(*source);
  }
}

void ProjectionConfig_VariableBlock::MergeFrom(const ProjectionConfig_VariableBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ProjectionConfig.VariableBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_blocks_ = from.num_blocks_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_dims_per_block_ = from.num_dims_per_block_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionConfig_VariableBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.ProjectionConfig.VariableBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionConfig_VariableBlock::CopyFrom(const ProjectionConfig_VariableBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ProjectionConfig.VariableBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionConfig_VariableBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProjectionConfig_VariableBlock::InternalSwap(ProjectionConfig_VariableBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_blocks_, other->num_blocks_);
  swap(num_dims_per_block_, other->num_dims_per_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionConfig_VariableBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectionConfig::InitAsDefaultInstance() {
  ::research_scann::_ProjectionConfig_default_instance_._instance.get_mutable()->random_bilinear_config_ = const_cast< ::research_scann::RandomBilinearConfig*>(
      ::research_scann::RandomBilinearConfig::internal_default_instance());
  ::research_scann::_ProjectionConfig_default_instance_._instance.get_mutable()->ckmeans_config_ = const_cast< ::research_scann::CkmeansConfig*>(
      ::research_scann::CkmeansConfig::internal_default_instance());
  ::research_scann::_ProjectionConfig_default_instance_._instance.get_mutable()->meanstd_config_ = const_cast< ::research_scann::MeanStdConfig*>(
      ::research_scann::MeanStdConfig::internal_default_instance());
}
class ProjectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionConfig>()._has_bits_);
  static void set_has_projection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_dims_per_block(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_bit_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_dense(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_build_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::research_scann::RandomBilinearConfig& random_bilinear_config(const ProjectionConfig* msg);
  static void set_has_random_bilinear_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::research_scann::CkmeansConfig& ckmeans_config(const ProjectionConfig* msg);
  static void set_has_ckmeans_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::MeanStdConfig& meanstd_config(const ProjectionConfig* msg);
  static void set_has_meanstd_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::research_scann::RandomBilinearConfig&
ProjectionConfig::_Internal::random_bilinear_config(const ProjectionConfig* msg) {
  return *msg->random_bilinear_config_;
}
const ::research_scann::CkmeansConfig&
ProjectionConfig::_Internal::ckmeans_config(const ProjectionConfig* msg) {
  return *msg->ckmeans_config_;
}
const ::research_scann::MeanStdConfig&
ProjectionConfig::_Internal::meanstd_config(const ProjectionConfig* msg) {
  return *msg->meanstd_config_;
}
ProjectionConfig::ProjectionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.ProjectionConfig)
}
ProjectionConfig::ProjectionConfig(const ProjectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      variable_blocks_(from.variable_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_random_bilinear_config()) {
    random_bilinear_config_ = new ::research_scann::RandomBilinearConfig(*from.random_bilinear_config_);
  } else {
    random_bilinear_config_ = nullptr;
  }
  if (from.has_ckmeans_config()) {
    ckmeans_config_ = new ::research_scann::CkmeansConfig(*from.ckmeans_config_);
  } else {
    ckmeans_config_ = nullptr;
  }
  if (from.has_meanstd_config()) {
    meanstd_config_ = new ::research_scann::MeanStdConfig(*from.meanstd_config_);
  } else {
    meanstd_config_ = nullptr;
  }
  ::memcpy(&projection_type_, &from.projection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&projection_type_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:research_scann.ProjectionConfig)
}

void ProjectionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto.base);
  ::memset(&random_bilinear_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_bit_packed_) -
      reinterpret_cast<char*>(&random_bilinear_config_)) + sizeof(is_bit_packed_));
  is_dense_ = true;
  build_covariance_ = true;
  num_blocks_ = 1;
  seed_ = 1;
}

ProjectionConfig::~ProjectionConfig() {
  // @@protoc_insertion_point(destructor:research_scann.ProjectionConfig)
  SharedDtor();
}

void ProjectionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete random_bilinear_config_;
  if (this != internal_default_instance()) delete ckmeans_config_;
  if (this != internal_default_instance()) delete meanstd_config_;
}

void ProjectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectionConfig& ProjectionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectionConfig_scann_2fproto_2fprojection_2eproto.base);
  return *internal_default_instance();
}


void ProjectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ProjectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(random_bilinear_config_ != nullptr);
      random_bilinear_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ckmeans_config_ != nullptr);
      ckmeans_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(meanstd_config_ != nullptr);
      meanstd_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&projection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_bit_packed_) -
        reinterpret_cast<char*>(&projection_type_)) + sizeof(is_bit_packed_));
    is_dense_ = true;
  }
  if (cached_has_bits & 0x00000700u) {
    build_covariance_ = true;
    num_blocks_ = 1;
    seed_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::ProjectionConfig_ProjectionType_IsValid(val))) {
            set_projection_type(static_cast<::research_scann::ProjectionConfig_ProjectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_blocks = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_blocks(&has_bits);
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_dims_per_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_dims_per_block(&has_bits);
          num_dims_per_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variable_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int32 seed = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_seed(&has_bits);
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_bit_packed = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_bit_packed(&has_bits);
          is_bit_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dense = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_dense(&has_bits);
          is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool build_covariance = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_build_covariance(&has_bits);
          build_covariance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 input_dim = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_input_dim(&has_bits);
          input_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_random_bilinear_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.CkmeansConfig ckmeans_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ckmeans_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.MeanStdConfig meanstd_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_meanstd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectionConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.ProjectionConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::ProjectionConfig_ProjectionType_IsValid(value)) {
            set_projection_type(static_cast< ::research_scann::ProjectionConfig_ProjectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_blocks = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_dims_per_block = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_dims_per_block(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dims_per_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variable_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seed = 5 [default = 1];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_seed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_bit_packed = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_bit_packed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bit_packed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dense = 7 [default = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_is_dense(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool build_covariance = 8 [default = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_build_covariance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &build_covariance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 input_dim = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_input_dim(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &input_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_bilinear_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.CkmeansConfig ckmeans_config = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ckmeans_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.MeanStdConfig meanstd_config = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meanstd_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.ProjectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.ProjectionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectionConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.ProjectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->projection_type(), output);
  }

  // optional int32 num_blocks = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_blocks(), output);
  }

  // optional int32 num_dims_per_block = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_dims_per_block(), output);
  }

  // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variable_blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->variable_blocks(static_cast<int>(i)),
      output);
  }

  // optional int32 seed = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->seed(), output);
  }

  // optional bool is_bit_packed = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_bit_packed(), output);
  }

  // optional bool is_dense = 7 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_dense(), output);
  }

  // optional bool build_covariance = 8 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->build_covariance(), output);
  }

  // optional uint64 input_dim = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->input_dim(), output);
  }

  // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::random_bilinear_config(this), output);
  }

  // optional .research_scann.CkmeansConfig ckmeans_config = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::ckmeans_config(this), output);
  }

  // optional .research_scann.MeanStdConfig meanstd_config = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::meanstd_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.ProjectionConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ProjectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->projection_type(), target);
  }

  // optional int32 num_blocks = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_blocks(), target);
  }

  // optional int32 num_dims_per_block = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_dims_per_block(), target);
  }

  // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variable_blocks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->variable_blocks(static_cast<int>(i)), target);
  }

  // optional int32 seed = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->seed(), target);
  }

  // optional bool is_bit_packed = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_bit_packed(), target);
  }

  // optional bool is_dense = 7 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_dense(), target);
  }

  // optional bool build_covariance = 8 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->build_covariance(), target);
  }

  // optional uint64 input_dim = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->input_dim(), target);
  }

  // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::random_bilinear_config(this), target);
  }

  // optional .research_scann.CkmeansConfig ckmeans_config = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::ckmeans_config(this), target);
  }

  // optional .research_scann.MeanStdConfig meanstd_config = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::meanstd_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ProjectionConfig)
  return target;
}

size_t ProjectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ProjectionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
  if (has_projection_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->projection_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->variable_blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variable_blocks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *random_bilinear_config_);
    }

    // optional .research_scann.CkmeansConfig ckmeans_config = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ckmeans_config_);
    }

    // optional .research_scann.MeanStdConfig meanstd_config = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meanstd_config_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional int32 num_dims_per_block = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_dims_per_block());
    }

    // optional uint64 input_dim = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->input_dim());
    }

    // optional bool is_bit_packed = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_dense = 7 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool build_covariance = 8 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 num_blocks = 2 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_blocks());
    }

    // optional int32 seed = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->seed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.ProjectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.ProjectionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.ProjectionConfig)
    MergeFrom(*source);
  }
}

void ProjectionConfig::MergeFrom(const ProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ProjectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variable_blocks_.MergeFrom(from.variable_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_random_bilinear_config()->::research_scann::RandomBilinearConfig::MergeFrom(from.random_bilinear_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ckmeans_config()->::research_scann::CkmeansConfig::MergeFrom(from.ckmeans_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_meanstd_config()->::research_scann::MeanStdConfig::MergeFrom(from.meanstd_config());
    }
    if (cached_has_bits & 0x00000008u) {
      projection_type_ = from.projection_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_dims_per_block_ = from.num_dims_per_block_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_dim_ = from.input_dim_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_bit_packed_ = from.is_bit_packed_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_dense_ = from.is_dense_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      build_covariance_ = from.build_covariance_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_blocks_ = from.num_blocks_;
    }
    if (cached_has_bits & 0x00000400u) {
      seed_ = from.seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.ProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionConfig::CopyFrom(const ProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->variable_blocks())) return false;
  return true;
}

void ProjectionConfig::InternalSwap(ProjectionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&variable_blocks_)->InternalSwap(CastToBase(&other->variable_blocks_));
  swap(random_bilinear_config_, other->random_bilinear_config_);
  swap(ckmeans_config_, other->ckmeans_config_);
  swap(meanstd_config_, other->meanstd_config_);
  swap(projection_type_, other->projection_type_);
  swap(num_dims_per_block_, other->num_dims_per_block_);
  swap(input_dim_, other->input_dim_);
  swap(is_bit_packed_, other->is_bit_packed_);
  swap(is_dense_, other->is_dense_);
  swap(build_covariance_, other->build_covariance_);
  swap(num_blocks_, other->num_blocks_);
  swap(seed_, other->seed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CkmeansConfig::InitAsDefaultInstance() {
}
class CkmeansConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CkmeansConfig>()._has_bits_);
  static void set_has_need_learning(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_projection_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_clusters(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_rotation_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rotation_convergence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_clustering_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clustering_convergence_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CkmeansConfig::CkmeansConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.CkmeansConfig)
}
CkmeansConfig::CkmeansConfig(const CkmeansConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  projection_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_projection_filename()) {
    projection_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_filename_);
  }
  ::memcpy(&clustering_convergence_tolerance_, &from.clustering_convergence_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_clustering_iterations_) -
    reinterpret_cast<char*>(&clustering_convergence_tolerance_)) + sizeof(max_clustering_iterations_));
  // @@protoc_insertion_point(copy_constructor:research_scann.CkmeansConfig)
}

void CkmeansConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto.base);
  projection_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clustering_convergence_tolerance_ = 1e-05f;
  need_learning_ = true;
  num_clusters_ = 256;
  num_rotation_iterations_ = 100;
  rotation_convergence_ = 0.0001f;
  max_sample_size_ = 100000;
  max_clustering_iterations_ = 1;
}

CkmeansConfig::~CkmeansConfig() {
  // @@protoc_insertion_point(destructor:research_scann.CkmeansConfig)
  SharedDtor();
}

void CkmeansConfig::SharedDtor() {
  projection_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CkmeansConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CkmeansConfig& CkmeansConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CkmeansConfig_scann_2fproto_2fprojection_2eproto.base);
  return *internal_default_instance();
}


void CkmeansConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.CkmeansConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      projection_filename_.ClearNonDefaultToEmptyNoArena();
    }
    clustering_convergence_tolerance_ = 1e-05f;
    need_learning_ = true;
    num_clusters_ = 256;
    num_rotation_iterations_ = 100;
    rotation_convergence_ = 0.0001f;
    max_sample_size_ = 100000;
    max_clustering_iterations_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CkmeansConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool need_learning = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_need_learning(&has_bits);
          need_learning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string projection_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_projection_filename(), ptr, ctx, "research_scann.CkmeansConfig.projection_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_clusters = 3 [default = 256];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_clusters(&has_bits);
          num_clusters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_rotation_iterations = 4 [default = 100];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_rotation_iterations(&has_bits);
          num_rotation_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation_convergence = 5 [default = 0.0001];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rotation_convergence(&has_bits);
          rotation_convergence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_sample_size = 6 [default = 100000];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_sample_size(&has_bits);
          max_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_clustering_iterations = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_clustering_iterations(&has_bits);
          max_clustering_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_clustering_convergence_tolerance(&has_bits);
          clustering_convergence_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CkmeansConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.CkmeansConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool need_learning = 1 [default = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_need_learning(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_learning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string projection_filename = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_projection_filename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.CkmeansConfig.projection_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_clusters = 3 [default = 256];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_clusters(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_clusters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_rotation_iterations = 4 [default = 100];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_rotation_iterations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rotation_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rotation_convergence = 5 [default = 0.0001];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_rotation_convergence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_convergence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_sample_size = 6 [default = 100000];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_sample_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sample_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_clustering_iterations = 7 [default = 1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_max_clustering_iterations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_clustering_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_clustering_convergence_tolerance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clustering_convergence_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.CkmeansConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.CkmeansConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CkmeansConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.CkmeansConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_learning = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->need_learning(), output);
  }

  // optional string projection_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.CkmeansConfig.projection_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->projection_filename(), output);
  }

  // optional int32 num_clusters = 3 [default = 256];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_clusters(), output);
  }

  // optional int32 num_rotation_iterations = 4 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_rotation_iterations(), output);
  }

  // optional float rotation_convergence = 5 [default = 0.0001];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->rotation_convergence(), output);
  }

  // optional int32 max_sample_size = 6 [default = 100000];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->max_sample_size(), output);
  }

  // optional int32 max_clustering_iterations = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->max_clustering_iterations(), output);
  }

  // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->clustering_convergence_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.CkmeansConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* CkmeansConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.CkmeansConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_learning = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->need_learning(), target);
  }

  // optional string projection_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.CkmeansConfig.projection_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->projection_filename(), target);
  }

  // optional int32 num_clusters = 3 [default = 256];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_clusters(), target);
  }

  // optional int32 num_rotation_iterations = 4 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_rotation_iterations(), target);
  }

  // optional float rotation_convergence = 5 [default = 0.0001];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->rotation_convergence(), target);
  }

  // optional int32 max_sample_size = 6 [default = 100000];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->max_sample_size(), target);
  }

  // optional int32 max_clustering_iterations = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->max_clustering_iterations(), target);
  }

  // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->clustering_convergence_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.CkmeansConfig)
  return target;
}

size_t CkmeansConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.CkmeansConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string projection_filename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->projection_filename());
    }

    // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool need_learning = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 num_clusters = 3 [default = 256];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_clusters());
    }

    // optional int32 num_rotation_iterations = 4 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_rotation_iterations());
    }

    // optional float rotation_convergence = 5 [default = 0.0001];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 max_sample_size = 6 [default = 100000];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_sample_size());
    }

    // optional int32 max_clustering_iterations = 7 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_clustering_iterations());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CkmeansConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.CkmeansConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CkmeansConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CkmeansConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.CkmeansConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.CkmeansConfig)
    MergeFrom(*source);
  }
}

void CkmeansConfig::MergeFrom(const CkmeansConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.CkmeansConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      projection_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      clustering_convergence_tolerance_ = from.clustering_convergence_tolerance_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_learning_ = from.need_learning_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_clusters_ = from.num_clusters_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_rotation_iterations_ = from.num_rotation_iterations_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_convergence_ = from.rotation_convergence_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_sample_size_ = from.max_sample_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_clustering_iterations_ = from.max_clustering_iterations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CkmeansConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.CkmeansConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CkmeansConfig::CopyFrom(const CkmeansConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.CkmeansConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CkmeansConfig::IsInitialized() const {
  return true;
}

void CkmeansConfig::InternalSwap(CkmeansConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  projection_filename_.Swap(&other->projection_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clustering_convergence_tolerance_, other->clustering_convergence_tolerance_);
  swap(need_learning_, other->need_learning_);
  swap(num_clusters_, other->num_clusters_);
  swap(num_rotation_iterations_, other->num_rotation_iterations_);
  swap(rotation_convergence_, other->rotation_convergence_);
  swap(max_sample_size_, other->max_sample_size_);
  swap(max_clustering_iterations_, other->max_clustering_iterations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CkmeansConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeanStdConfig::InitAsDefaultInstance() {
}
class MeanStdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MeanStdConfig>()._has_bits_);
  static void set_has_projection_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MeanStdConfig::MeanStdConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.MeanStdConfig)
}
MeanStdConfig::MeanStdConfig(const MeanStdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  projection_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_projection_filename()) {
    projection_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_filename_);
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.MeanStdConfig)
}

void MeanStdConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto.base);
  projection_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeanStdConfig::~MeanStdConfig() {
  // @@protoc_insertion_point(destructor:research_scann.MeanStdConfig)
  SharedDtor();
}

void MeanStdConfig::SharedDtor() {
  projection_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeanStdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeanStdConfig& MeanStdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeanStdConfig_scann_2fproto_2fprojection_2eproto.base);
  return *internal_default_instance();
}


void MeanStdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.MeanStdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    projection_filename_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MeanStdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string projection_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_projection_filename(), ptr, ctx, "research_scann.MeanStdConfig.projection_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MeanStdConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.MeanStdConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string projection_filename = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_projection_filename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.MeanStdConfig.projection_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.MeanStdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.MeanStdConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MeanStdConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.MeanStdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string projection_filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.MeanStdConfig.projection_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->projection_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.MeanStdConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* MeanStdConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.MeanStdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string projection_filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_filename().data(), static_cast<int>(this->projection_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.MeanStdConfig.projection_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->projection_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.MeanStdConfig)
  return target;
}

size_t MeanStdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.MeanStdConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string projection_filename = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->projection_filename());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeanStdConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.MeanStdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MeanStdConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeanStdConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.MeanStdConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.MeanStdConfig)
    MergeFrom(*source);
  }
}

void MeanStdConfig::MergeFrom(const MeanStdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.MeanStdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_projection_filename()) {
    _has_bits_[0] |= 0x00000001u;
    projection_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_filename_);
  }
}

void MeanStdConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.MeanStdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeanStdConfig::CopyFrom(const MeanStdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.MeanStdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeanStdConfig::IsInitialized() const {
  return true;
}

void MeanStdConfig::InternalSwap(MeanStdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  projection_filename_.Swap(&other->projection_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeanStdConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomBilinearConfig::InitAsDefaultInstance() {
}
class RandomBilinearConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomBilinearConfig>()._has_bits_);
  static void set_has_input_vector_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_vector_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proj_vector_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proj_vector_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RandomBilinearConfig::RandomBilinearConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.RandomBilinearConfig)
}
RandomBilinearConfig::RandomBilinearConfig(const RandomBilinearConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_vector_rows_, &from.input_vector_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&proj_vector_columns_) -
    reinterpret_cast<char*>(&input_vector_rows_)) + sizeof(proj_vector_columns_));
  // @@protoc_insertion_point(copy_constructor:research_scann.RandomBilinearConfig)
}

void RandomBilinearConfig::SharedCtor() {
  ::memset(&input_vector_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proj_vector_columns_) -
      reinterpret_cast<char*>(&input_vector_rows_)) + sizeof(proj_vector_columns_));
}

RandomBilinearConfig::~RandomBilinearConfig() {
  // @@protoc_insertion_point(destructor:research_scann.RandomBilinearConfig)
  SharedDtor();
}

void RandomBilinearConfig::SharedDtor() {
}

void RandomBilinearConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomBilinearConfig& RandomBilinearConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomBilinearConfig_scann_2fproto_2fprojection_2eproto.base);
  return *internal_default_instance();
}


void RandomBilinearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.RandomBilinearConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&input_vector_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proj_vector_columns_) -
        reinterpret_cast<char*>(&input_vector_rows_)) + sizeof(proj_vector_columns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomBilinearConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 input_vector_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_input_vector_rows(&has_bits);
          input_vector_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 input_vector_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_input_vector_columns(&has_bits);
          input_vector_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj_vector_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_proj_vector_rows(&has_bits);
          proj_vector_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proj_vector_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_proj_vector_columns(&has_bits);
          proj_vector_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomBilinearConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.RandomBilinearConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 input_vector_rows = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_input_vector_rows(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_vector_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 input_vector_columns = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_input_vector_columns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_vector_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proj_vector_rows = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_proj_vector_rows(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_vector_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proj_vector_columns = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_proj_vector_columns(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_vector_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.RandomBilinearConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.RandomBilinearConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomBilinearConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.RandomBilinearConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 input_vector_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->input_vector_rows(), output);
  }

  // optional int32 input_vector_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->input_vector_columns(), output);
  }

  // optional int32 proj_vector_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->proj_vector_rows(), output);
  }

  // optional int32 proj_vector_columns = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->proj_vector_columns(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.RandomBilinearConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomBilinearConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.RandomBilinearConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 input_vector_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->input_vector_rows(), target);
  }

  // optional int32 input_vector_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->input_vector_columns(), target);
  }

  // optional int32 proj_vector_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->proj_vector_rows(), target);
  }

  // optional int32 proj_vector_columns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->proj_vector_columns(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.RandomBilinearConfig)
  return target;
}

size_t RandomBilinearConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.RandomBilinearConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 input_vector_rows = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->input_vector_rows());
    }

    // optional int32 input_vector_columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->input_vector_columns());
    }

    // optional int32 proj_vector_rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->proj_vector_rows());
    }

    // optional int32 proj_vector_columns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->proj_vector_columns());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomBilinearConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.RandomBilinearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomBilinearConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomBilinearConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.RandomBilinearConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.RandomBilinearConfig)
    MergeFrom(*source);
  }
}

void RandomBilinearConfig::MergeFrom(const RandomBilinearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.RandomBilinearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      input_vector_rows_ = from.input_vector_rows_;
    }
    if (cached_has_bits & 0x00000002u) {
      input_vector_columns_ = from.input_vector_columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      proj_vector_rows_ = from.proj_vector_rows_;
    }
    if (cached_has_bits & 0x00000008u) {
      proj_vector_columns_ = from.proj_vector_columns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomBilinearConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.RandomBilinearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBilinearConfig::CopyFrom(const RandomBilinearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.RandomBilinearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBilinearConfig::IsInitialized() const {
  return true;
}

void RandomBilinearConfig::InternalSwap(RandomBilinearConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(input_vector_rows_, other->input_vector_rows_);
  swap(input_vector_columns_, other->input_vector_columns_);
  swap(proj_vector_rows_, other->proj_vector_rows_);
  swap(proj_vector_columns_, other->proj_vector_columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomBilinearConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::ProjectionConfig_VariableBlock* Arena::CreateMaybeMessage< ::research_scann::ProjectionConfig_VariableBlock >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::ProjectionConfig_VariableBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::ProjectionConfig* Arena::CreateMaybeMessage< ::research_scann::ProjectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::ProjectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::CkmeansConfig* Arena::CreateMaybeMessage< ::research_scann::CkmeansConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::CkmeansConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::MeanStdConfig* Arena::CreateMaybeMessage< ::research_scann::MeanStdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::MeanStdConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::RandomBilinearConfig* Arena::CreateMaybeMessage< ::research_scann::RandomBilinearConfig >(Arena* arena) {
  return Arena::CreateInternal< ::research_scann::RandomBilinearConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
