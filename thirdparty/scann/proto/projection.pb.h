// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/projection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fprojection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fprojection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fprojection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fprojection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fprojection_2eproto;
namespace research_scann {
class CkmeansConfig;
class CkmeansConfigDefaultTypeInternal;
extern CkmeansConfigDefaultTypeInternal _CkmeansConfig_default_instance_;
class MeanStdConfig;
class MeanStdConfigDefaultTypeInternal;
extern MeanStdConfigDefaultTypeInternal _MeanStdConfig_default_instance_;
class ProjectionConfig;
class ProjectionConfigDefaultTypeInternal;
extern ProjectionConfigDefaultTypeInternal _ProjectionConfig_default_instance_;
class ProjectionConfig_VariableBlock;
class ProjectionConfig_VariableBlockDefaultTypeInternal;
extern ProjectionConfig_VariableBlockDefaultTypeInternal _ProjectionConfig_VariableBlock_default_instance_;
class RandomBilinearConfig;
class RandomBilinearConfigDefaultTypeInternal;
extern RandomBilinearConfigDefaultTypeInternal _RandomBilinearConfig_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::CkmeansConfig* Arena::CreateMaybeMessage<::research_scann::CkmeansConfig>(Arena*);
template<> ::research_scann::MeanStdConfig* Arena::CreateMaybeMessage<::research_scann::MeanStdConfig>(Arena*);
template<> ::research_scann::ProjectionConfig* Arena::CreateMaybeMessage<::research_scann::ProjectionConfig>(Arena*);
template<> ::research_scann::ProjectionConfig_VariableBlock* Arena::CreateMaybeMessage<::research_scann::ProjectionConfig_VariableBlock>(Arena*);
template<> ::research_scann::RandomBilinearConfig* Arena::CreateMaybeMessage<::research_scann::RandomBilinearConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

enum ProjectionConfig_ProjectionType : int {
  ProjectionConfig_ProjectionType_NONE = 0,
  ProjectionConfig_ProjectionType_CHUNK = 1,
  ProjectionConfig_ProjectionType_VARIABLE_CHUNK = 2,
  ProjectionConfig_ProjectionType_RANDOM_GAUSS = 3,
  ProjectionConfig_ProjectionType_RANDOM_BINARY = 4,
  ProjectionConfig_ProjectionType_RANDOM_BINARY_DYNAMIC = 5,
  ProjectionConfig_ProjectionType_RANDOM_SPARSE_BINARY = 6,
  ProjectionConfig_ProjectionType_RANDOM_ORTHOGONAL = 7,
  ProjectionConfig_ProjectionType_PCA = 8,
  ProjectionConfig_ProjectionType_RANDOM_BILINEAR = 9,
  ProjectionConfig_ProjectionType_CKMEANS_PROJECTION = 11,
  ProjectionConfig_ProjectionType_MEANSTD_PROJECTION = 12,
  ProjectionConfig_ProjectionType_IDENTITY_CHUNK = 13,
  ProjectionConfig_ProjectionType_TRUNCATE = 14
};
bool ProjectionConfig_ProjectionType_IsValid(int value);
constexpr ProjectionConfig_ProjectionType ProjectionConfig_ProjectionType_ProjectionType_MIN = ProjectionConfig_ProjectionType_NONE;
constexpr ProjectionConfig_ProjectionType ProjectionConfig_ProjectionType_ProjectionType_MAX = ProjectionConfig_ProjectionType_TRUNCATE;
constexpr int ProjectionConfig_ProjectionType_ProjectionType_ARRAYSIZE = ProjectionConfig_ProjectionType_ProjectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionConfig_ProjectionType_descriptor();
template<typename T>
inline const std::string& ProjectionConfig_ProjectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectionConfig_ProjectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectionConfig_ProjectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectionConfig_ProjectionType_descriptor(), enum_t_value);
}
inline bool ProjectionConfig_ProjectionType_Parse(
    const std::string& name, ProjectionConfig_ProjectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectionConfig_ProjectionType>(
    ProjectionConfig_ProjectionType_descriptor(), name, value);
}
// ===================================================================

class ProjectionConfig_VariableBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.ProjectionConfig.VariableBlock) */ {
 public:
  ProjectionConfig_VariableBlock();
  virtual ~ProjectionConfig_VariableBlock();

  ProjectionConfig_VariableBlock(const ProjectionConfig_VariableBlock& from);
  ProjectionConfig_VariableBlock(ProjectionConfig_VariableBlock&& from) noexcept
    : ProjectionConfig_VariableBlock() {
    *this = ::std::move(from);
  }

  inline ProjectionConfig_VariableBlock& operator=(const ProjectionConfig_VariableBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionConfig_VariableBlock& operator=(ProjectionConfig_VariableBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectionConfig_VariableBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectionConfig_VariableBlock* internal_default_instance() {
    return reinterpret_cast<const ProjectionConfig_VariableBlock*>(
               &_ProjectionConfig_VariableBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProjectionConfig_VariableBlock& a, ProjectionConfig_VariableBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionConfig_VariableBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectionConfig_VariableBlock* New() const final {
    return CreateMaybeMessage<ProjectionConfig_VariableBlock>(nullptr);
  }

  ProjectionConfig_VariableBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectionConfig_VariableBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectionConfig_VariableBlock& from);
  void MergeFrom(const ProjectionConfig_VariableBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionConfig_VariableBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.ProjectionConfig.VariableBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fprojection_2eproto);
    return ::descriptor_table_scann_2fproto_2fprojection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBlocksFieldNumber = 1,
    kNumDimsPerBlockFieldNumber = 2,
  };
  // required int32 num_blocks = 1;
  bool has_num_blocks() const;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 num_dims_per_block = 2;
  bool has_num_dims_per_block() const;
  void clear_num_dims_per_block();
  ::PROTOBUF_NAMESPACE_ID::int32 num_dims_per_block() const;
  void set_num_dims_per_block(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.ProjectionConfig.VariableBlock)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_dims_per_block_;
  friend struct ::TableStruct_scann_2fproto_2fprojection_2eproto;
};
// -------------------------------------------------------------------

class ProjectionConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.ProjectionConfig) */ {
 public:
  ProjectionConfig();
  virtual ~ProjectionConfig();

  ProjectionConfig(const ProjectionConfig& from);
  ProjectionConfig(ProjectionConfig&& from) noexcept
    : ProjectionConfig() {
    *this = ::std::move(from);
  }

  inline ProjectionConfig& operator=(const ProjectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionConfig& operator=(ProjectionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectionConfig* internal_default_instance() {
    return reinterpret_cast<const ProjectionConfig*>(
               &_ProjectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectionConfig& a, ProjectionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectionConfig* New() const final {
    return CreateMaybeMessage<ProjectionConfig>(nullptr);
  }

  ProjectionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectionConfig& from);
  void MergeFrom(const ProjectionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.ProjectionConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fprojection_2eproto);
    return ::descriptor_table_scann_2fproto_2fprojection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProjectionConfig_VariableBlock VariableBlock;

  typedef ProjectionConfig_ProjectionType ProjectionType;
  static constexpr ProjectionType NONE =
    ProjectionConfig_ProjectionType_NONE;
  static constexpr ProjectionType CHUNK =
    ProjectionConfig_ProjectionType_CHUNK;
  static constexpr ProjectionType VARIABLE_CHUNK =
    ProjectionConfig_ProjectionType_VARIABLE_CHUNK;
  static constexpr ProjectionType RANDOM_GAUSS =
    ProjectionConfig_ProjectionType_RANDOM_GAUSS;
  static constexpr ProjectionType RANDOM_BINARY =
    ProjectionConfig_ProjectionType_RANDOM_BINARY;
  static constexpr ProjectionType RANDOM_BINARY_DYNAMIC =
    ProjectionConfig_ProjectionType_RANDOM_BINARY_DYNAMIC;
  static constexpr ProjectionType RANDOM_SPARSE_BINARY =
    ProjectionConfig_ProjectionType_RANDOM_SPARSE_BINARY;
  static constexpr ProjectionType RANDOM_ORTHOGONAL =
    ProjectionConfig_ProjectionType_RANDOM_ORTHOGONAL;
  static constexpr ProjectionType PCA =
    ProjectionConfig_ProjectionType_PCA;
  static constexpr ProjectionType RANDOM_BILINEAR =
    ProjectionConfig_ProjectionType_RANDOM_BILINEAR;
  static constexpr ProjectionType CKMEANS_PROJECTION =
    ProjectionConfig_ProjectionType_CKMEANS_PROJECTION;
  static constexpr ProjectionType MEANSTD_PROJECTION =
    ProjectionConfig_ProjectionType_MEANSTD_PROJECTION;
  static constexpr ProjectionType IDENTITY_CHUNK =
    ProjectionConfig_ProjectionType_IDENTITY_CHUNK;
  static constexpr ProjectionType TRUNCATE =
    ProjectionConfig_ProjectionType_TRUNCATE;
  static inline bool ProjectionType_IsValid(int value) {
    return ProjectionConfig_ProjectionType_IsValid(value);
  }
  static constexpr ProjectionType ProjectionType_MIN =
    ProjectionConfig_ProjectionType_ProjectionType_MIN;
  static constexpr ProjectionType ProjectionType_MAX =
    ProjectionConfig_ProjectionType_ProjectionType_MAX;
  static constexpr int ProjectionType_ARRAYSIZE =
    ProjectionConfig_ProjectionType_ProjectionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProjectionType_descriptor() {
    return ProjectionConfig_ProjectionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProjectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProjectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProjectionType_Name.");
    return ProjectionConfig_ProjectionType_Name(enum_t_value);
  }
  static inline bool ProjectionType_Parse(const std::string& name,
      ProjectionType* value) {
    return ProjectionConfig_ProjectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVariableBlocksFieldNumber = 4,
    kRandomBilinearConfigFieldNumber = 10,
    kCkmeansConfigFieldNumber = 11,
    kMeanstdConfigFieldNumber = 12,
    kProjectionTypeFieldNumber = 1,
    kNumDimsPerBlockFieldNumber = 3,
    kInputDimFieldNumber = 9,
    kIsBitPackedFieldNumber = 6,
    kIsDenseFieldNumber = 7,
    kBuildCovarianceFieldNumber = 8,
    kNumBlocksFieldNumber = 2,
    kSeedFieldNumber = 5,
  };
  // repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
  int variable_blocks_size() const;
  void clear_variable_blocks();
  ::research_scann::ProjectionConfig_VariableBlock* mutable_variable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::ProjectionConfig_VariableBlock >*
      mutable_variable_blocks();
  const ::research_scann::ProjectionConfig_VariableBlock& variable_blocks(int index) const;
  ::research_scann::ProjectionConfig_VariableBlock* add_variable_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::ProjectionConfig_VariableBlock >&
      variable_blocks() const;

  // optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
  bool has_random_bilinear_config() const;
  void clear_random_bilinear_config();
  const ::research_scann::RandomBilinearConfig& random_bilinear_config() const;
  ::research_scann::RandomBilinearConfig* release_random_bilinear_config();
  ::research_scann::RandomBilinearConfig* mutable_random_bilinear_config();
  void set_allocated_random_bilinear_config(::research_scann::RandomBilinearConfig* random_bilinear_config);

  // optional .research_scann.CkmeansConfig ckmeans_config = 11;
  bool has_ckmeans_config() const;
  void clear_ckmeans_config();
  const ::research_scann::CkmeansConfig& ckmeans_config() const;
  ::research_scann::CkmeansConfig* release_ckmeans_config();
  ::research_scann::CkmeansConfig* mutable_ckmeans_config();
  void set_allocated_ckmeans_config(::research_scann::CkmeansConfig* ckmeans_config);

  // optional .research_scann.MeanStdConfig meanstd_config = 12;
  bool has_meanstd_config() const;
  void clear_meanstd_config();
  const ::research_scann::MeanStdConfig& meanstd_config() const;
  ::research_scann::MeanStdConfig* release_meanstd_config();
  ::research_scann::MeanStdConfig* mutable_meanstd_config();
  void set_allocated_meanstd_config(::research_scann::MeanStdConfig* meanstd_config);

  // required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
  bool has_projection_type() const;
  void clear_projection_type();
  ::research_scann::ProjectionConfig_ProjectionType projection_type() const;
  void set_projection_type(::research_scann::ProjectionConfig_ProjectionType value);

  // optional int32 num_dims_per_block = 3;
  bool has_num_dims_per_block() const;
  void clear_num_dims_per_block();
  ::PROTOBUF_NAMESPACE_ID::int32 num_dims_per_block() const;
  void set_num_dims_per_block(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 input_dim = 9;
  bool has_input_dim() const;
  void clear_input_dim();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_dim() const;
  void set_input_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool is_bit_packed = 6 [default = false];
  bool has_is_bit_packed() const;
  void clear_is_bit_packed();
  bool is_bit_packed() const;
  void set_is_bit_packed(bool value);

  // optional bool is_dense = 7 [default = true];
  bool has_is_dense() const;
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);

  // optional bool build_covariance = 8 [default = true];
  bool has_build_covariance() const;
  void clear_build_covariance();
  bool build_covariance() const;
  void set_build_covariance(bool value);

  // optional int32 num_blocks = 2 [default = 1];
  bool has_num_blocks() const;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 seed = 5 [default = 1];
  bool has_seed() const;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.ProjectionConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::ProjectionConfig_VariableBlock > variable_blocks_;
  ::research_scann::RandomBilinearConfig* random_bilinear_config_;
  ::research_scann::CkmeansConfig* ckmeans_config_;
  ::research_scann::MeanStdConfig* meanstd_config_;
  int projection_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_dims_per_block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_dim_;
  bool is_bit_packed_;
  bool is_dense_;
  bool build_covariance_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  friend struct ::TableStruct_scann_2fproto_2fprojection_2eproto;
};
// -------------------------------------------------------------------

class CkmeansConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.CkmeansConfig) */ {
 public:
  CkmeansConfig();
  virtual ~CkmeansConfig();

  CkmeansConfig(const CkmeansConfig& from);
  CkmeansConfig(CkmeansConfig&& from) noexcept
    : CkmeansConfig() {
    *this = ::std::move(from);
  }

  inline CkmeansConfig& operator=(const CkmeansConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CkmeansConfig& operator=(CkmeansConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CkmeansConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CkmeansConfig* internal_default_instance() {
    return reinterpret_cast<const CkmeansConfig*>(
               &_CkmeansConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CkmeansConfig& a, CkmeansConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CkmeansConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CkmeansConfig* New() const final {
    return CreateMaybeMessage<CkmeansConfig>(nullptr);
  }

  CkmeansConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CkmeansConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CkmeansConfig& from);
  void MergeFrom(const CkmeansConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CkmeansConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.CkmeansConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fprojection_2eproto);
    return ::descriptor_table_scann_2fproto_2fprojection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFilenameFieldNumber = 2,
    kClusteringConvergenceToleranceFieldNumber = 8,
    kNeedLearningFieldNumber = 1,
    kNumClustersFieldNumber = 3,
    kNumRotationIterationsFieldNumber = 4,
    kRotationConvergenceFieldNumber = 5,
    kMaxSampleSizeFieldNumber = 6,
    kMaxClusteringIterationsFieldNumber = 7,
  };
  // optional string projection_filename = 2;
  bool has_projection_filename() const;
  void clear_projection_filename();
  const std::string& projection_filename() const;
  void set_projection_filename(const std::string& value);
  void set_projection_filename(std::string&& value);
  void set_projection_filename(const char* value);
  void set_projection_filename(const char* value, size_t size);
  std::string* mutable_projection_filename();
  std::string* release_projection_filename();
  void set_allocated_projection_filename(std::string* projection_filename);

  // optional float clustering_convergence_tolerance = 8 [default = 1e-05];
  bool has_clustering_convergence_tolerance() const;
  void clear_clustering_convergence_tolerance();
  float clustering_convergence_tolerance() const;
  void set_clustering_convergence_tolerance(float value);

  // optional bool need_learning = 1 [default = true];
  bool has_need_learning() const;
  void clear_need_learning();
  bool need_learning() const;
  void set_need_learning(bool value);

  // optional int32 num_clusters = 3 [default = 256];
  bool has_num_clusters() const;
  void clear_num_clusters();
  ::PROTOBUF_NAMESPACE_ID::int32 num_clusters() const;
  void set_num_clusters(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_rotation_iterations = 4 [default = 100];
  bool has_num_rotation_iterations() const;
  void clear_num_rotation_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 num_rotation_iterations() const;
  void set_num_rotation_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float rotation_convergence = 5 [default = 0.0001];
  bool has_rotation_convergence() const;
  void clear_rotation_convergence();
  float rotation_convergence() const;
  void set_rotation_convergence(float value);

  // optional int32 max_sample_size = 6 [default = 100000];
  bool has_max_sample_size() const;
  void clear_max_sample_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_sample_size() const;
  void set_max_sample_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_clustering_iterations = 7 [default = 1];
  bool has_max_clustering_iterations() const;
  void clear_max_clustering_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 max_clustering_iterations() const;
  void set_max_clustering_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.CkmeansConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projection_filename_;
  float clustering_convergence_tolerance_;
  bool need_learning_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_clusters_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_rotation_iterations_;
  float rotation_convergence_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_sample_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_clustering_iterations_;
  friend struct ::TableStruct_scann_2fproto_2fprojection_2eproto;
};
// -------------------------------------------------------------------

class MeanStdConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.MeanStdConfig) */ {
 public:
  MeanStdConfig();
  virtual ~MeanStdConfig();

  MeanStdConfig(const MeanStdConfig& from);
  MeanStdConfig(MeanStdConfig&& from) noexcept
    : MeanStdConfig() {
    *this = ::std::move(from);
  }

  inline MeanStdConfig& operator=(const MeanStdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeanStdConfig& operator=(MeanStdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeanStdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeanStdConfig* internal_default_instance() {
    return reinterpret_cast<const MeanStdConfig*>(
               &_MeanStdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeanStdConfig& a, MeanStdConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MeanStdConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeanStdConfig* New() const final {
    return CreateMaybeMessage<MeanStdConfig>(nullptr);
  }

  MeanStdConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeanStdConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeanStdConfig& from);
  void MergeFrom(const MeanStdConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeanStdConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.MeanStdConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fprojection_2eproto);
    return ::descriptor_table_scann_2fproto_2fprojection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFilenameFieldNumber = 1,
  };
  // optional string projection_filename = 1;
  bool has_projection_filename() const;
  void clear_projection_filename();
  const std::string& projection_filename() const;
  void set_projection_filename(const std::string& value);
  void set_projection_filename(std::string&& value);
  void set_projection_filename(const char* value);
  void set_projection_filename(const char* value, size_t size);
  std::string* mutable_projection_filename();
  std::string* release_projection_filename();
  void set_allocated_projection_filename(std::string* projection_filename);

  // @@protoc_insertion_point(class_scope:research_scann.MeanStdConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projection_filename_;
  friend struct ::TableStruct_scann_2fproto_2fprojection_2eproto;
};
// -------------------------------------------------------------------

class RandomBilinearConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.RandomBilinearConfig) */ {
 public:
  RandomBilinearConfig();
  virtual ~RandomBilinearConfig();

  RandomBilinearConfig(const RandomBilinearConfig& from);
  RandomBilinearConfig(RandomBilinearConfig&& from) noexcept
    : RandomBilinearConfig() {
    *this = ::std::move(from);
  }

  inline RandomBilinearConfig& operator=(const RandomBilinearConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomBilinearConfig& operator=(RandomBilinearConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomBilinearConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomBilinearConfig* internal_default_instance() {
    return reinterpret_cast<const RandomBilinearConfig*>(
               &_RandomBilinearConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RandomBilinearConfig& a, RandomBilinearConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomBilinearConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomBilinearConfig* New() const final {
    return CreateMaybeMessage<RandomBilinearConfig>(nullptr);
  }

  RandomBilinearConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomBilinearConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomBilinearConfig& from);
  void MergeFrom(const RandomBilinearConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomBilinearConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.RandomBilinearConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fprojection_2eproto);
    return ::descriptor_table_scann_2fproto_2fprojection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputVectorRowsFieldNumber = 1,
    kInputVectorColumnsFieldNumber = 2,
    kProjVectorRowsFieldNumber = 3,
    kProjVectorColumnsFieldNumber = 4,
  };
  // optional int32 input_vector_rows = 1;
  bool has_input_vector_rows() const;
  void clear_input_vector_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 input_vector_rows() const;
  void set_input_vector_rows(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 input_vector_columns = 2;
  bool has_input_vector_columns() const;
  void clear_input_vector_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 input_vector_columns() const;
  void set_input_vector_columns(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 proj_vector_rows = 3;
  bool has_proj_vector_rows() const;
  void clear_proj_vector_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 proj_vector_rows() const;
  void set_proj_vector_rows(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 proj_vector_columns = 4;
  bool has_proj_vector_columns() const;
  void clear_proj_vector_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 proj_vector_columns() const;
  void set_proj_vector_columns(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.RandomBilinearConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_vector_rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_vector_columns_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_vector_rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 proj_vector_columns_;
  friend struct ::TableStruct_scann_2fproto_2fprojection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProjectionConfig_VariableBlock

// required int32 num_blocks = 1;
inline bool ProjectionConfig_VariableBlock::has_num_blocks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionConfig_VariableBlock::clear_num_blocks() {
  num_blocks_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionConfig_VariableBlock::num_blocks() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.VariableBlock.num_blocks)
  return num_blocks_;
}
inline void ProjectionConfig_VariableBlock::set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_blocks_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.VariableBlock.num_blocks)
}

// required int32 num_dims_per_block = 2;
inline bool ProjectionConfig_VariableBlock::has_num_dims_per_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionConfig_VariableBlock::clear_num_dims_per_block() {
  num_dims_per_block_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionConfig_VariableBlock::num_dims_per_block() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.VariableBlock.num_dims_per_block)
  return num_dims_per_block_;
}
inline void ProjectionConfig_VariableBlock::set_num_dims_per_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_dims_per_block_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.VariableBlock.num_dims_per_block)
}

// -------------------------------------------------------------------

// ProjectionConfig

// required .research_scann.ProjectionConfig.ProjectionType projection_type = 1;
inline bool ProjectionConfig::has_projection_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjectionConfig::clear_projection_type() {
  projection_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::research_scann::ProjectionConfig_ProjectionType ProjectionConfig::projection_type() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.projection_type)
  return static_cast< ::research_scann::ProjectionConfig_ProjectionType >(projection_type_);
}
inline void ProjectionConfig::set_projection_type(::research_scann::ProjectionConfig_ProjectionType value) {
  assert(::research_scann::ProjectionConfig_ProjectionType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  projection_type_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.projection_type)
}

// optional uint64 input_dim = 9;
inline bool ProjectionConfig::has_input_dim() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjectionConfig::clear_input_dim() {
  input_dim_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectionConfig::input_dim() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.input_dim)
  return input_dim_;
}
inline void ProjectionConfig::set_input_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.input_dim)
}

// optional int32 num_blocks = 2 [default = 1];
inline bool ProjectionConfig::has_num_blocks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProjectionConfig::clear_num_blocks() {
  num_blocks_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionConfig::num_blocks() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.num_blocks)
  return num_blocks_;
}
inline void ProjectionConfig::set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_blocks_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.num_blocks)
}

// optional int32 num_dims_per_block = 3;
inline bool ProjectionConfig::has_num_dims_per_block() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjectionConfig::clear_num_dims_per_block() {
  num_dims_per_block_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionConfig::num_dims_per_block() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.num_dims_per_block)
  return num_dims_per_block_;
}
inline void ProjectionConfig::set_num_dims_per_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_dims_per_block_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.num_dims_per_block)
}

// repeated .research_scann.ProjectionConfig.VariableBlock variable_blocks = 4;
inline int ProjectionConfig::variable_blocks_size() const {
  return variable_blocks_.size();
}
inline void ProjectionConfig::clear_variable_blocks() {
  variable_blocks_.Clear();
}
inline ::research_scann::ProjectionConfig_VariableBlock* ProjectionConfig::mutable_variable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.ProjectionConfig.variable_blocks)
  return variable_blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::ProjectionConfig_VariableBlock >*
ProjectionConfig::mutable_variable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.ProjectionConfig.variable_blocks)
  return &variable_blocks_;
}
inline const ::research_scann::ProjectionConfig_VariableBlock& ProjectionConfig::variable_blocks(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.variable_blocks)
  return variable_blocks_.Get(index);
}
inline ::research_scann::ProjectionConfig_VariableBlock* ProjectionConfig::add_variable_blocks() {
  // @@protoc_insertion_point(field_add:research_scann.ProjectionConfig.variable_blocks)
  return variable_blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::ProjectionConfig_VariableBlock >&
ProjectionConfig::variable_blocks() const {
  // @@protoc_insertion_point(field_list:research_scann.ProjectionConfig.variable_blocks)
  return variable_blocks_;
}

// optional int32 seed = 5 [default = 1];
inline bool ProjectionConfig::has_seed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProjectionConfig::clear_seed() {
  seed_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionConfig::seed() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.seed)
  return seed_;
}
inline void ProjectionConfig::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  seed_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.seed)
}

// optional bool is_bit_packed = 6 [default = false];
inline bool ProjectionConfig::has_is_bit_packed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjectionConfig::clear_is_bit_packed() {
  is_bit_packed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProjectionConfig::is_bit_packed() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.is_bit_packed)
  return is_bit_packed_;
}
inline void ProjectionConfig::set_is_bit_packed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_bit_packed_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.is_bit_packed)
}

// optional bool is_dense = 7 [default = true];
inline bool ProjectionConfig::has_is_dense() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProjectionConfig::clear_is_dense() {
  is_dense_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ProjectionConfig::is_dense() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.is_dense)
  return is_dense_;
}
inline void ProjectionConfig::set_is_dense(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.is_dense)
}

// optional bool build_covariance = 8 [default = true];
inline bool ProjectionConfig::has_build_covariance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProjectionConfig::clear_build_covariance() {
  build_covariance_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProjectionConfig::build_covariance() const {
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.build_covariance)
  return build_covariance_;
}
inline void ProjectionConfig::set_build_covariance(bool value) {
  _has_bits_[0] |= 0x00000100u;
  build_covariance_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ProjectionConfig.build_covariance)
}

// optional .research_scann.RandomBilinearConfig random_bilinear_config = 10;
inline bool ProjectionConfig::has_random_bilinear_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionConfig::clear_random_bilinear_config() {
  if (random_bilinear_config_ != nullptr) random_bilinear_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::RandomBilinearConfig& ProjectionConfig::random_bilinear_config() const {
  const ::research_scann::RandomBilinearConfig* p = random_bilinear_config_;
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.random_bilinear_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::RandomBilinearConfig*>(
      &::research_scann::_RandomBilinearConfig_default_instance_);
}
inline ::research_scann::RandomBilinearConfig* ProjectionConfig::release_random_bilinear_config() {
  // @@protoc_insertion_point(field_release:research_scann.ProjectionConfig.random_bilinear_config)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::RandomBilinearConfig* temp = random_bilinear_config_;
  random_bilinear_config_ = nullptr;
  return temp;
}
inline ::research_scann::RandomBilinearConfig* ProjectionConfig::mutable_random_bilinear_config() {
  _has_bits_[0] |= 0x00000001u;
  if (random_bilinear_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::RandomBilinearConfig>(GetArenaNoVirtual());
    random_bilinear_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ProjectionConfig.random_bilinear_config)
  return random_bilinear_config_;
}
inline void ProjectionConfig::set_allocated_random_bilinear_config(::research_scann::RandomBilinearConfig* random_bilinear_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete random_bilinear_config_;
  }
  if (random_bilinear_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_bilinear_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_bilinear_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  random_bilinear_config_ = random_bilinear_config;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ProjectionConfig.random_bilinear_config)
}

// optional .research_scann.CkmeansConfig ckmeans_config = 11;
inline bool ProjectionConfig::has_ckmeans_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionConfig::clear_ckmeans_config() {
  if (ckmeans_config_ != nullptr) ckmeans_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::research_scann::CkmeansConfig& ProjectionConfig::ckmeans_config() const {
  const ::research_scann::CkmeansConfig* p = ckmeans_config_;
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.ckmeans_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::CkmeansConfig*>(
      &::research_scann::_CkmeansConfig_default_instance_);
}
inline ::research_scann::CkmeansConfig* ProjectionConfig::release_ckmeans_config() {
  // @@protoc_insertion_point(field_release:research_scann.ProjectionConfig.ckmeans_config)
  _has_bits_[0] &= ~0x00000002u;
  ::research_scann::CkmeansConfig* temp = ckmeans_config_;
  ckmeans_config_ = nullptr;
  return temp;
}
inline ::research_scann::CkmeansConfig* ProjectionConfig::mutable_ckmeans_config() {
  _has_bits_[0] |= 0x00000002u;
  if (ckmeans_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::CkmeansConfig>(GetArenaNoVirtual());
    ckmeans_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ProjectionConfig.ckmeans_config)
  return ckmeans_config_;
}
inline void ProjectionConfig::set_allocated_ckmeans_config(::research_scann::CkmeansConfig* ckmeans_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ckmeans_config_;
  }
  if (ckmeans_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ckmeans_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ckmeans_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ckmeans_config_ = ckmeans_config;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ProjectionConfig.ckmeans_config)
}

// optional .research_scann.MeanStdConfig meanstd_config = 12;
inline bool ProjectionConfig::has_meanstd_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjectionConfig::clear_meanstd_config() {
  if (meanstd_config_ != nullptr) meanstd_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::research_scann::MeanStdConfig& ProjectionConfig::meanstd_config() const {
  const ::research_scann::MeanStdConfig* p = meanstd_config_;
  // @@protoc_insertion_point(field_get:research_scann.ProjectionConfig.meanstd_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::MeanStdConfig*>(
      &::research_scann::_MeanStdConfig_default_instance_);
}
inline ::research_scann::MeanStdConfig* ProjectionConfig::release_meanstd_config() {
  // @@protoc_insertion_point(field_release:research_scann.ProjectionConfig.meanstd_config)
  _has_bits_[0] &= ~0x00000004u;
  ::research_scann::MeanStdConfig* temp = meanstd_config_;
  meanstd_config_ = nullptr;
  return temp;
}
inline ::research_scann::MeanStdConfig* ProjectionConfig::mutable_meanstd_config() {
  _has_bits_[0] |= 0x00000004u;
  if (meanstd_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::MeanStdConfig>(GetArenaNoVirtual());
    meanstd_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ProjectionConfig.meanstd_config)
  return meanstd_config_;
}
inline void ProjectionConfig::set_allocated_meanstd_config(::research_scann::MeanStdConfig* meanstd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meanstd_config_;
  }
  if (meanstd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meanstd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanstd_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  meanstd_config_ = meanstd_config;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ProjectionConfig.meanstd_config)
}

// -------------------------------------------------------------------

// CkmeansConfig

// optional bool need_learning = 1 [default = true];
inline bool CkmeansConfig::has_need_learning() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CkmeansConfig::clear_need_learning() {
  need_learning_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CkmeansConfig::need_learning() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.need_learning)
  return need_learning_;
}
inline void CkmeansConfig::set_need_learning(bool value) {
  _has_bits_[0] |= 0x00000004u;
  need_learning_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.need_learning)
}

// optional string projection_filename = 2;
inline bool CkmeansConfig::has_projection_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CkmeansConfig::clear_projection_filename() {
  projection_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CkmeansConfig::projection_filename() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.projection_filename)
  return projection_filename_.GetNoArena();
}
inline void CkmeansConfig::set_projection_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.projection_filename)
}
inline void CkmeansConfig::set_projection_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.CkmeansConfig.projection_filename)
}
inline void CkmeansConfig::set_projection_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.CkmeansConfig.projection_filename)
}
inline void CkmeansConfig::set_projection_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.CkmeansConfig.projection_filename)
}
inline std::string* CkmeansConfig::mutable_projection_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.CkmeansConfig.projection_filename)
  return projection_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CkmeansConfig::release_projection_filename() {
  // @@protoc_insertion_point(field_release:research_scann.CkmeansConfig.projection_filename)
  if (!has_projection_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return projection_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CkmeansConfig::set_allocated_projection_filename(std::string* projection_filename) {
  if (projection_filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projection_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projection_filename);
  // @@protoc_insertion_point(field_set_allocated:research_scann.CkmeansConfig.projection_filename)
}

// optional int32 num_clusters = 3 [default = 256];
inline bool CkmeansConfig::has_num_clusters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CkmeansConfig::clear_num_clusters() {
  num_clusters_ = 256;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CkmeansConfig::num_clusters() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.num_clusters)
  return num_clusters_;
}
inline void CkmeansConfig::set_num_clusters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_clusters_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.num_clusters)
}

// optional int32 num_rotation_iterations = 4 [default = 100];
inline bool CkmeansConfig::has_num_rotation_iterations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CkmeansConfig::clear_num_rotation_iterations() {
  num_rotation_iterations_ = 100;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CkmeansConfig::num_rotation_iterations() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.num_rotation_iterations)
  return num_rotation_iterations_;
}
inline void CkmeansConfig::set_num_rotation_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_rotation_iterations_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.num_rotation_iterations)
}

// optional float rotation_convergence = 5 [default = 0.0001];
inline bool CkmeansConfig::has_rotation_convergence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CkmeansConfig::clear_rotation_convergence() {
  rotation_convergence_ = 0.0001f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CkmeansConfig::rotation_convergence() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.rotation_convergence)
  return rotation_convergence_;
}
inline void CkmeansConfig::set_rotation_convergence(float value) {
  _has_bits_[0] |= 0x00000020u;
  rotation_convergence_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.rotation_convergence)
}

// optional int32 max_sample_size = 6 [default = 100000];
inline bool CkmeansConfig::has_max_sample_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CkmeansConfig::clear_max_sample_size() {
  max_sample_size_ = 100000;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CkmeansConfig::max_sample_size() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.max_sample_size)
  return max_sample_size_;
}
inline void CkmeansConfig::set_max_sample_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_sample_size_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.max_sample_size)
}

// optional int32 max_clustering_iterations = 7 [default = 1];
inline bool CkmeansConfig::has_max_clustering_iterations() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CkmeansConfig::clear_max_clustering_iterations() {
  max_clustering_iterations_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CkmeansConfig::max_clustering_iterations() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.max_clustering_iterations)
  return max_clustering_iterations_;
}
inline void CkmeansConfig::set_max_clustering_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_clustering_iterations_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.max_clustering_iterations)
}

// optional float clustering_convergence_tolerance = 8 [default = 1e-05];
inline bool CkmeansConfig::has_clustering_convergence_tolerance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CkmeansConfig::clear_clustering_convergence_tolerance() {
  clustering_convergence_tolerance_ = 1e-05f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CkmeansConfig::clustering_convergence_tolerance() const {
  // @@protoc_insertion_point(field_get:research_scann.CkmeansConfig.clustering_convergence_tolerance)
  return clustering_convergence_tolerance_;
}
inline void CkmeansConfig::set_clustering_convergence_tolerance(float value) {
  _has_bits_[0] |= 0x00000002u;
  clustering_convergence_tolerance_ = value;
  // @@protoc_insertion_point(field_set:research_scann.CkmeansConfig.clustering_convergence_tolerance)
}

// -------------------------------------------------------------------

// MeanStdConfig

// optional string projection_filename = 1;
inline bool MeanStdConfig::has_projection_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeanStdConfig::clear_projection_filename() {
  projection_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeanStdConfig::projection_filename() const {
  // @@protoc_insertion_point(field_get:research_scann.MeanStdConfig.projection_filename)
  return projection_filename_.GetNoArena();
}
inline void MeanStdConfig::set_projection_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.MeanStdConfig.projection_filename)
}
inline void MeanStdConfig::set_projection_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.MeanStdConfig.projection_filename)
}
inline void MeanStdConfig::set_projection_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.MeanStdConfig.projection_filename)
}
inline void MeanStdConfig::set_projection_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  projection_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.MeanStdConfig.projection_filename)
}
inline std::string* MeanStdConfig::mutable_projection_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.MeanStdConfig.projection_filename)
  return projection_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeanStdConfig::release_projection_filename() {
  // @@protoc_insertion_point(field_release:research_scann.MeanStdConfig.projection_filename)
  if (!has_projection_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return projection_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeanStdConfig::set_allocated_projection_filename(std::string* projection_filename) {
  if (projection_filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projection_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projection_filename);
  // @@protoc_insertion_point(field_set_allocated:research_scann.MeanStdConfig.projection_filename)
}

// -------------------------------------------------------------------

// RandomBilinearConfig

// optional int32 input_vector_rows = 1;
inline bool RandomBilinearConfig::has_input_vector_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomBilinearConfig::clear_input_vector_rows() {
  input_vector_rows_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomBilinearConfig::input_vector_rows() const {
  // @@protoc_insertion_point(field_get:research_scann.RandomBilinearConfig.input_vector_rows)
  return input_vector_rows_;
}
inline void RandomBilinearConfig::set_input_vector_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  input_vector_rows_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RandomBilinearConfig.input_vector_rows)
}

// optional int32 input_vector_columns = 2;
inline bool RandomBilinearConfig::has_input_vector_columns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandomBilinearConfig::clear_input_vector_columns() {
  input_vector_columns_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomBilinearConfig::input_vector_columns() const {
  // @@protoc_insertion_point(field_get:research_scann.RandomBilinearConfig.input_vector_columns)
  return input_vector_columns_;
}
inline void RandomBilinearConfig::set_input_vector_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  input_vector_columns_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RandomBilinearConfig.input_vector_columns)
}

// optional int32 proj_vector_rows = 3;
inline bool RandomBilinearConfig::has_proj_vector_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandomBilinearConfig::clear_proj_vector_rows() {
  proj_vector_rows_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomBilinearConfig::proj_vector_rows() const {
  // @@protoc_insertion_point(field_get:research_scann.RandomBilinearConfig.proj_vector_rows)
  return proj_vector_rows_;
}
inline void RandomBilinearConfig::set_proj_vector_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  proj_vector_rows_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RandomBilinearConfig.proj_vector_rows)
}

// optional int32 proj_vector_columns = 4;
inline bool RandomBilinearConfig::has_proj_vector_columns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandomBilinearConfig::clear_proj_vector_columns() {
  proj_vector_columns_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomBilinearConfig::proj_vector_columns() const {
  // @@protoc_insertion_point(field_get:research_scann.RandomBilinearConfig.proj_vector_columns)
  return proj_vector_columns_;
}
inline void RandomBilinearConfig::set_proj_vector_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  proj_vector_columns_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RandomBilinearConfig.proj_vector_columns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::research_scann::ProjectionConfig_ProjectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::ProjectionConfig_ProjectionType>() {
  return ::research_scann::ProjectionConfig_ProjectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fprojection_2eproto
