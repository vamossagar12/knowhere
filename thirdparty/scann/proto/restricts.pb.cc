// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/restricts.proto

#include "scann/proto/restricts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2frestricts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto;
namespace research_scann {
class V3RestrictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V3Restrict> _instance;
} _V3Restrict_default_instance_;
class TokenNamespaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenNamespace> _instance;
} _TokenNamespace_default_instance_;
class RestrictsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictsConfig> _instance;
} _RestrictsConfig_default_instance_;
class V3RestrictsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V3RestrictsConfig> _instance;
} _V3RestrictsConfig_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_RestrictsConfig_default_instance_;
    new (ptr) ::research_scann::RestrictsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::RestrictsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto}, {
      &scc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto.base,}};

static void InitDefaultsscc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_TokenNamespace_default_instance_;
    new (ptr) ::research_scann::TokenNamespace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::TokenNamespace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto}, {}};

static void InitDefaultsscc_info_V3Restrict_scann_2fproto_2frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_V3Restrict_default_instance_;
    new (ptr) ::research_scann::V3Restrict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::V3Restrict::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_V3Restrict_scann_2fproto_2frestricts_2eproto}, {
      &scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto.base,}};

static void InitDefaultsscc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_V3RestrictsConfig_default_instance_;
    new (ptr) ::research_scann::V3RestrictsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::V3RestrictsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2frestricts_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2frestricts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2frestricts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2frestricts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::V3Restrict, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::V3Restrict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::V3Restrict, namespaces_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, namespace__),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, string_tokens_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, uint64_tokens_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, string_blacklist_tokens_),
  PROTOBUF_FIELD_OFFSET(::research_scann::TokenNamespace, uint64_blacklist_tokens_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::RestrictsConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RestrictsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::RestrictsConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RestrictsConfig, restrict_cache_size_),
  PROTOBUF_FIELD_OFFSET(::research_scann::RestrictsConfig, v3_restricts_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::V3RestrictsConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::V3RestrictsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::V3RestrictsConfig, empty_namespace_matching_mode_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::research_scann::V3Restrict)},
  { 7, 17, sizeof(::research_scann::TokenNamespace)},
  { 22, 30, sizeof(::research_scann::RestrictsConfig)},
  { 33, 39, sizeof(::research_scann::V3RestrictsConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_V3Restrict_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_TokenNamespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_RestrictsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_V3RestrictsConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2frestricts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033scann/proto/restricts.proto\022\016research_"
  "scann\"@\n\nV3Restrict\0222\n\nnamespaces\030\001 \003(\0132"
  "\036.research_scann.TokenNamespace\"\233\001\n\016Toke"
  "nNamespace\022\021\n\tnamespace\030\001 \001(\t\022\025\n\rstring_"
  "tokens\030\003 \003(\t\022\031\n\ruint64_tokens\030\002 \003(\006B\002\020\001\022"
  "\037\n\027string_blacklist_tokens\030\005 \003(\t\022#\n\027uint"
  "64_blacklist_tokens\030\004 \003(\006B\002\020\001\"\202\001\n\017Restri"
  "ctsConfig\022\026\n\007enabled\030\001 \001(\010:\005false\022\036\n\023res"
  "trict_cache_size\030\002 \001(\005:\0010\0227\n\014v3_restrict"
  "s\030\003 \001(\0132!.research_scann.V3RestrictsConf"
  "ig\"\201\002\n\021V3RestrictsConfig\022p\n\035empty_namesp"
  "ace_matching_mode\030\001 \001(\0162<.research_scann"
  ".V3RestrictsConfig.EmptyNamespaceMatchin"
  "gMode:\013UNSPECIFIED\"z\n\032EmptyNamespaceMatc"
  "hingMode\022\017\n\013UNSPECIFIED\020\000\022\020\n\014FORWARD_MOD"
  "E\020\001\022\020\n\014REVERSE_MODE\020\002\022\021\n\rLAX_SYMMETRIC\020\003"
  "\022\024\n\020STRICT_SYMMETRIC\020\004B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2frestricts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2frestricts_2eproto_sccs[4] = {
  &scc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto.base,
  &scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto.base,
  &scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto.base,
  &scc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2frestricts_2eproto_once;
static bool descriptor_table_scann_2fproto_2frestricts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2frestricts_2eproto = {
  &descriptor_table_scann_2fproto_2frestricts_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2frestricts_2eproto, "scann/proto/restricts.proto", 667,
  &descriptor_table_scann_2fproto_2frestricts_2eproto_once, descriptor_table_scann_2fproto_2frestricts_2eproto_sccs, descriptor_table_scann_2fproto_2frestricts_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_scann_2fproto_2frestricts_2eproto::offsets,
  file_level_metadata_scann_2fproto_2frestricts_2eproto, 4, file_level_enum_descriptors_scann_2fproto_2frestricts_2eproto, file_level_service_descriptors_scann_2fproto_2frestricts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2frestricts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2frestricts_2eproto), true);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2frestricts_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2frestricts_2eproto[0];
}
bool V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::UNSPECIFIED;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::FORWARD_MODE;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::REVERSE_MODE;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::LAX_SYMMETRIC;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::STRICT_SYMMETRIC;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::EmptyNamespaceMatchingMode_MIN;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::EmptyNamespaceMatchingMode_MAX;
constexpr int V3RestrictsConfig::EmptyNamespaceMatchingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void V3Restrict::InitAsDefaultInstance() {
}
class V3Restrict::_Internal {
 public:
  using HasBits = decltype(std::declval<V3Restrict>()._has_bits_);
};

V3Restrict::V3Restrict()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.V3Restrict)
}
V3Restrict::V3Restrict(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  namespaces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.V3Restrict)
}
V3Restrict::V3Restrict(const V3Restrict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      namespaces_(from.namespaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.V3Restrict)
}

void V3Restrict::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto.base);
}

V3Restrict::~V3Restrict() {
  // @@protoc_insertion_point(destructor:research_scann.V3Restrict)
  SharedDtor();
}

void V3Restrict::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void V3Restrict::ArenaDtor(void* object) {
  V3Restrict* _this = reinterpret_cast< V3Restrict* >(object);
  (void)_this;
}
void V3Restrict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void V3Restrict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V3Restrict& V3Restrict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V3Restrict_scann_2fproto_2frestricts_2eproto.base);
  return *internal_default_instance();
}


void V3Restrict::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.V3Restrict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespaces_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* V3Restrict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .research_scann.TokenNamespace namespaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_namespaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool V3Restrict::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.V3Restrict)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .research_scann.TokenNamespace namespaces = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_namespaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.V3Restrict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.V3Restrict)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void V3Restrict::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.V3Restrict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.TokenNamespace namespaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespaces_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->namespaces(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.V3Restrict)
}

::PROTOBUF_NAMESPACE_ID::uint8* V3Restrict::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.V3Restrict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.TokenNamespace namespaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespaces_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->namespaces(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.V3Restrict)
  return target;
}

size_t V3Restrict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.V3Restrict)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.TokenNamespace namespaces = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->namespaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->namespaces(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V3Restrict::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.V3Restrict)
  GOOGLE_DCHECK_NE(&from, this);
  const V3Restrict* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V3Restrict>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.V3Restrict)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.V3Restrict)
    MergeFrom(*source);
  }
}

void V3Restrict::MergeFrom(const V3Restrict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.V3Restrict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespaces_.MergeFrom(from.namespaces_);
}

void V3Restrict::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.V3Restrict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V3Restrict::CopyFrom(const V3Restrict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.V3Restrict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V3Restrict::IsInitialized() const {
  return true;
}

void V3Restrict::InternalSwap(V3Restrict* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&namespaces_)->InternalSwap(CastToBase(&other->namespaces_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V3Restrict::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenNamespace::InitAsDefaultInstance() {
}
class TokenNamespace::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenNamespace>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenNamespace::TokenNamespace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.TokenNamespace)
}
TokenNamespace::TokenNamespace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  uint64_tokens_(arena),
  string_tokens_(arena),
  uint64_blacklist_tokens_(arena),
  string_blacklist_tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.TokenNamespace)
}
TokenNamespace::TokenNamespace(const TokenNamespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      uint64_tokens_(from.uint64_tokens_),
      string_tokens_(from.string_tokens_),
      uint64_blacklist_tokens_(from.uint64_blacklist_tokens_),
      string_blacklist_tokens_(from.string_blacklist_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace_(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.TokenNamespace)
}

void TokenNamespace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenNamespace::~TokenNamespace() {
  // @@protoc_insertion_point(destructor:research_scann.TokenNamespace)
  SharedDtor();
}

void TokenNamespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenNamespace::ArenaDtor(void* object) {
  TokenNamespace* _this = reinterpret_cast< TokenNamespace* >(object);
  (void)_this;
}
void TokenNamespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenNamespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenNamespace& TokenNamespace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenNamespace_scann_2fproto_2frestricts_2eproto.base);
  return *internal_default_instance();
}


void TokenNamespace::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.TokenNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uint64_tokens_.Clear();
  string_tokens_.Clear();
  uint64_blacklist_tokens_.Clear();
  string_blacklist_tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    namespace__.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenNamespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_namespace_(), ptr, ctx, "research_scann.TokenNamespace.namespace");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 uint64_tokens = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_uint64_tokens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          add_uint64_tokens(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated string string_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_string_tokens(), ptr, ctx, "research_scann.TokenNamespace.string_tokens");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_uint64_blacklist_tokens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          add_uint64_blacklist_tokens(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated string string_blacklist_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_string_blacklist_tokens(), ptr, ctx, "research_scann.TokenNamespace.string_blacklist_tokens");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenNamespace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.TokenNamespace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string namespace = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.TokenNamespace.namespace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 uint64_tokens = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_uint64_tokens())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 18u, input, this->mutable_uint64_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_tokens = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_string_tokens()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_tokens(this->string_tokens_size() - 1).data(),
            static_cast<int>(this->string_tokens(this->string_tokens_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.TokenNamespace.string_tokens");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_uint64_blacklist_tokens())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 34u, input, this->mutable_uint64_blacklist_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_blacklist_tokens = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_string_blacklist_tokens()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_blacklist_tokens(this->string_blacklist_tokens_size() - 1).data(),
            static_cast<int>(this->string_blacklist_tokens(this->string_blacklist_tokens_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.TokenNamespace.string_blacklist_tokens");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.TokenNamespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.TokenNamespace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenNamespace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.TokenNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.namespace");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // repeated fixed64 uint64_tokens = 2 [packed = true];
  if (this->uint64_tokens_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uint64_tokens_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->uint64_tokens().data(), this->uint64_tokens_size(), output);
  }

  // repeated string string_tokens = 3;
  for (int i = 0, n = this->string_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_tokens(i).data(), static_cast<int>(this->string_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.string_tokens");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->string_tokens(i), output);
  }

  // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
  if (this->uint64_blacklist_tokens_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uint64_blacklist_tokens_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->uint64_blacklist_tokens().data(), this->uint64_blacklist_tokens_size(), output);
  }

  // repeated string string_blacklist_tokens = 5;
  for (int i = 0, n = this->string_blacklist_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_blacklist_tokens(i).data(), static_cast<int>(this->string_blacklist_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.string_blacklist_tokens");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->string_blacklist_tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.TokenNamespace)
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenNamespace::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.TokenNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.namespace");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // repeated fixed64 uint64_tokens = 2 [packed = true];
  if (this->uint64_tokens_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _uint64_tokens_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->uint64_tokens_, target);
  }

  // repeated string string_tokens = 3;
  for (int i = 0, n = this->string_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_tokens(i).data(), static_cast<int>(this->string_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.string_tokens");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->string_tokens(i), target);
  }

  // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
  if (this->uint64_blacklist_tokens_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _uint64_blacklist_tokens_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->uint64_blacklist_tokens_, target);
  }

  // repeated string string_blacklist_tokens = 5;
  for (int i = 0, n = this->string_blacklist_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_blacklist_tokens(i).data(), static_cast<int>(this->string_blacklist_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.TokenNamespace.string_blacklist_tokens");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->string_blacklist_tokens(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.TokenNamespace)
  return target;
}

size_t TokenNamespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.TokenNamespace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 uint64_tokens = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->uint64_tokens_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_tokens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_tokens = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->string_tokens_size());
  for (int i = 0, n = this->string_tokens_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->string_tokens(i));
  }

  // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->uint64_blacklist_tokens_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_blacklist_tokens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_blacklist_tokens = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->string_blacklist_tokens_size());
  for (int i = 0, n = this->string_blacklist_tokens_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->string_blacklist_tokens(i));
  }

  // optional string namespace = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenNamespace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.TokenNamespace)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenNamespace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenNamespace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.TokenNamespace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.TokenNamespace)
    MergeFrom(*source);
  }
}

void TokenNamespace::MergeFrom(const TokenNamespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.TokenNamespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uint64_tokens_.MergeFrom(from.uint64_tokens_);
  string_tokens_.MergeFrom(from.string_tokens_);
  uint64_blacklist_tokens_.MergeFrom(from.uint64_blacklist_tokens_);
  string_blacklist_tokens_.MergeFrom(from.string_blacklist_tokens_);
  if (from.has_namespace_()) {
    set_namespace_(from.namespace_());
  }
}

void TokenNamespace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.TokenNamespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenNamespace::CopyFrom(const TokenNamespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.TokenNamespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenNamespace::IsInitialized() const {
  return true;
}

void TokenNamespace::InternalSwap(TokenNamespace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uint64_tokens_.InternalSwap(&other->uint64_tokens_);
  string_tokens_.InternalSwap(CastToBase(&other->string_tokens_));
  uint64_blacklist_tokens_.InternalSwap(&other->uint64_blacklist_tokens_);
  string_blacklist_tokens_.InternalSwap(CastToBase(&other->string_blacklist_tokens_));
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenNamespace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictsConfig::InitAsDefaultInstance() {
  ::research_scann::_RestrictsConfig_default_instance_._instance.get_mutable()->v3_restricts_ = const_cast< ::research_scann::V3RestrictsConfig*>(
      ::research_scann::V3RestrictsConfig::internal_default_instance());
}
class RestrictsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RestrictsConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_restrict_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::research_scann::V3RestrictsConfig& v3_restricts(const RestrictsConfig* msg);
  static void set_has_v3_restricts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::research_scann::V3RestrictsConfig&
RestrictsConfig::_Internal::v3_restricts(const RestrictsConfig* msg) {
  return *msg->v3_restricts_;
}
void RestrictsConfig::unsafe_arena_set_allocated_v3_restricts(
    ::research_scann::V3RestrictsConfig* v3_restricts) {
  if (GetArenaNoVirtual() == nullptr) {
    delete v3_restricts_;
  }
  v3_restricts_ = v3_restricts;
  if (v3_restricts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.RestrictsConfig.v3_restricts)
}
RestrictsConfig::RestrictsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.RestrictsConfig)
}
RestrictsConfig::RestrictsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.RestrictsConfig)
}
RestrictsConfig::RestrictsConfig(const RestrictsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_v3_restricts()) {
    v3_restricts_ = new ::research_scann::V3RestrictsConfig(*from.v3_restricts_);
  } else {
    v3_restricts_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&restrict_cache_size_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(restrict_cache_size_));
  // @@protoc_insertion_point(copy_constructor:research_scann.RestrictsConfig)
}

void RestrictsConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto.base);
  ::memset(&v3_restricts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restrict_cache_size_) -
      reinterpret_cast<char*>(&v3_restricts_)) + sizeof(restrict_cache_size_));
}

RestrictsConfig::~RestrictsConfig() {
  // @@protoc_insertion_point(destructor:research_scann.RestrictsConfig)
  SharedDtor();
}

void RestrictsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete v3_restricts_;
}

void RestrictsConfig::ArenaDtor(void* object) {
  RestrictsConfig* _this = reinterpret_cast< RestrictsConfig* >(object);
  (void)_this;
}
void RestrictsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestrictsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictsConfig& RestrictsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictsConfig_scann_2fproto_2frestricts_2eproto.base);
  return *internal_default_instance();
}


void RestrictsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(v3_restricts_ != nullptr);
    v3_restricts_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&restrict_cache_size_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(restrict_cache_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestrictsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 restrict_cache_size = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_restrict_cache_size(&has_bits);
          restrict_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_v3_restricts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestrictsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.RestrictsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 restrict_cache_size = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_restrict_cache_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &restrict_cache_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_v3_restricts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.RestrictsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.RestrictsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestrictsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 restrict_cache_size = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->restrict_cache_size(), output);
  }

  // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::v3_restricts(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.RestrictsConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictsConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional int32 restrict_cache_size = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->restrict_cache_size(), target);
  }

  // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::v3_restricts(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.RestrictsConfig)
  return target;
}

size_t RestrictsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.RestrictsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v3_restricts_);
    }

    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 restrict_cache_size = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->restrict_cache_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.RestrictsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.RestrictsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.RestrictsConfig)
    MergeFrom(*source);
  }
}

void RestrictsConfig::MergeFrom(const RestrictsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.RestrictsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_v3_restricts()->::research_scann::V3RestrictsConfig::MergeFrom(from.v3_restricts());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      restrict_cache_size_ = from.restrict_cache_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RestrictsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.RestrictsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictsConfig::CopyFrom(const RestrictsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.RestrictsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictsConfig::IsInitialized() const {
  return true;
}

void RestrictsConfig::InternalSwap(RestrictsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(v3_restricts_, other->v3_restricts_);
  swap(enabled_, other->enabled_);
  swap(restrict_cache_size_, other->restrict_cache_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void V3RestrictsConfig::InitAsDefaultInstance() {
}
class V3RestrictsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<V3RestrictsConfig>()._has_bits_);
  static void set_has_empty_namespace_matching_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

V3RestrictsConfig::V3RestrictsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.V3RestrictsConfig)
}
V3RestrictsConfig::V3RestrictsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.V3RestrictsConfig)
}
V3RestrictsConfig::V3RestrictsConfig(const V3RestrictsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  empty_namespace_matching_mode_ = from.empty_namespace_matching_mode_;
  // @@protoc_insertion_point(copy_constructor:research_scann.V3RestrictsConfig)
}

void V3RestrictsConfig::SharedCtor() {
  empty_namespace_matching_mode_ = 0;
}

V3RestrictsConfig::~V3RestrictsConfig() {
  // @@protoc_insertion_point(destructor:research_scann.V3RestrictsConfig)
  SharedDtor();
}

void V3RestrictsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void V3RestrictsConfig::ArenaDtor(void* object) {
  V3RestrictsConfig* _this = reinterpret_cast< V3RestrictsConfig* >(object);
  (void)_this;
}
void V3RestrictsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void V3RestrictsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V3RestrictsConfig& V3RestrictsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V3RestrictsConfig_scann_2fproto_2frestricts_2eproto.base);
  return *internal_default_instance();
}


void V3RestrictsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.V3RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  empty_namespace_matching_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* V3RestrictsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(val))) {
            set_empty_namespace_matching_mode(static_cast<::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool V3RestrictsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.V3RestrictsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(value)) {
            set_empty_namespace_matching_mode(static_cast< ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.V3RestrictsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.V3RestrictsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void V3RestrictsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.V3RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->empty_namespace_matching_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.V3RestrictsConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* V3RestrictsConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.V3RestrictsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->empty_namespace_matching_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.V3RestrictsConfig)
  return target;
}

size_t V3RestrictsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.V3RestrictsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->empty_namespace_matching_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V3RestrictsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.V3RestrictsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const V3RestrictsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V3RestrictsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.V3RestrictsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.V3RestrictsConfig)
    MergeFrom(*source);
  }
}

void V3RestrictsConfig::MergeFrom(const V3RestrictsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.V3RestrictsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_empty_namespace_matching_mode()) {
    set_empty_namespace_matching_mode(from.empty_namespace_matching_mode());
  }
}

void V3RestrictsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.V3RestrictsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V3RestrictsConfig::CopyFrom(const V3RestrictsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.V3RestrictsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V3RestrictsConfig::IsInitialized() const {
  return true;
}

void V3RestrictsConfig::InternalSwap(V3RestrictsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(empty_namespace_matching_mode_, other->empty_namespace_matching_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V3RestrictsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::V3Restrict* Arena::CreateMaybeMessage< ::research_scann::V3Restrict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::V3Restrict >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::TokenNamespace* Arena::CreateMaybeMessage< ::research_scann::TokenNamespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::TokenNamespace >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::RestrictsConfig* Arena::CreateMaybeMessage< ::research_scann::RestrictsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::RestrictsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::V3RestrictsConfig* Arena::CreateMaybeMessage< ::research_scann::V3RestrictsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::V3RestrictsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
