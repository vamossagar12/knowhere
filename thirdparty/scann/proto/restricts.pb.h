// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/restricts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2frestricts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2frestricts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2frestricts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2frestricts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2frestricts_2eproto;
namespace research_scann {
class RestrictsConfig;
class RestrictsConfigDefaultTypeInternal;
extern RestrictsConfigDefaultTypeInternal _RestrictsConfig_default_instance_;
class TokenNamespace;
class TokenNamespaceDefaultTypeInternal;
extern TokenNamespaceDefaultTypeInternal _TokenNamespace_default_instance_;
class V3Restrict;
class V3RestrictDefaultTypeInternal;
extern V3RestrictDefaultTypeInternal _V3Restrict_default_instance_;
class V3RestrictsConfig;
class V3RestrictsConfigDefaultTypeInternal;
extern V3RestrictsConfigDefaultTypeInternal _V3RestrictsConfig_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::RestrictsConfig* Arena::CreateMaybeMessage<::research_scann::RestrictsConfig>(Arena*);
template<> ::research_scann::TokenNamespace* Arena::CreateMaybeMessage<::research_scann::TokenNamespace>(Arena*);
template<> ::research_scann::V3Restrict* Arena::CreateMaybeMessage<::research_scann::V3Restrict>(Arena*);
template<> ::research_scann::V3RestrictsConfig* Arena::CreateMaybeMessage<::research_scann::V3RestrictsConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

enum V3RestrictsConfig_EmptyNamespaceMatchingMode : int {
  V3RestrictsConfig_EmptyNamespaceMatchingMode_UNSPECIFIED = 0,
  V3RestrictsConfig_EmptyNamespaceMatchingMode_FORWARD_MODE = 1,
  V3RestrictsConfig_EmptyNamespaceMatchingMode_REVERSE_MODE = 2,
  V3RestrictsConfig_EmptyNamespaceMatchingMode_LAX_SYMMETRIC = 3,
  V3RestrictsConfig_EmptyNamespaceMatchingMode_STRICT_SYMMETRIC = 4
};
bool V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(int value);
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_MIN = V3RestrictsConfig_EmptyNamespaceMatchingMode_UNSPECIFIED;
constexpr V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_MAX = V3RestrictsConfig_EmptyNamespaceMatchingMode_STRICT_SYMMETRIC;
constexpr int V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_ARRAYSIZE = V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor();
template<typename T>
inline const std::string& V3RestrictsConfig_EmptyNamespaceMatchingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V3RestrictsConfig_EmptyNamespaceMatchingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V3RestrictsConfig_EmptyNamespaceMatchingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor(), enum_t_value);
}
inline bool V3RestrictsConfig_EmptyNamespaceMatchingMode_Parse(
    const std::string& name, V3RestrictsConfig_EmptyNamespaceMatchingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V3RestrictsConfig_EmptyNamespaceMatchingMode>(
    V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor(), name, value);
}
// ===================================================================

class V3Restrict :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.V3Restrict) */ {
 public:
  V3Restrict();
  virtual ~V3Restrict();

  V3Restrict(const V3Restrict& from);
  V3Restrict(V3Restrict&& from) noexcept
    : V3Restrict() {
    *this = ::std::move(from);
  }

  inline V3Restrict& operator=(const V3Restrict& from) {
    CopyFrom(from);
    return *this;
  }
  inline V3Restrict& operator=(V3Restrict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const V3Restrict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V3Restrict* internal_default_instance() {
    return reinterpret_cast<const V3Restrict*>(
               &_V3Restrict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(V3Restrict& a, V3Restrict& b) {
    a.Swap(&b);
  }
  inline void Swap(V3Restrict* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V3Restrict* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V3Restrict* New() const final {
    return CreateMaybeMessage<V3Restrict>(nullptr);
  }

  V3Restrict* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V3Restrict>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V3Restrict& from);
  void MergeFrom(const V3Restrict& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V3Restrict* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.V3Restrict";
  }
  protected:
  explicit V3Restrict(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2frestricts_2eproto);
    return ::descriptor_table_scann_2fproto_2frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespacesFieldNumber = 1,
  };
  // repeated .research_scann.TokenNamespace namespaces = 1;
  int namespaces_size() const;
  void clear_namespaces();
  ::research_scann::TokenNamespace* mutable_namespaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::TokenNamespace >*
      mutable_namespaces();
  const ::research_scann::TokenNamespace& namespaces(int index) const;
  ::research_scann::TokenNamespace* add_namespaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::TokenNamespace >&
      namespaces() const;

  // @@protoc_insertion_point(class_scope:research_scann.V3Restrict)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::TokenNamespace > namespaces_;
  friend struct ::TableStruct_scann_2fproto_2frestricts_2eproto;
};
// -------------------------------------------------------------------

class TokenNamespace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.TokenNamespace) */ {
 public:
  TokenNamespace();
  virtual ~TokenNamespace();

  TokenNamespace(const TokenNamespace& from);
  TokenNamespace(TokenNamespace&& from) noexcept
    : TokenNamespace() {
    *this = ::std::move(from);
  }

  inline TokenNamespace& operator=(const TokenNamespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenNamespace& operator=(TokenNamespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenNamespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenNamespace* internal_default_instance() {
    return reinterpret_cast<const TokenNamespace*>(
               &_TokenNamespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenNamespace& a, TokenNamespace& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenNamespace* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenNamespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenNamespace* New() const final {
    return CreateMaybeMessage<TokenNamespace>(nullptr);
  }

  TokenNamespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenNamespace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenNamespace& from);
  void MergeFrom(const TokenNamespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenNamespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.TokenNamespace";
  }
  protected:
  explicit TokenNamespace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2frestricts_2eproto);
    return ::descriptor_table_scann_2fproto_2frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint64TokensFieldNumber = 2,
    kStringTokensFieldNumber = 3,
    kUint64BlacklistTokensFieldNumber = 4,
    kStringBlacklistTokensFieldNumber = 5,
    kNamespaceFieldNumber = 1,
  };
  // repeated fixed64 uint64_tokens = 2 [packed = true];
  int uint64_tokens_size() const;
  void clear_uint64_tokens();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_tokens(int index) const;
  void set_uint64_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_tokens();

  // repeated string string_tokens = 3;
  int string_tokens_size() const;
  void clear_string_tokens();
  const std::string& string_tokens(int index) const;
  std::string* mutable_string_tokens(int index);
  void set_string_tokens(int index, const std::string& value);
  void set_string_tokens(int index, std::string&& value);
  void set_string_tokens(int index, const char* value);
  void set_string_tokens(int index, const char* value, size_t size);
  std::string* add_string_tokens();
  void add_string_tokens(const std::string& value);
  void add_string_tokens(std::string&& value);
  void add_string_tokens(const char* value);
  void add_string_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_tokens();

  // repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
  int uint64_blacklist_tokens_size() const;
  void clear_uint64_blacklist_tokens();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_blacklist_tokens(int index) const;
  void set_uint64_blacklist_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_blacklist_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_blacklist_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_blacklist_tokens();

  // repeated string string_blacklist_tokens = 5;
  int string_blacklist_tokens_size() const;
  void clear_string_blacklist_tokens();
  const std::string& string_blacklist_tokens(int index) const;
  std::string* mutable_string_blacklist_tokens(int index);
  void set_string_blacklist_tokens(int index, const std::string& value);
  void set_string_blacklist_tokens(int index, std::string&& value);
  void set_string_blacklist_tokens(int index, const char* value);
  void set_string_blacklist_tokens(int index, const char* value, size_t size);
  std::string* add_string_blacklist_tokens();
  void add_string_blacklist_tokens(const std::string& value);
  void add_string_blacklist_tokens(std::string&& value);
  void add_string_blacklist_tokens(const char* value);
  void add_string_blacklist_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_blacklist_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_blacklist_tokens();

  // optional string namespace = 1;
  bool has_namespace_() const;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);

  // @@protoc_insertion_point(class_scope:research_scann.TokenNamespace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_tokens_;
  mutable std::atomic<int> _uint64_tokens_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_blacklist_tokens_;
  mutable std::atomic<int> _uint64_blacklist_tokens_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_blacklist_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  friend struct ::TableStruct_scann_2fproto_2frestricts_2eproto;
};
// -------------------------------------------------------------------

class RestrictsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.RestrictsConfig) */ {
 public:
  RestrictsConfig();
  virtual ~RestrictsConfig();

  RestrictsConfig(const RestrictsConfig& from);
  RestrictsConfig(RestrictsConfig&& from) noexcept
    : RestrictsConfig() {
    *this = ::std::move(from);
  }

  inline RestrictsConfig& operator=(const RestrictsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictsConfig& operator=(RestrictsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictsConfig* internal_default_instance() {
    return reinterpret_cast<const RestrictsConfig*>(
               &_RestrictsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RestrictsConfig& a, RestrictsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictsConfig* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictsConfig* New() const final {
    return CreateMaybeMessage<RestrictsConfig>(nullptr);
  }

  RestrictsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictsConfig& from);
  void MergeFrom(const RestrictsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.RestrictsConfig";
  }
  protected:
  explicit RestrictsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2frestricts_2eproto);
    return ::descriptor_table_scann_2fproto_2frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV3RestrictsFieldNumber = 3,
    kEnabledFieldNumber = 1,
    kRestrictCacheSizeFieldNumber = 2,
  };
  // optional .research_scann.V3RestrictsConfig v3_restricts = 3;
  bool has_v3_restricts() const;
  void clear_v3_restricts();
  const ::research_scann::V3RestrictsConfig& v3_restricts() const;
  ::research_scann::V3RestrictsConfig* release_v3_restricts();
  ::research_scann::V3RestrictsConfig* mutable_v3_restricts();
  void set_allocated_v3_restricts(::research_scann::V3RestrictsConfig* v3_restricts);
  void unsafe_arena_set_allocated_v3_restricts(
      ::research_scann::V3RestrictsConfig* v3_restricts);
  ::research_scann::V3RestrictsConfig* unsafe_arena_release_v3_restricts();

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 restrict_cache_size = 2 [default = 0];
  bool has_restrict_cache_size() const;
  void clear_restrict_cache_size();
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_cache_size() const;
  void set_restrict_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:research_scann.RestrictsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::V3RestrictsConfig* v3_restricts_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_cache_size_;
  friend struct ::TableStruct_scann_2fproto_2frestricts_2eproto;
};
// -------------------------------------------------------------------

class V3RestrictsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.V3RestrictsConfig) */ {
 public:
  V3RestrictsConfig();
  virtual ~V3RestrictsConfig();

  V3RestrictsConfig(const V3RestrictsConfig& from);
  V3RestrictsConfig(V3RestrictsConfig&& from) noexcept
    : V3RestrictsConfig() {
    *this = ::std::move(from);
  }

  inline V3RestrictsConfig& operator=(const V3RestrictsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline V3RestrictsConfig& operator=(V3RestrictsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const V3RestrictsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V3RestrictsConfig* internal_default_instance() {
    return reinterpret_cast<const V3RestrictsConfig*>(
               &_V3RestrictsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(V3RestrictsConfig& a, V3RestrictsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(V3RestrictsConfig* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V3RestrictsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V3RestrictsConfig* New() const final {
    return CreateMaybeMessage<V3RestrictsConfig>(nullptr);
  }

  V3RestrictsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V3RestrictsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V3RestrictsConfig& from);
  void MergeFrom(const V3RestrictsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V3RestrictsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.V3RestrictsConfig";
  }
  protected:
  explicit V3RestrictsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2frestricts_2eproto);
    return ::descriptor_table_scann_2fproto_2frestricts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef V3RestrictsConfig_EmptyNamespaceMatchingMode EmptyNamespaceMatchingMode;
  static constexpr EmptyNamespaceMatchingMode UNSPECIFIED =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_UNSPECIFIED;
  static constexpr EmptyNamespaceMatchingMode FORWARD_MODE =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_FORWARD_MODE;
  static constexpr EmptyNamespaceMatchingMode REVERSE_MODE =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_REVERSE_MODE;
  static constexpr EmptyNamespaceMatchingMode LAX_SYMMETRIC =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_LAX_SYMMETRIC;
  static constexpr EmptyNamespaceMatchingMode STRICT_SYMMETRIC =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_STRICT_SYMMETRIC;
  static inline bool EmptyNamespaceMatchingMode_IsValid(int value) {
    return V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(value);
  }
  static constexpr EmptyNamespaceMatchingMode EmptyNamespaceMatchingMode_MIN =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_MIN;
  static constexpr EmptyNamespaceMatchingMode EmptyNamespaceMatchingMode_MAX =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_MAX;
  static constexpr int EmptyNamespaceMatchingMode_ARRAYSIZE =
    V3RestrictsConfig_EmptyNamespaceMatchingMode_EmptyNamespaceMatchingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EmptyNamespaceMatchingMode_descriptor() {
    return V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& EmptyNamespaceMatchingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EmptyNamespaceMatchingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EmptyNamespaceMatchingMode_Name.");
    return V3RestrictsConfig_EmptyNamespaceMatchingMode_Name(enum_t_value);
  }
  static inline bool EmptyNamespaceMatchingMode_Parse(const std::string& name,
      EmptyNamespaceMatchingMode* value) {
    return V3RestrictsConfig_EmptyNamespaceMatchingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyNamespaceMatchingModeFieldNumber = 1,
  };
  // optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
  bool has_empty_namespace_matching_mode() const;
  void clear_empty_namespace_matching_mode();
  ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode empty_namespace_matching_mode() const;
  void set_empty_namespace_matching_mode(::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode value);

  // @@protoc_insertion_point(class_scope:research_scann.V3RestrictsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int empty_namespace_matching_mode_;
  friend struct ::TableStruct_scann_2fproto_2frestricts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// V3Restrict

// repeated .research_scann.TokenNamespace namespaces = 1;
inline int V3Restrict::namespaces_size() const {
  return namespaces_.size();
}
inline void V3Restrict::clear_namespaces() {
  namespaces_.Clear();
}
inline ::research_scann::TokenNamespace* V3Restrict::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.V3Restrict.namespaces)
  return namespaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::TokenNamespace >*
V3Restrict::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.V3Restrict.namespaces)
  return &namespaces_;
}
inline const ::research_scann::TokenNamespace& V3Restrict::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.V3Restrict.namespaces)
  return namespaces_.Get(index);
}
inline ::research_scann::TokenNamespace* V3Restrict::add_namespaces() {
  // @@protoc_insertion_point(field_add:research_scann.V3Restrict.namespaces)
  return namespaces_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::TokenNamespace >&
V3Restrict::namespaces() const {
  // @@protoc_insertion_point(field_list:research_scann.V3Restrict.namespaces)
  return namespaces_;
}

// -------------------------------------------------------------------

// TokenNamespace

// optional string namespace = 1;
inline bool TokenNamespace::has_namespace_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenNamespace::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenNamespace::namespace_() const {
  // @@protoc_insertion_point(field_get:research_scann.TokenNamespace.namespace)
  return namespace__.Get();
}
inline void TokenNamespace::set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.namespace)
}
inline void TokenNamespace::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.TokenNamespace.namespace)
}
inline void TokenNamespace::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.TokenNamespace.namespace)
}
inline void TokenNamespace::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.TokenNamespace.namespace)
}
inline std::string* TokenNamespace::mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.TokenNamespace.namespace)
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TokenNamespace::release_namespace_() {
  // @@protoc_insertion_point(field_release:research_scann.TokenNamespace.namespace)
  if (!has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TokenNamespace::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.TokenNamespace.namespace)
}
inline std::string* TokenNamespace::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.TokenNamespace.namespace)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TokenNamespace::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.TokenNamespace.namespace)
}

// repeated string string_tokens = 3;
inline int TokenNamespace::string_tokens_size() const {
  return string_tokens_.size();
}
inline void TokenNamespace::clear_string_tokens() {
  string_tokens_.Clear();
}
inline const std::string& TokenNamespace::string_tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.TokenNamespace.string_tokens)
  return string_tokens_.Get(index);
}
inline std::string* TokenNamespace::mutable_string_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.TokenNamespace.string_tokens)
  return string_tokens_.Mutable(index);
}
inline void TokenNamespace::set_string_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.string_tokens)
  string_tokens_.Mutable(index)->assign(value);
}
inline void TokenNamespace::set_string_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.string_tokens)
  string_tokens_.Mutable(index)->assign(std::move(value));
}
inline void TokenNamespace::set_string_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:research_scann.TokenNamespace.string_tokens)
}
inline void TokenNamespace::set_string_tokens(int index, const char* value, size_t size) {
  string_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:research_scann.TokenNamespace.string_tokens)
}
inline std::string* TokenNamespace::add_string_tokens() {
  // @@protoc_insertion_point(field_add_mutable:research_scann.TokenNamespace.string_tokens)
  return string_tokens_.Add();
}
inline void TokenNamespace::add_string_tokens(const std::string& value) {
  string_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.string_tokens)
}
inline void TokenNamespace::add_string_tokens(std::string&& value) {
  string_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.string_tokens)
}
inline void TokenNamespace::add_string_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:research_scann.TokenNamespace.string_tokens)
}
inline void TokenNamespace::add_string_tokens(const char* value, size_t size) {
  string_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:research_scann.TokenNamespace.string_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenNamespace::string_tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.TokenNamespace.string_tokens)
  return string_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenNamespace::mutable_string_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.TokenNamespace.string_tokens)
  return &string_tokens_;
}

// repeated fixed64 uint64_tokens = 2 [packed = true];
inline int TokenNamespace::uint64_tokens_size() const {
  return uint64_tokens_.size();
}
inline void TokenNamespace::clear_uint64_tokens() {
  uint64_tokens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenNamespace::uint64_tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.TokenNamespace.uint64_tokens)
  return uint64_tokens_.Get(index);
}
inline void TokenNamespace::set_uint64_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.uint64_tokens)
}
inline void TokenNamespace::add_uint64_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_tokens_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.uint64_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TokenNamespace::uint64_tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.TokenNamespace.uint64_tokens)
  return uint64_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TokenNamespace::mutable_uint64_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.TokenNamespace.uint64_tokens)
  return &uint64_tokens_;
}

// repeated string string_blacklist_tokens = 5;
inline int TokenNamespace::string_blacklist_tokens_size() const {
  return string_blacklist_tokens_.size();
}
inline void TokenNamespace::clear_string_blacklist_tokens() {
  string_blacklist_tokens_.Clear();
}
inline const std::string& TokenNamespace::string_blacklist_tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.TokenNamespace.string_blacklist_tokens)
  return string_blacklist_tokens_.Get(index);
}
inline std::string* TokenNamespace::mutable_string_blacklist_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.TokenNamespace.string_blacklist_tokens)
  return string_blacklist_tokens_.Mutable(index);
}
inline void TokenNamespace::set_string_blacklist_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.string_blacklist_tokens)
  string_blacklist_tokens_.Mutable(index)->assign(value);
}
inline void TokenNamespace::set_string_blacklist_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.string_blacklist_tokens)
  string_blacklist_tokens_.Mutable(index)->assign(std::move(value));
}
inline void TokenNamespace::set_string_blacklist_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_blacklist_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline void TokenNamespace::set_string_blacklist_tokens(int index, const char* value, size_t size) {
  string_blacklist_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline std::string* TokenNamespace::add_string_blacklist_tokens() {
  // @@protoc_insertion_point(field_add_mutable:research_scann.TokenNamespace.string_blacklist_tokens)
  return string_blacklist_tokens_.Add();
}
inline void TokenNamespace::add_string_blacklist_tokens(const std::string& value) {
  string_blacklist_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline void TokenNamespace::add_string_blacklist_tokens(std::string&& value) {
  string_blacklist_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline void TokenNamespace::add_string_blacklist_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_blacklist_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline void TokenNamespace::add_string_blacklist_tokens(const char* value, size_t size) {
  string_blacklist_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:research_scann.TokenNamespace.string_blacklist_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenNamespace::string_blacklist_tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.TokenNamespace.string_blacklist_tokens)
  return string_blacklist_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenNamespace::mutable_string_blacklist_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.TokenNamespace.string_blacklist_tokens)
  return &string_blacklist_tokens_;
}

// repeated fixed64 uint64_blacklist_tokens = 4 [packed = true];
inline int TokenNamespace::uint64_blacklist_tokens_size() const {
  return uint64_blacklist_tokens_.size();
}
inline void TokenNamespace::clear_uint64_blacklist_tokens() {
  uint64_blacklist_tokens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenNamespace::uint64_blacklist_tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.TokenNamespace.uint64_blacklist_tokens)
  return uint64_blacklist_tokens_.Get(index);
}
inline void TokenNamespace::set_uint64_blacklist_tokens(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_blacklist_tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.TokenNamespace.uint64_blacklist_tokens)
}
inline void TokenNamespace::add_uint64_blacklist_tokens(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_blacklist_tokens_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.TokenNamespace.uint64_blacklist_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TokenNamespace::uint64_blacklist_tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.TokenNamespace.uint64_blacklist_tokens)
  return uint64_blacklist_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TokenNamespace::mutable_uint64_blacklist_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.TokenNamespace.uint64_blacklist_tokens)
  return &uint64_blacklist_tokens_;
}

// -------------------------------------------------------------------

// RestrictsConfig

// optional bool enabled = 1 [default = false];
inline bool RestrictsConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestrictsConfig::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RestrictsConfig::enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.RestrictsConfig.enabled)
  return enabled_;
}
inline void RestrictsConfig::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RestrictsConfig.enabled)
}

// optional int32 restrict_cache_size = 2 [default = 0];
inline bool RestrictsConfig::has_restrict_cache_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RestrictsConfig::clear_restrict_cache_size() {
  restrict_cache_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestrictsConfig::restrict_cache_size() const {
  // @@protoc_insertion_point(field_get:research_scann.RestrictsConfig.restrict_cache_size)
  return restrict_cache_size_;
}
inline void RestrictsConfig::set_restrict_cache_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  restrict_cache_size_ = value;
  // @@protoc_insertion_point(field_set:research_scann.RestrictsConfig.restrict_cache_size)
}

// optional .research_scann.V3RestrictsConfig v3_restricts = 3;
inline bool RestrictsConfig::has_v3_restricts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestrictsConfig::clear_v3_restricts() {
  if (v3_restricts_ != nullptr) v3_restricts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::V3RestrictsConfig& RestrictsConfig::v3_restricts() const {
  const ::research_scann::V3RestrictsConfig* p = v3_restricts_;
  // @@protoc_insertion_point(field_get:research_scann.RestrictsConfig.v3_restricts)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::V3RestrictsConfig*>(
      &::research_scann::_V3RestrictsConfig_default_instance_);
}
inline ::research_scann::V3RestrictsConfig* RestrictsConfig::release_v3_restricts() {
  // @@protoc_insertion_point(field_release:research_scann.RestrictsConfig.v3_restricts)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::V3RestrictsConfig* temp = v3_restricts_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  v3_restricts_ = nullptr;
  return temp;
}
inline ::research_scann::V3RestrictsConfig* RestrictsConfig::unsafe_arena_release_v3_restricts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.RestrictsConfig.v3_restricts)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::V3RestrictsConfig* temp = v3_restricts_;
  v3_restricts_ = nullptr;
  return temp;
}
inline ::research_scann::V3RestrictsConfig* RestrictsConfig::mutable_v3_restricts() {
  _has_bits_[0] |= 0x00000001u;
  if (v3_restricts_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::V3RestrictsConfig>(GetArenaNoVirtual());
    v3_restricts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.RestrictsConfig.v3_restricts)
  return v3_restricts_;
}
inline void RestrictsConfig::set_allocated_v3_restricts(::research_scann::V3RestrictsConfig* v3_restricts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete v3_restricts_;
  }
  if (v3_restricts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v3_restricts);
    if (message_arena != submessage_arena) {
      v3_restricts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v3_restricts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  v3_restricts_ = v3_restricts;
  // @@protoc_insertion_point(field_set_allocated:research_scann.RestrictsConfig.v3_restricts)
}

// -------------------------------------------------------------------

// V3RestrictsConfig

// optional .research_scann.V3RestrictsConfig.EmptyNamespaceMatchingMode empty_namespace_matching_mode = 1 [default = UNSPECIFIED];
inline bool V3RestrictsConfig::has_empty_namespace_matching_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V3RestrictsConfig::clear_empty_namespace_matching_mode() {
  empty_namespace_matching_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode V3RestrictsConfig::empty_namespace_matching_mode() const {
  // @@protoc_insertion_point(field_get:research_scann.V3RestrictsConfig.empty_namespace_matching_mode)
  return static_cast< ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode >(empty_namespace_matching_mode_);
}
inline void V3RestrictsConfig::set_empty_namespace_matching_mode(::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode value) {
  assert(::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  empty_namespace_matching_mode_ = value;
  // @@protoc_insertion_point(field_set:research_scann.V3RestrictsConfig.empty_namespace_matching_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode>() {
  return ::research_scann::V3RestrictsConfig_EmptyNamespaceMatchingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2frestricts_2eproto
