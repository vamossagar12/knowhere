// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/results.proto

#include "scann/proto/results.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fresults_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto;
namespace research_scann {
class NearestNeighbors_NeighborDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestNeighbors_Neighbor> _instance;
} _NearestNeighbors_Neighbor_default_instance_;
class NearestNeighborsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestNeighbors> _instance;
} _NearestNeighbors_default_instance_;
class NearestNeighborsFastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestNeighborsFast> _instance;
} _NearestNeighborsFast_default_instance_;
}  // namespace research_scann
static void InitDefaultsscc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_NearestNeighbors_default_instance_;
    new (ptr) ::research_scann::NearestNeighbors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::NearestNeighbors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto}, {
      &scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto.base,}};

static void InitDefaultsscc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_NearestNeighbors_Neighbor_default_instance_;
    new (ptr) ::research_scann::NearestNeighbors_Neighbor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::NearestNeighbors_Neighbor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto}, {}};

static void InitDefaultsscc_info_NearestNeighborsFast_scann_2fproto_2fresults_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::research_scann::_NearestNeighborsFast_default_instance_;
    new (ptr) ::research_scann::NearestNeighborsFast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::research_scann::NearestNeighborsFast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestNeighborsFast_scann_2fproto_2fresults_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NearestNeighborsFast_scann_2fproto_2fresults_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fresults_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fresults_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fresults_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fresults_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, docid_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, distance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors_Neighbor, crowding_attribute_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, docid_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, retrieved_version_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighbors, neighbor_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighborsFast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighborsFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighborsFast, neighbor_ids_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighborsFast, neighbor_distances_),
  PROTOBUF_FIELD_OFFSET(::research_scann::NearestNeighborsFast, neighbor_crowding_attributes_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::research_scann::NearestNeighbors_Neighbor)},
  { 13, 22, sizeof(::research_scann::NearestNeighbors)},
  { 26, 34, sizeof(::research_scann::NearestNeighborsFast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_NearestNeighbors_Neighbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_NearestNeighbors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_NearestNeighborsFast_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fresults_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031scann/proto/results.proto\022\016research_sc"
  "ann\032 scann/data_format/features.proto\"\346\001"
  "\n\020NearestNeighbors\022\r\n\005docid\030\001 \002(\014\022\020\n\010met"
  "adata\030\003 \001(\014\022\031\n\021retrieved_version\030\004 \001(\t\022;"
  "\n\010neighbor\030\002 \003(\0132).research_scann.Neares"
  "tNeighbors.Neighbor\032Y\n\010Neighbor\022\r\n\005docid"
  "\030\003 \002(\014\022\020\n\010distance\030\004 \001(\001\022\020\n\010metadata\030\005 \001"
  "(\014\022\032\n\022crowding_attribute\030\006 \001(\003\"z\n\024Neares"
  "tNeighborsFast\022\030\n\014neighbor_ids\030\002 \003(\006B\002\020\001"
  "\022\036\n\022neighbor_distances\030\003 \003(\002B\002\020\001\022(\n\034neig"
  "hbor_crowding_attributes\030\004 \003(\003B\002\020\001B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fresults_2eproto_deps[1] = {
  &::descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scann_2fproto_2fresults_2eproto_sccs[3] = {
  &scc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto.base,
  &scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto.base,
  &scc_info_NearestNeighborsFast_scann_2fproto_2fresults_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fresults_2eproto_once;
static bool descriptor_table_scann_2fproto_2fresults_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fresults_2eproto = {
  &descriptor_table_scann_2fproto_2fresults_2eproto_initialized, descriptor_table_protodef_scann_2fproto_2fresults_2eproto, "scann/proto/results.proto", 439,
  &descriptor_table_scann_2fproto_2fresults_2eproto_once, descriptor_table_scann_2fproto_2fresults_2eproto_sccs, descriptor_table_scann_2fproto_2fresults_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fresults_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fresults_2eproto, 3, file_level_enum_descriptors_scann_2fproto_2fresults_2eproto, file_level_service_descriptors_scann_2fproto_2fresults_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scann_2fproto_2fresults_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scann_2fproto_2fresults_2eproto), true);
namespace research_scann {

// ===================================================================

void NearestNeighbors_Neighbor::InitAsDefaultInstance() {
}
class NearestNeighbors_Neighbor::_Internal {
 public:
  using HasBits = decltype(std::declval<NearestNeighbors_Neighbor>()._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crowding_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NearestNeighbors_Neighbor::NearestNeighbors_Neighbor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.NearestNeighbors.Neighbor)
}
NearestNeighbors_Neighbor::NearestNeighbors_Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.NearestNeighbors.Neighbor)
}
NearestNeighbors_Neighbor::NearestNeighbors_Neighbor(const NearestNeighbors_Neighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  docid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_docid()) {
    docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docid(),
      GetArenaNoVirtual());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata(),
      GetArenaNoVirtual());
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&crowding_attribute_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(crowding_attribute_));
  // @@protoc_insertion_point(copy_constructor:research_scann.NearestNeighbors.Neighbor)
}

void NearestNeighbors_Neighbor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto.base);
  docid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crowding_attribute_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(crowding_attribute_));
}

NearestNeighbors_Neighbor::~NearestNeighbors_Neighbor() {
  // @@protoc_insertion_point(destructor:research_scann.NearestNeighbors.Neighbor)
  SharedDtor();
}

void NearestNeighbors_Neighbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  docid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NearestNeighbors_Neighbor::ArenaDtor(void* object) {
  NearestNeighbors_Neighbor* _this = reinterpret_cast< NearestNeighbors_Neighbor* >(object);
  (void)_this;
}
void NearestNeighbors_Neighbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearestNeighbors_Neighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestNeighbors_Neighbor& NearestNeighbors_Neighbor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestNeighbors_Neighbor_scann_2fproto_2fresults_2eproto.base);
  return *internal_default_instance();
}


void NearestNeighbors_Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.NearestNeighbors.Neighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      docid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crowding_attribute_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(crowding_attribute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NearestNeighbors_Neighbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes docid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_docid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 crowding_attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_crowding_attribute(&has_bits);
          crowding_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NearestNeighbors_Neighbor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.NearestNeighbors.Neighbor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes docid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_docid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crowding_attribute = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_crowding_attribute(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &crowding_attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.NearestNeighbors.Neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.NearestNeighbors.Neighbor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NearestNeighbors_Neighbor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.NearestNeighbors.Neighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes docid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->docid(), output);
  }

  // optional double distance = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->distance(), output);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->metadata(), output);
  }

  // optional int64 crowding_attribute = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->crowding_attribute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.NearestNeighbors.Neighbor)
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestNeighbors_Neighbor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.NearestNeighbors.Neighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes docid = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->docid(), target);
  }

  // optional double distance = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->distance(), target);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }

  // optional int64 crowding_attribute = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->crowding_attribute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.NearestNeighbors.Neighbor)
  return target;
}

size_t NearestNeighbors_Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.NearestNeighbors.Neighbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes docid = 3;
  if (has_docid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->docid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes metadata = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional double distance = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int64 crowding_attribute = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->crowding_attribute());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestNeighbors_Neighbor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.NearestNeighbors.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestNeighbors_Neighbor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestNeighbors_Neighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.NearestNeighbors.Neighbor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.NearestNeighbors.Neighbor)
    MergeFrom(*source);
  }
}

void NearestNeighbors_Neighbor::MergeFrom(const NearestNeighbors_Neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.NearestNeighbors.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      set_docid(from.docid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_metadata(from.metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      crowding_attribute_ = from.crowding_attribute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NearestNeighbors_Neighbor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.NearestNeighbors.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestNeighbors_Neighbor::CopyFrom(const NearestNeighbors_Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.NearestNeighbors.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestNeighbors_Neighbor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NearestNeighbors_Neighbor::InternalSwap(NearestNeighbors_Neighbor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  docid_.Swap(&other->docid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_, other->distance_);
  swap(crowding_attribute_, other->crowding_attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestNeighbors_Neighbor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestNeighbors::InitAsDefaultInstance() {
}
class NearestNeighbors::_Internal {
 public:
  using HasBits = decltype(std::declval<NearestNeighbors>()._has_bits_);
  static void set_has_docid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_retrieved_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NearestNeighbors::NearestNeighbors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.NearestNeighbors)
}
NearestNeighbors::NearestNeighbors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  neighbor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.NearestNeighbors)
}
NearestNeighbors::NearestNeighbors(const NearestNeighbors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      neighbor_(from.neighbor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  docid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_docid()) {
    docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docid(),
      GetArenaNoVirtual());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata(),
      GetArenaNoVirtual());
  }
  retrieved_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_retrieved_version()) {
    retrieved_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.retrieved_version(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.NearestNeighbors)
}

void NearestNeighbors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto.base);
  docid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrieved_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NearestNeighbors::~NearestNeighbors() {
  // @@protoc_insertion_point(destructor:research_scann.NearestNeighbors)
  SharedDtor();
}

void NearestNeighbors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  docid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrieved_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NearestNeighbors::ArenaDtor(void* object) {
  NearestNeighbors* _this = reinterpret_cast< NearestNeighbors* >(object);
  (void)_this;
}
void NearestNeighbors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearestNeighbors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestNeighbors& NearestNeighbors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestNeighbors_scann_2fproto_2fresults_2eproto.base);
  return *internal_default_instance();
}


void NearestNeighbors::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.NearestNeighbors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      docid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      retrieved_version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NearestNeighbors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_docid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_neighbor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string retrieved_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_retrieved_version(), ptr, ctx, "research_scann.NearestNeighbors.retrieved_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NearestNeighbors::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.NearestNeighbors)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes docid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_docid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string retrieved_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_retrieved_version()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retrieved_version().data(), static_cast<int>(this->retrieved_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "research_scann.NearestNeighbors.retrieved_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.NearestNeighbors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.NearestNeighbors)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NearestNeighbors::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.NearestNeighbors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->docid(), output);
  }

  // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->neighbor(static_cast<int>(i)),
      output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  // optional string retrieved_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retrieved_version().data(), static_cast<int>(this->retrieved_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.NearestNeighbors.retrieved_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->retrieved_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.NearestNeighbors)
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestNeighbors::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.NearestNeighbors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes docid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->docid(), target);
  }

  // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->neighbor(static_cast<int>(i)), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  // optional string retrieved_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retrieved_version().data(), static_cast<int>(this->retrieved_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.NearestNeighbors.retrieved_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->retrieved_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.NearestNeighbors)
  return target;
}

size_t NearestNeighbors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.NearestNeighbors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes docid = 1;
  if (has_docid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->docid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->neighbor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->neighbor(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional string retrieved_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->retrieved_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestNeighbors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.NearestNeighbors)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestNeighbors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestNeighbors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.NearestNeighbors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.NearestNeighbors)
    MergeFrom(*source);
  }
}

void NearestNeighbors::MergeFrom(const NearestNeighbors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.NearestNeighbors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_.MergeFrom(from.neighbor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      set_docid(from.docid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_metadata(from.metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      set_retrieved_version(from.retrieved_version());
    }
  }
}

void NearestNeighbors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.NearestNeighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestNeighbors::CopyFrom(const NearestNeighbors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.NearestNeighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestNeighbors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->neighbor())) return false;
  return true;
}

void NearestNeighbors::InternalSwap(NearestNeighbors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&neighbor_)->InternalSwap(CastToBase(&other->neighbor_));
  docid_.Swap(&other->docid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  retrieved_version_.Swap(&other->retrieved_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestNeighbors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestNeighborsFast::InitAsDefaultInstance() {
}
class NearestNeighborsFast::_Internal {
 public:
  using HasBits = decltype(std::declval<NearestNeighborsFast>()._has_bits_);
};

NearestNeighborsFast::NearestNeighborsFast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:research_scann.NearestNeighborsFast)
}
NearestNeighborsFast::NearestNeighborsFast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  neighbor_ids_(arena),
  neighbor_distances_(arena),
  neighbor_crowding_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:research_scann.NearestNeighborsFast)
}
NearestNeighborsFast::NearestNeighborsFast(const NearestNeighborsFast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      neighbor_ids_(from.neighbor_ids_),
      neighbor_distances_(from.neighbor_distances_),
      neighbor_crowding_attributes_(from.neighbor_crowding_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.NearestNeighborsFast)
}

void NearestNeighborsFast::SharedCtor() {
}

NearestNeighborsFast::~NearestNeighborsFast() {
  // @@protoc_insertion_point(destructor:research_scann.NearestNeighborsFast)
  SharedDtor();
}

void NearestNeighborsFast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void NearestNeighborsFast::ArenaDtor(void* object) {
  NearestNeighborsFast* _this = reinterpret_cast< NearestNeighborsFast* >(object);
  (void)_this;
}
void NearestNeighborsFast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearestNeighborsFast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestNeighborsFast& NearestNeighborsFast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestNeighborsFast_scann_2fproto_2fresults_2eproto.base);
  return *internal_default_instance();
}


void NearestNeighborsFast::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.NearestNeighborsFast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_ids_.Clear();
  neighbor_distances_.Clear();
  neighbor_crowding_attributes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NearestNeighborsFast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 neighbor_ids = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_neighbor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          add_neighbor_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated float neighbor_distances = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_neighbor_distances(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_neighbor_distances(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_neighbor_crowding_attributes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_neighbor_crowding_attributes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NearestNeighborsFast::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:research_scann.NearestNeighborsFast)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 neighbor_ids = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_neighbor_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 18u, input, this->mutable_neighbor_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float neighbor_distances = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_neighbor_distances())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_neighbor_distances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_neighbor_crowding_attributes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_neighbor_crowding_attributes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:research_scann.NearestNeighborsFast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:research_scann.NearestNeighborsFast)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NearestNeighborsFast::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:research_scann.NearestNeighborsFast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 neighbor_ids = 2 [packed = true];
  if (this->neighbor_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neighbor_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->neighbor_ids().data(), this->neighbor_ids_size(), output);
  }

  // repeated float neighbor_distances = 3 [packed = true];
  if (this->neighbor_distances_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neighbor_distances_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->neighbor_distances().data(), this->neighbor_distances_size(), output);
  }

  // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
  if (this->neighbor_crowding_attributes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neighbor_crowding_attributes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->neighbor_crowding_attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->neighbor_crowding_attributes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:research_scann.NearestNeighborsFast)
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestNeighborsFast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.NearestNeighborsFast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 neighbor_ids = 2 [packed = true];
  if (this->neighbor_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _neighbor_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->neighbor_ids_, target);
  }

  // repeated float neighbor_distances = 3 [packed = true];
  if (this->neighbor_distances_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _neighbor_distances_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->neighbor_distances_, target);
  }

  // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
  if (this->neighbor_crowding_attributes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _neighbor_crowding_attributes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->neighbor_crowding_attributes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.NearestNeighborsFast)
  return target;
}

size_t NearestNeighborsFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.NearestNeighborsFast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 neighbor_ids = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->neighbor_ids_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float neighbor_distances = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->neighbor_distances_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbor_distances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->neighbor_crowding_attributes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbor_crowding_attributes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestNeighborsFast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:research_scann.NearestNeighborsFast)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestNeighborsFast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestNeighborsFast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:research_scann.NearestNeighborsFast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:research_scann.NearestNeighborsFast)
    MergeFrom(*source);
  }
}

void NearestNeighborsFast::MergeFrom(const NearestNeighborsFast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.NearestNeighborsFast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_ids_.MergeFrom(from.neighbor_ids_);
  neighbor_distances_.MergeFrom(from.neighbor_distances_);
  neighbor_crowding_attributes_.MergeFrom(from.neighbor_crowding_attributes_);
}

void NearestNeighborsFast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:research_scann.NearestNeighborsFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestNeighborsFast::CopyFrom(const NearestNeighborsFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.NearestNeighborsFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestNeighborsFast::IsInitialized() const {
  return true;
}

void NearestNeighborsFast::InternalSwap(NearestNeighborsFast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  neighbor_ids_.InternalSwap(&other->neighbor_ids_);
  neighbor_distances_.InternalSwap(&other->neighbor_distances_);
  neighbor_crowding_attributes_.InternalSwap(&other->neighbor_crowding_attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestNeighborsFast::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::NearestNeighbors_Neighbor* Arena::CreateMaybeMessage< ::research_scann::NearestNeighbors_Neighbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::NearestNeighbors_Neighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::NearestNeighbors* Arena::CreateMaybeMessage< ::research_scann::NearestNeighbors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::NearestNeighbors >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::NearestNeighborsFast* Arena::CreateMaybeMessage< ::research_scann::NearestNeighborsFast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::NearestNeighborsFast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
