// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/results.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fresults_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fresults_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/data_format/features.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fresults_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fresults_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fresults_2eproto;
namespace research_scann {
class NearestNeighbors;
class NearestNeighborsDefaultTypeInternal;
extern NearestNeighborsDefaultTypeInternal _NearestNeighbors_default_instance_;
class NearestNeighborsFast;
class NearestNeighborsFastDefaultTypeInternal;
extern NearestNeighborsFastDefaultTypeInternal _NearestNeighborsFast_default_instance_;
class NearestNeighbors_Neighbor;
class NearestNeighbors_NeighborDefaultTypeInternal;
extern NearestNeighbors_NeighborDefaultTypeInternal _NearestNeighbors_Neighbor_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::NearestNeighbors* Arena::CreateMaybeMessage<::research_scann::NearestNeighbors>(Arena*);
template<> ::research_scann::NearestNeighborsFast* Arena::CreateMaybeMessage<::research_scann::NearestNeighborsFast>(Arena*);
template<> ::research_scann::NearestNeighbors_Neighbor* Arena::CreateMaybeMessage<::research_scann::NearestNeighbors_Neighbor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class NearestNeighbors_Neighbor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.NearestNeighbors.Neighbor) */ {
 public:
  NearestNeighbors_Neighbor();
  virtual ~NearestNeighbors_Neighbor();

  NearestNeighbors_Neighbor(const NearestNeighbors_Neighbor& from);
  NearestNeighbors_Neighbor(NearestNeighbors_Neighbor&& from) noexcept
    : NearestNeighbors_Neighbor() {
    *this = ::std::move(from);
  }

  inline NearestNeighbors_Neighbor& operator=(const NearestNeighbors_Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestNeighbors_Neighbor& operator=(NearestNeighbors_Neighbor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestNeighbors_Neighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestNeighbors_Neighbor* internal_default_instance() {
    return reinterpret_cast<const NearestNeighbors_Neighbor*>(
               &_NearestNeighbors_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NearestNeighbors_Neighbor& a, NearestNeighbors_Neighbor& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestNeighbors_Neighbor* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearestNeighbors_Neighbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestNeighbors_Neighbor* New() const final {
    return CreateMaybeMessage<NearestNeighbors_Neighbor>(nullptr);
  }

  NearestNeighbors_Neighbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestNeighbors_Neighbor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestNeighbors_Neighbor& from);
  void MergeFrom(const NearestNeighbors_Neighbor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestNeighbors_Neighbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.NearestNeighbors.Neighbor";
  }
  protected:
  explicit NearestNeighbors_Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fresults_2eproto);
    return ::descriptor_table_scann_2fproto_2fresults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocidFieldNumber = 3,
    kMetadataFieldNumber = 5,
    kDistanceFieldNumber = 4,
    kCrowdingAttributeFieldNumber = 6,
  };
  // required bytes docid = 3;
  bool has_docid() const;
  void clear_docid();
  const std::string& docid() const;
  void set_docid(const std::string& value);
  void set_docid(std::string&& value);
  void set_docid(const char* value);
  void set_docid(const void* value, size_t size);
  std::string* mutable_docid();
  std::string* release_docid();
  void set_allocated_docid(std::string* docid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_docid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_docid(
      std::string* docid);

  // optional bytes metadata = 5;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metadata(
      std::string* metadata);

  // optional double distance = 4;
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int64 crowding_attribute = 6;
  bool has_crowding_attribute() const;
  void clear_crowding_attribute();
  ::PROTOBUF_NAMESPACE_ID::int64 crowding_attribute() const;
  void set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:research_scann.NearestNeighbors.Neighbor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int64 crowding_attribute_;
  friend struct ::TableStruct_scann_2fproto_2fresults_2eproto;
};
// -------------------------------------------------------------------

class NearestNeighbors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.NearestNeighbors) */ {
 public:
  NearestNeighbors();
  virtual ~NearestNeighbors();

  NearestNeighbors(const NearestNeighbors& from);
  NearestNeighbors(NearestNeighbors&& from) noexcept
    : NearestNeighbors() {
    *this = ::std::move(from);
  }

  inline NearestNeighbors& operator=(const NearestNeighbors& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestNeighbors& operator=(NearestNeighbors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestNeighbors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestNeighbors* internal_default_instance() {
    return reinterpret_cast<const NearestNeighbors*>(
               &_NearestNeighbors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NearestNeighbors& a, NearestNeighbors& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestNeighbors* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearestNeighbors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestNeighbors* New() const final {
    return CreateMaybeMessage<NearestNeighbors>(nullptr);
  }

  NearestNeighbors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestNeighbors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestNeighbors& from);
  void MergeFrom(const NearestNeighbors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestNeighbors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.NearestNeighbors";
  }
  protected:
  explicit NearestNeighbors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fresults_2eproto);
    return ::descriptor_table_scann_2fproto_2fresults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NearestNeighbors_Neighbor Neighbor;

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborFieldNumber = 2,
    kDocidFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kRetrievedVersionFieldNumber = 4,
  };
  // repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
  int neighbor_size() const;
  void clear_neighbor();
  ::research_scann::NearestNeighbors_Neighbor* mutable_neighbor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::NearestNeighbors_Neighbor >*
      mutable_neighbor();
  const ::research_scann::NearestNeighbors_Neighbor& neighbor(int index) const;
  ::research_scann::NearestNeighbors_Neighbor* add_neighbor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::NearestNeighbors_Neighbor >&
      neighbor() const;

  // required bytes docid = 1;
  bool has_docid() const;
  void clear_docid();
  const std::string& docid() const;
  void set_docid(const std::string& value);
  void set_docid(std::string&& value);
  void set_docid(const char* value);
  void set_docid(const void* value, size_t size);
  std::string* mutable_docid();
  std::string* release_docid();
  void set_allocated_docid(std::string* docid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_docid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_docid(
      std::string* docid);

  // optional bytes metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metadata(
      std::string* metadata);

  // optional string retrieved_version = 4;
  bool has_retrieved_version() const;
  void clear_retrieved_version();
  const std::string& retrieved_version() const;
  void set_retrieved_version(const std::string& value);
  void set_retrieved_version(std::string&& value);
  void set_retrieved_version(const char* value);
  void set_retrieved_version(const char* value, size_t size);
  std::string* mutable_retrieved_version();
  std::string* release_retrieved_version();
  void set_allocated_retrieved_version(std::string* retrieved_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_retrieved_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_retrieved_version(
      std::string* retrieved_version);

  // @@protoc_insertion_point(class_scope:research_scann.NearestNeighbors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::NearestNeighbors_Neighbor > neighbor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retrieved_version_;
  friend struct ::TableStruct_scann_2fproto_2fresults_2eproto;
};
// -------------------------------------------------------------------

class NearestNeighborsFast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.NearestNeighborsFast) */ {
 public:
  NearestNeighborsFast();
  virtual ~NearestNeighborsFast();

  NearestNeighborsFast(const NearestNeighborsFast& from);
  NearestNeighborsFast(NearestNeighborsFast&& from) noexcept
    : NearestNeighborsFast() {
    *this = ::std::move(from);
  }

  inline NearestNeighborsFast& operator=(const NearestNeighborsFast& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestNeighborsFast& operator=(NearestNeighborsFast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestNeighborsFast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestNeighborsFast* internal_default_instance() {
    return reinterpret_cast<const NearestNeighborsFast*>(
               &_NearestNeighborsFast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NearestNeighborsFast& a, NearestNeighborsFast& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestNeighborsFast* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearestNeighborsFast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestNeighborsFast* New() const final {
    return CreateMaybeMessage<NearestNeighborsFast>(nullptr);
  }

  NearestNeighborsFast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestNeighborsFast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestNeighborsFast& from);
  void MergeFrom(const NearestNeighborsFast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestNeighborsFast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.NearestNeighborsFast";
  }
  protected:
  explicit NearestNeighborsFast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fresults_2eproto);
    return ::descriptor_table_scann_2fproto_2fresults_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborIdsFieldNumber = 2,
    kNeighborDistancesFieldNumber = 3,
    kNeighborCrowdingAttributesFieldNumber = 4,
  };
  // repeated fixed64 neighbor_ids = 2 [packed = true];
  int neighbor_ids_size() const;
  void clear_neighbor_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 neighbor_ids(int index) const;
  void set_neighbor_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_neighbor_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      neighbor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_neighbor_ids();

  // repeated float neighbor_distances = 3 [packed = true];
  int neighbor_distances_size() const;
  void clear_neighbor_distances();
  float neighbor_distances(int index) const;
  void set_neighbor_distances(int index, float value);
  void add_neighbor_distances(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      neighbor_distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_neighbor_distances();

  // repeated int64 neighbor_crowding_attributes = 4 [packed = true];
  int neighbor_crowding_attributes_size() const;
  void clear_neighbor_crowding_attributes();
  ::PROTOBUF_NAMESPACE_ID::int64 neighbor_crowding_attributes(int index) const;
  void set_neighbor_crowding_attributes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_neighbor_crowding_attributes(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      neighbor_crowding_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_neighbor_crowding_attributes();

  // @@protoc_insertion_point(class_scope:research_scann.NearestNeighborsFast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > neighbor_ids_;
  mutable std::atomic<int> _neighbor_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > neighbor_distances_;
  mutable std::atomic<int> _neighbor_distances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > neighbor_crowding_attributes_;
  mutable std::atomic<int> _neighbor_crowding_attributes_cached_byte_size_;
  friend struct ::TableStruct_scann_2fproto_2fresults_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NearestNeighbors_Neighbor

// required bytes docid = 3;
inline bool NearestNeighbors_Neighbor::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearestNeighbors_Neighbor::clear_docid() {
  docid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NearestNeighbors_Neighbor::docid() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.Neighbor.docid)
  return docid_.Get();
}
inline void NearestNeighbors_Neighbor::set_docid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.Neighbor.docid)
}
inline void NearestNeighbors_Neighbor::set_docid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.NearestNeighbors.Neighbor.docid)
}
inline void NearestNeighbors_Neighbor::set_docid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.NearestNeighbors.Neighbor.docid)
}
inline void NearestNeighbors_Neighbor::set_docid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.NearestNeighbors.Neighbor.docid)
}
inline std::string* NearestNeighbors_Neighbor::mutable_docid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.Neighbor.docid)
  return docid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* NearestNeighbors_Neighbor::release_docid() {
  // @@protoc_insertion_point(field_release:research_scann.NearestNeighbors.Neighbor.docid)
  if (!has_docid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return docid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void NearestNeighbors_Neighbor::set_allocated_docid(std::string* docid) {
  if (docid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  docid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), docid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.NearestNeighbors.Neighbor.docid)
}
inline std::string* NearestNeighbors_Neighbor::unsafe_arena_release_docid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.NearestNeighbors.Neighbor.docid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return docid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NearestNeighbors_Neighbor::unsafe_arena_set_allocated_docid(
    std::string* docid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (docid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  docid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      docid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.NearestNeighbors.Neighbor.docid)
}

// optional double distance = 4;
inline bool NearestNeighbors_Neighbor::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NearestNeighbors_Neighbor::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double NearestNeighbors_Neighbor::distance() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.Neighbor.distance)
  return distance_;
}
inline void NearestNeighbors_Neighbor::set_distance(double value) {
  _has_bits_[0] |= 0x00000004u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.Neighbor.distance)
}

// optional bytes metadata = 5;
inline bool NearestNeighbors_Neighbor::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearestNeighbors_Neighbor::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NearestNeighbors_Neighbor::metadata() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.Neighbor.metadata)
  return metadata_.Get();
}
inline void NearestNeighbors_Neighbor::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.Neighbor.metadata)
}
inline void NearestNeighbors_Neighbor::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.NearestNeighbors.Neighbor.metadata)
}
inline void NearestNeighbors_Neighbor::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.NearestNeighbors.Neighbor.metadata)
}
inline void NearestNeighbors_Neighbor::set_metadata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.NearestNeighbors.Neighbor.metadata)
}
inline std::string* NearestNeighbors_Neighbor::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.Neighbor.metadata)
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* NearestNeighbors_Neighbor::release_metadata() {
  // @@protoc_insertion_point(field_release:research_scann.NearestNeighbors.Neighbor.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void NearestNeighbors_Neighbor::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.NearestNeighbors.Neighbor.metadata)
}
inline std::string* NearestNeighbors_Neighbor::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.NearestNeighbors.Neighbor.metadata)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NearestNeighbors_Neighbor::unsafe_arena_set_allocated_metadata(
    std::string* metadata) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metadata, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.NearestNeighbors.Neighbor.metadata)
}

// optional int64 crowding_attribute = 6;
inline bool NearestNeighbors_Neighbor::has_crowding_attribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NearestNeighbors_Neighbor::clear_crowding_attribute() {
  crowding_attribute_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NearestNeighbors_Neighbor::crowding_attribute() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.Neighbor.crowding_attribute)
  return crowding_attribute_;
}
inline void NearestNeighbors_Neighbor::set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  crowding_attribute_ = value;
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.Neighbor.crowding_attribute)
}

// -------------------------------------------------------------------

// NearestNeighbors

// required bytes docid = 1;
inline bool NearestNeighbors::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearestNeighbors::clear_docid() {
  docid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NearestNeighbors::docid() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.docid)
  return docid_.Get();
}
inline void NearestNeighbors::set_docid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.docid)
}
inline void NearestNeighbors::set_docid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.NearestNeighbors.docid)
}
inline void NearestNeighbors::set_docid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.NearestNeighbors.docid)
}
inline void NearestNeighbors::set_docid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  docid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.NearestNeighbors.docid)
}
inline std::string* NearestNeighbors::mutable_docid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.docid)
  return docid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* NearestNeighbors::release_docid() {
  // @@protoc_insertion_point(field_release:research_scann.NearestNeighbors.docid)
  if (!has_docid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return docid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void NearestNeighbors::set_allocated_docid(std::string* docid) {
  if (docid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  docid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), docid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.NearestNeighbors.docid)
}
inline std::string* NearestNeighbors::unsafe_arena_release_docid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.NearestNeighbors.docid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return docid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NearestNeighbors::unsafe_arena_set_allocated_docid(
    std::string* docid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (docid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  docid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      docid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.NearestNeighbors.docid)
}

// optional bytes metadata = 3;
inline bool NearestNeighbors::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearestNeighbors::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NearestNeighbors::metadata() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.metadata)
  return metadata_.Get();
}
inline void NearestNeighbors::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.metadata)
}
inline void NearestNeighbors::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.NearestNeighbors.metadata)
}
inline void NearestNeighbors::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.NearestNeighbors.metadata)
}
inline void NearestNeighbors::set_metadata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.NearestNeighbors.metadata)
}
inline std::string* NearestNeighbors::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.metadata)
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* NearestNeighbors::release_metadata() {
  // @@protoc_insertion_point(field_release:research_scann.NearestNeighbors.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void NearestNeighbors::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.NearestNeighbors.metadata)
}
inline std::string* NearestNeighbors::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.NearestNeighbors.metadata)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NearestNeighbors::unsafe_arena_set_allocated_metadata(
    std::string* metadata) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metadata, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.NearestNeighbors.metadata)
}

// optional string retrieved_version = 4;
inline bool NearestNeighbors::has_retrieved_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NearestNeighbors::clear_retrieved_version() {
  retrieved_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NearestNeighbors::retrieved_version() const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.retrieved_version)
  return retrieved_version_.Get();
}
inline void NearestNeighbors::set_retrieved_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  retrieved_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighbors.retrieved_version)
}
inline void NearestNeighbors::set_retrieved_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  retrieved_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:research_scann.NearestNeighbors.retrieved_version)
}
inline void NearestNeighbors::set_retrieved_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  retrieved_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:research_scann.NearestNeighbors.retrieved_version)
}
inline void NearestNeighbors::set_retrieved_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  retrieved_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:research_scann.NearestNeighbors.retrieved_version)
}
inline std::string* NearestNeighbors::mutable_retrieved_version() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.retrieved_version)
  return retrieved_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* NearestNeighbors::release_retrieved_version() {
  // @@protoc_insertion_point(field_release:research_scann.NearestNeighbors.retrieved_version)
  if (!has_retrieved_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return retrieved_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void NearestNeighbors::set_allocated_retrieved_version(std::string* retrieved_version) {
  if (retrieved_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  retrieved_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retrieved_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:research_scann.NearestNeighbors.retrieved_version)
}
inline std::string* NearestNeighbors::unsafe_arena_release_retrieved_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.NearestNeighbors.retrieved_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return retrieved_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NearestNeighbors::unsafe_arena_set_allocated_retrieved_version(
    std::string* retrieved_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (retrieved_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  retrieved_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      retrieved_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.NearestNeighbors.retrieved_version)
}

// repeated .research_scann.NearestNeighbors.Neighbor neighbor = 2;
inline int NearestNeighbors::neighbor_size() const {
  return neighbor_.size();
}
inline void NearestNeighbors::clear_neighbor() {
  neighbor_.Clear();
}
inline ::research_scann::NearestNeighbors_Neighbor* NearestNeighbors::mutable_neighbor(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.NearestNeighbors.neighbor)
  return neighbor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::NearestNeighbors_Neighbor >*
NearestNeighbors::mutable_neighbor() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.NearestNeighbors.neighbor)
  return &neighbor_;
}
inline const ::research_scann::NearestNeighbors_Neighbor& NearestNeighbors::neighbor(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighbors.neighbor)
  return neighbor_.Get(index);
}
inline ::research_scann::NearestNeighbors_Neighbor* NearestNeighbors::add_neighbor() {
  // @@protoc_insertion_point(field_add:research_scann.NearestNeighbors.neighbor)
  return neighbor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::NearestNeighbors_Neighbor >&
NearestNeighbors::neighbor() const {
  // @@protoc_insertion_point(field_list:research_scann.NearestNeighbors.neighbor)
  return neighbor_;
}

// -------------------------------------------------------------------

// NearestNeighborsFast

// repeated fixed64 neighbor_ids = 2 [packed = true];
inline int NearestNeighborsFast::neighbor_ids_size() const {
  return neighbor_ids_.size();
}
inline void NearestNeighborsFast::clear_neighbor_ids() {
  neighbor_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborsFast::neighbor_ids(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighborsFast.neighbor_ids)
  return neighbor_ids_.Get(index);
}
inline void NearestNeighborsFast::set_neighbor_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  neighbor_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighborsFast.neighbor_ids)
}
inline void NearestNeighborsFast::add_neighbor_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  neighbor_ids_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.NearestNeighborsFast.neighbor_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NearestNeighborsFast::neighbor_ids() const {
  // @@protoc_insertion_point(field_list:research_scann.NearestNeighborsFast.neighbor_ids)
  return neighbor_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NearestNeighborsFast::mutable_neighbor_ids() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.NearestNeighborsFast.neighbor_ids)
  return &neighbor_ids_;
}

// repeated float neighbor_distances = 3 [packed = true];
inline int NearestNeighborsFast::neighbor_distances_size() const {
  return neighbor_distances_.size();
}
inline void NearestNeighborsFast::clear_neighbor_distances() {
  neighbor_distances_.Clear();
}
inline float NearestNeighborsFast::neighbor_distances(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighborsFast.neighbor_distances)
  return neighbor_distances_.Get(index);
}
inline void NearestNeighborsFast::set_neighbor_distances(int index, float value) {
  neighbor_distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighborsFast.neighbor_distances)
}
inline void NearestNeighborsFast::add_neighbor_distances(float value) {
  neighbor_distances_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.NearestNeighborsFast.neighbor_distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NearestNeighborsFast::neighbor_distances() const {
  // @@protoc_insertion_point(field_list:research_scann.NearestNeighborsFast.neighbor_distances)
  return neighbor_distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NearestNeighborsFast::mutable_neighbor_distances() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.NearestNeighborsFast.neighbor_distances)
  return &neighbor_distances_;
}

// repeated int64 neighbor_crowding_attributes = 4 [packed = true];
inline int NearestNeighborsFast::neighbor_crowding_attributes_size() const {
  return neighbor_crowding_attributes_.size();
}
inline void NearestNeighborsFast::clear_neighbor_crowding_attributes() {
  neighbor_crowding_attributes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NearestNeighborsFast::neighbor_crowding_attributes(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.NearestNeighborsFast.neighbor_crowding_attributes)
  return neighbor_crowding_attributes_.Get(index);
}
inline void NearestNeighborsFast::set_neighbor_crowding_attributes(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  neighbor_crowding_attributes_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.NearestNeighborsFast.neighbor_crowding_attributes)
}
inline void NearestNeighborsFast::add_neighbor_crowding_attributes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  neighbor_crowding_attributes_.Add(value);
  // @@protoc_insertion_point(field_add:research_scann.NearestNeighborsFast.neighbor_crowding_attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
NearestNeighborsFast::neighbor_crowding_attributes() const {
  // @@protoc_insertion_point(field_list:research_scann.NearestNeighborsFast.neighbor_crowding_attributes)
  return neighbor_crowding_attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
NearestNeighborsFast::mutable_neighbor_crowding_attributes() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.NearestNeighborsFast.neighbor_crowding_attributes)
  return &neighbor_crowding_attributes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fresults_2eproto
