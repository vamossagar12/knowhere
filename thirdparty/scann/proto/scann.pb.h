// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/scann.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fscann_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fscann_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scann/proto/brute_force.pb.h"
#include "scann/proto/crowding.pb.h"
#include "scann/proto/disjoint_restrict_token.pb.h"
#include "scann/proto/distance_measure.pb.h"
#include "scann/proto/exact_reordering.pb.h"
#include "scann/proto/hash.pb.h"
#include "scann/proto/input_output.pb.h"
#include "scann/proto/metadata.pb.h"
#include "scann/proto/partitioning.pb.h"
#include "scann/proto/restricts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fscann_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fscann_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fscann_2eproto;
namespace research_scann {
class ScannConfig;
class ScannConfigDefaultTypeInternal;
extern ScannConfigDefaultTypeInternal _ScannConfig_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::ScannConfig* Arena::CreateMaybeMessage<::research_scann::ScannConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

enum ScannConfig_SearchParadigm : int {
  ScannConfig_SearchParadigm_QUERY_DATABASE = 0,
  ScannConfig_SearchParadigm_ALL_PAIR = 1
};
bool ScannConfig_SearchParadigm_IsValid(int value);
constexpr ScannConfig_SearchParadigm ScannConfig_SearchParadigm_SearchParadigm_MIN = ScannConfig_SearchParadigm_QUERY_DATABASE;
constexpr ScannConfig_SearchParadigm ScannConfig_SearchParadigm_SearchParadigm_MAX = ScannConfig_SearchParadigm_ALL_PAIR;
constexpr int ScannConfig_SearchParadigm_SearchParadigm_ARRAYSIZE = ScannConfig_SearchParadigm_SearchParadigm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannConfig_SearchParadigm_descriptor();
template<typename T>
inline const std::string& ScannConfig_SearchParadigm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScannConfig_SearchParadigm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScannConfig_SearchParadigm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScannConfig_SearchParadigm_descriptor(), enum_t_value);
}
inline bool ScannConfig_SearchParadigm_Parse(
    const std::string& name, ScannConfig_SearchParadigm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScannConfig_SearchParadigm>(
    ScannConfig_SearchParadigm_descriptor(), name, value);
}
enum ScannConfig_SearchType : int {
  ScannConfig_SearchType_KNN = 0,
  ScannConfig_SearchType_ENN = 1,
  ScannConfig_SearchType_HYBRID = 2
};
bool ScannConfig_SearchType_IsValid(int value);
constexpr ScannConfig_SearchType ScannConfig_SearchType_SearchType_MIN = ScannConfig_SearchType_KNN;
constexpr ScannConfig_SearchType ScannConfig_SearchType_SearchType_MAX = ScannConfig_SearchType_HYBRID;
constexpr int ScannConfig_SearchType_SearchType_ARRAYSIZE = ScannConfig_SearchType_SearchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannConfig_SearchType_descriptor();
template<typename T>
inline const std::string& ScannConfig_SearchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScannConfig_SearchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScannConfig_SearchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScannConfig_SearchType_descriptor(), enum_t_value);
}
inline bool ScannConfig_SearchType_Parse(
    const std::string& name, ScannConfig_SearchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScannConfig_SearchType>(
    ScannConfig_SearchType_descriptor(), name, value);
}
// ===================================================================

class ScannConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.ScannConfig) */ {
 public:
  ScannConfig();
  virtual ~ScannConfig();

  ScannConfig(const ScannConfig& from);
  ScannConfig(ScannConfig&& from) noexcept
    : ScannConfig() {
    *this = ::std::move(from);
  }

  inline ScannConfig& operator=(const ScannConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScannConfig& operator=(ScannConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScannConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScannConfig* internal_default_instance() {
    return reinterpret_cast<const ScannConfig*>(
               &_ScannConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScannConfig& a, ScannConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScannConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScannConfig* New() const final {
    return CreateMaybeMessage<ScannConfig>(nullptr);
  }

  ScannConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScannConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScannConfig& from);
  void MergeFrom(const ScannConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScannConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.ScannConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scann_2fproto_2fscann_2eproto);
    return ::descriptor_table_scann_2fproto_2fscann_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ScannConfig_SearchParadigm SearchParadigm;
  static constexpr SearchParadigm QUERY_DATABASE =
    ScannConfig_SearchParadigm_QUERY_DATABASE;
  static constexpr SearchParadigm ALL_PAIR =
    ScannConfig_SearchParadigm_ALL_PAIR;
  static inline bool SearchParadigm_IsValid(int value) {
    return ScannConfig_SearchParadigm_IsValid(value);
  }
  static constexpr SearchParadigm SearchParadigm_MIN =
    ScannConfig_SearchParadigm_SearchParadigm_MIN;
  static constexpr SearchParadigm SearchParadigm_MAX =
    ScannConfig_SearchParadigm_SearchParadigm_MAX;
  static constexpr int SearchParadigm_ARRAYSIZE =
    ScannConfig_SearchParadigm_SearchParadigm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SearchParadigm_descriptor() {
    return ScannConfig_SearchParadigm_descriptor();
  }
  template<typename T>
  static inline const std::string& SearchParadigm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SearchParadigm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SearchParadigm_Name.");
    return ScannConfig_SearchParadigm_Name(enum_t_value);
  }
  static inline bool SearchParadigm_Parse(const std::string& name,
      SearchParadigm* value) {
    return ScannConfig_SearchParadigm_Parse(name, value);
  }

  typedef ScannConfig_SearchType SearchType;
  static constexpr SearchType KNN =
    ScannConfig_SearchType_KNN;
  static constexpr SearchType ENN =
    ScannConfig_SearchType_ENN;
  static constexpr SearchType HYBRID =
    ScannConfig_SearchType_HYBRID;
  static inline bool SearchType_IsValid(int value) {
    return ScannConfig_SearchType_IsValid(value);
  }
  static constexpr SearchType SearchType_MIN =
    ScannConfig_SearchType_SearchType_MIN;
  static constexpr SearchType SearchType_MAX =
    ScannConfig_SearchType_SearchType_MAX;
  static constexpr int SearchType_ARRAYSIZE =
    ScannConfig_SearchType_SearchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SearchType_descriptor() {
    return ScannConfig_SearchType_descriptor();
  }
  template<typename T>
  static inline const std::string& SearchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SearchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SearchType_Name.");
    return ScannConfig_SearchType_Name(enum_t_value);
  }
  static inline bool SearchType_Parse(const std::string& name,
      SearchType* value) {
    return ScannConfig_SearchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomSearchMethodFieldNumber = 22,
    kDatasetNameFieldNumber = 32,
    kDistanceMeasureFieldNumber = 5,
    kInputOutputFieldNumber = 6,
    kBruteForceFieldNumber = 7,
    kPartitioningFieldNumber = 8,
    kHashFieldNumber = 13,
    kExactReorderingFieldNumber = 17,
    kMetadataFieldNumber = 20,
    kCrowdingFieldNumber = 29,
    kDisjointRestrictTokenFieldNumber = 31,
    kV3RestrictsFieldNumber = 37,
    kRestrictsFieldNumber = 39,
    kSearchParadigmFieldNumber = 1,
    kSearchTypeFieldNumber = 2,
    kNumSingleShardNeighborsFieldNumber = 21,
    kRestrictsEnabledFieldNumber = 24,
    kNumNeighborsFieldNumber = 3,
    kEpsilonDistanceFieldNumber = 4,
  };
  // optional bytes custom_search_method = 22;
  bool has_custom_search_method() const;
  void clear_custom_search_method();
  const std::string& custom_search_method() const;
  void set_custom_search_method(const std::string& value);
  void set_custom_search_method(std::string&& value);
  void set_custom_search_method(const char* value);
  void set_custom_search_method(const void* value, size_t size);
  std::string* mutable_custom_search_method();
  std::string* release_custom_search_method();
  void set_allocated_custom_search_method(std::string* custom_search_method);

  // optional string dataset_name = 32;
  bool has_dataset_name() const;
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);

  // optional .research_scann.DistanceMeasureConfig distance_measure = 5;
  bool has_distance_measure() const;
  void clear_distance_measure();
  const ::research_scann::DistanceMeasureConfig& distance_measure() const;
  ::research_scann::DistanceMeasureConfig* release_distance_measure();
  ::research_scann::DistanceMeasureConfig* mutable_distance_measure();
  void set_allocated_distance_measure(::research_scann::DistanceMeasureConfig* distance_measure);

  // optional .research_scann.InputOutputConfig input_output = 6;
  bool has_input_output() const;
  void clear_input_output();
  const ::research_scann::InputOutputConfig& input_output() const;
  ::research_scann::InputOutputConfig* release_input_output();
  ::research_scann::InputOutputConfig* mutable_input_output();
  void set_allocated_input_output(::research_scann::InputOutputConfig* input_output);

  // optional .research_scann.BruteForceConfig brute_force = 7;
  bool has_brute_force() const;
  void clear_brute_force();
  const ::research_scann::BruteForceConfig& brute_force() const;
  ::research_scann::BruteForceConfig* release_brute_force();
  ::research_scann::BruteForceConfig* mutable_brute_force();
  void set_allocated_brute_force(::research_scann::BruteForceConfig* brute_force);

  // optional .research_scann.PartitioningConfig partitioning = 8;
  bool has_partitioning() const;
  void clear_partitioning();
  const ::research_scann::PartitioningConfig& partitioning() const;
  ::research_scann::PartitioningConfig* release_partitioning();
  ::research_scann::PartitioningConfig* mutable_partitioning();
  void set_allocated_partitioning(::research_scann::PartitioningConfig* partitioning);

  // optional .research_scann.HashConfig hash = 13;
  bool has_hash() const;
  void clear_hash();
  const ::research_scann::HashConfig& hash() const;
  ::research_scann::HashConfig* release_hash();
  ::research_scann::HashConfig* mutable_hash();
  void set_allocated_hash(::research_scann::HashConfig* hash);

  // optional .research_scann.ExactReordering exact_reordering = 17;
  bool has_exact_reordering() const;
  void clear_exact_reordering();
  const ::research_scann::ExactReordering& exact_reordering() const;
  ::research_scann::ExactReordering* release_exact_reordering();
  ::research_scann::ExactReordering* mutable_exact_reordering();
  void set_allocated_exact_reordering(::research_scann::ExactReordering* exact_reordering);

  // optional .research_scann.MetadataConfig metadata = 20;
  bool has_metadata() const;
  void clear_metadata();
  const ::research_scann::MetadataConfig& metadata() const;
  ::research_scann::MetadataConfig* release_metadata();
  ::research_scann::MetadataConfig* mutable_metadata();
  void set_allocated_metadata(::research_scann::MetadataConfig* metadata);

  // optional .research_scann.Crowding crowding = 29;
  bool has_crowding() const;
  void clear_crowding();
  const ::research_scann::Crowding& crowding() const;
  ::research_scann::Crowding* release_crowding();
  ::research_scann::Crowding* mutable_crowding();
  void set_allocated_crowding(::research_scann::Crowding* crowding);

  // optional .research_scann.DisjointRestrictToken disjoint_restrict_token = 31;
  bool has_disjoint_restrict_token() const;
  void clear_disjoint_restrict_token();
  const ::research_scann::DisjointRestrictToken& disjoint_restrict_token() const;
  ::research_scann::DisjointRestrictToken* release_disjoint_restrict_token();
  ::research_scann::DisjointRestrictToken* mutable_disjoint_restrict_token();
  void set_allocated_disjoint_restrict_token(::research_scann::DisjointRestrictToken* disjoint_restrict_token);

  // optional .research_scann.V3RestrictsConfig v3_restricts = 37;
  bool has_v3_restricts() const;
  void clear_v3_restricts();
  const ::research_scann::V3RestrictsConfig& v3_restricts() const;
  ::research_scann::V3RestrictsConfig* release_v3_restricts();
  ::research_scann::V3RestrictsConfig* mutable_v3_restricts();
  void set_allocated_v3_restricts(::research_scann::V3RestrictsConfig* v3_restricts);

  // optional .research_scann.RestrictsConfig restricts = 39;
  bool has_restricts() const;
  void clear_restricts();
  const ::research_scann::RestrictsConfig& restricts() const;
  ::research_scann::RestrictsConfig* release_restricts();
  ::research_scann::RestrictsConfig* mutable_restricts();
  void set_allocated_restricts(::research_scann::RestrictsConfig* restricts);

  // optional .research_scann.ScannConfig.SearchParadigm search_paradigm = 1;
  bool has_search_paradigm() const;
  void clear_search_paradigm();
  ::research_scann::ScannConfig_SearchParadigm search_paradigm() const;
  void set_search_paradigm(::research_scann::ScannConfig_SearchParadigm value);

  // optional .research_scann.ScannConfig.SearchType search_type = 2;
  bool has_search_type() const;
  void clear_search_type();
  ::research_scann::ScannConfig_SearchType search_type() const;
  void set_search_type(::research_scann::ScannConfig_SearchType value);

  // optional int32 num_single_shard_neighbors = 21;
  bool has_num_single_shard_neighbors() const;
  void clear_num_single_shard_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 num_single_shard_neighbors() const;
  void set_num_single_shard_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool restricts_enabled = 24 [default = false];
  bool has_restricts_enabled() const;
  void clear_restricts_enabled();
  bool restricts_enabled() const;
  void set_restricts_enabled(bool value);

  // optional int32 num_neighbors = 3 [default = 2147483647];
  bool has_num_neighbors() const;
  void clear_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 num_neighbors() const;
  void set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float epsilon_distance = 4 [default = inf];
  bool has_epsilon_distance() const;
  void clear_epsilon_distance();
  float epsilon_distance() const;
  void set_epsilon_distance(float value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ScannConfig)
  // @@protoc_insertion_point(class_scope:research_scann.ScannConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_search_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::research_scann::DistanceMeasureConfig* distance_measure_;
  ::research_scann::InputOutputConfig* input_output_;
  ::research_scann::BruteForceConfig* brute_force_;
  ::research_scann::PartitioningConfig* partitioning_;
  ::research_scann::HashConfig* hash_;
  ::research_scann::ExactReordering* exact_reordering_;
  ::research_scann::MetadataConfig* metadata_;
  ::research_scann::Crowding* crowding_;
  ::research_scann::DisjointRestrictToken* disjoint_restrict_token_;
  ::research_scann::V3RestrictsConfig* v3_restricts_;
  ::research_scann::RestrictsConfig* restricts_;
  int search_paradigm_;
  int search_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_single_shard_neighbors_;
  bool restricts_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_neighbors_;
  float epsilon_distance_;
  friend struct ::TableStruct_scann_2fproto_2fscann_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScannConfig

// optional string dataset_name = 32;
inline bool ScannConfig::has_dataset_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScannConfig::clear_dataset_name() {
  dataset_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScannConfig::dataset_name() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.dataset_name)
  return dataset_name_.GetNoArena();
}
inline void ScannConfig::set_dataset_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.dataset_name)
}
inline void ScannConfig::set_dataset_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dataset_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.ScannConfig.dataset_name)
}
inline void ScannConfig::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.ScannConfig.dataset_name)
}
inline void ScannConfig::set_dataset_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.ScannConfig.dataset_name)
}
inline std::string* ScannConfig::mutable_dataset_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.dataset_name)
  return dataset_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScannConfig::release_dataset_name() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.dataset_name)
  if (!has_dataset_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dataset_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScannConfig::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dataset_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name);
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.dataset_name)
}

// optional int32 num_neighbors = 3 [default = 2147483647];
inline bool ScannConfig::has_num_neighbors() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ScannConfig::clear_num_neighbors() {
  num_neighbors_ = 2147483647;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScannConfig::num_neighbors() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.num_neighbors)
  return num_neighbors_;
}
inline void ScannConfig::set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.num_neighbors)
}

// optional float epsilon_distance = 4 [default = inf];
inline bool ScannConfig::has_epsilon_distance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ScannConfig::clear_epsilon_distance() {
  epsilon_distance_ = std::numeric_limits<float>::infinity();
  _has_bits_[0] &= ~0x00040000u;
}
inline float ScannConfig::epsilon_distance() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.epsilon_distance)
  return epsilon_distance_;
}
inline void ScannConfig::set_epsilon_distance(float value) {
  _has_bits_[0] |= 0x00040000u;
  epsilon_distance_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.epsilon_distance)
}

// optional .research_scann.RestrictsConfig restricts = 39;
inline bool ScannConfig::has_restricts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::research_scann::RestrictsConfig& ScannConfig::restricts() const {
  const ::research_scann::RestrictsConfig* p = restricts_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.restricts)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::RestrictsConfig*>(
      &::research_scann::_RestrictsConfig_default_instance_);
}
inline ::research_scann::RestrictsConfig* ScannConfig::release_restricts() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.restricts)
  _has_bits_[0] &= ~0x00001000u;
  ::research_scann::RestrictsConfig* temp = restricts_;
  restricts_ = nullptr;
  return temp;
}
inline ::research_scann::RestrictsConfig* ScannConfig::mutable_restricts() {
  _has_bits_[0] |= 0x00001000u;
  if (restricts_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::RestrictsConfig>(GetArenaNoVirtual());
    restricts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.restricts)
  return restricts_;
}
inline void ScannConfig::set_allocated_restricts(::research_scann::RestrictsConfig* restricts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restricts_);
  }
  if (restricts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restricts)->GetArena();
    if (message_arena != submessage_arena) {
      restricts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restricts, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  restricts_ = restricts;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.restricts)
}

// optional bool restricts_enabled = 24 [default = false];
inline bool ScannConfig::has_restricts_enabled() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ScannConfig::clear_restricts_enabled() {
  restricts_enabled_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ScannConfig::restricts_enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.restricts_enabled)
  return restricts_enabled_;
}
inline void ScannConfig::set_restricts_enabled(bool value) {
  _has_bits_[0] |= 0x00010000u;
  restricts_enabled_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.restricts_enabled)
}

// optional .research_scann.V3RestrictsConfig v3_restricts = 37;
inline bool ScannConfig::has_v3_restricts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::research_scann::V3RestrictsConfig& ScannConfig::v3_restricts() const {
  const ::research_scann::V3RestrictsConfig* p = v3_restricts_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.v3_restricts)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::V3RestrictsConfig*>(
      &::research_scann::_V3RestrictsConfig_default_instance_);
}
inline ::research_scann::V3RestrictsConfig* ScannConfig::release_v3_restricts() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.v3_restricts)
  _has_bits_[0] &= ~0x00000800u;
  ::research_scann::V3RestrictsConfig* temp = v3_restricts_;
  v3_restricts_ = nullptr;
  return temp;
}
inline ::research_scann::V3RestrictsConfig* ScannConfig::mutable_v3_restricts() {
  _has_bits_[0] |= 0x00000800u;
  if (v3_restricts_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::V3RestrictsConfig>(GetArenaNoVirtual());
    v3_restricts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.v3_restricts)
  return v3_restricts_;
}
inline void ScannConfig::set_allocated_v3_restricts(::research_scann::V3RestrictsConfig* v3_restricts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3_restricts_);
  }
  if (v3_restricts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3_restricts)->GetArena();
    if (message_arena != submessage_arena) {
      v3_restricts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v3_restricts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  v3_restricts_ = v3_restricts;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.v3_restricts)
}

// optional .research_scann.Crowding crowding = 29;
inline bool ScannConfig::has_crowding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::research_scann::Crowding& ScannConfig::crowding() const {
  const ::research_scann::Crowding* p = crowding_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.crowding)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::Crowding*>(
      &::research_scann::_Crowding_default_instance_);
}
inline ::research_scann::Crowding* ScannConfig::release_crowding() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.crowding)
  _has_bits_[0] &= ~0x00000200u;
  ::research_scann::Crowding* temp = crowding_;
  crowding_ = nullptr;
  return temp;
}
inline ::research_scann::Crowding* ScannConfig::mutable_crowding() {
  _has_bits_[0] |= 0x00000200u;
  if (crowding_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::Crowding>(GetArenaNoVirtual());
    crowding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.crowding)
  return crowding_;
}
inline void ScannConfig::set_allocated_crowding(::research_scann::Crowding* crowding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(crowding_);
  }
  if (crowding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crowding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crowding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  crowding_ = crowding;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.crowding)
}

// optional .research_scann.DistanceMeasureConfig distance_measure = 5;
inline bool ScannConfig::has_distance_measure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::research_scann::DistanceMeasureConfig& ScannConfig::distance_measure() const {
  const ::research_scann::DistanceMeasureConfig* p = distance_measure_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.distance_measure)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::DistanceMeasureConfig*>(
      &::research_scann::_DistanceMeasureConfig_default_instance_);
}
inline ::research_scann::DistanceMeasureConfig* ScannConfig::release_distance_measure() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.distance_measure)
  _has_bits_[0] &= ~0x00000004u;
  ::research_scann::DistanceMeasureConfig* temp = distance_measure_;
  distance_measure_ = nullptr;
  return temp;
}
inline ::research_scann::DistanceMeasureConfig* ScannConfig::mutable_distance_measure() {
  _has_bits_[0] |= 0x00000004u;
  if (distance_measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::DistanceMeasureConfig>(GetArenaNoVirtual());
    distance_measure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.distance_measure)
  return distance_measure_;
}
inline void ScannConfig::set_allocated_distance_measure(::research_scann::DistanceMeasureConfig* distance_measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(distance_measure_);
  }
  if (distance_measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distance_measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_measure, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  distance_measure_ = distance_measure;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.distance_measure)
}

// optional .research_scann.ExactReordering exact_reordering = 17;
inline bool ScannConfig::has_exact_reordering() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::research_scann::ExactReordering& ScannConfig::exact_reordering() const {
  const ::research_scann::ExactReordering* p = exact_reordering_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.exact_reordering)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::ExactReordering*>(
      &::research_scann::_ExactReordering_default_instance_);
}
inline ::research_scann::ExactReordering* ScannConfig::release_exact_reordering() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.exact_reordering)
  _has_bits_[0] &= ~0x00000080u;
  ::research_scann::ExactReordering* temp = exact_reordering_;
  exact_reordering_ = nullptr;
  return temp;
}
inline ::research_scann::ExactReordering* ScannConfig::mutable_exact_reordering() {
  _has_bits_[0] |= 0x00000080u;
  if (exact_reordering_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::ExactReordering>(GetArenaNoVirtual());
    exact_reordering_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.exact_reordering)
  return exact_reordering_;
}
inline void ScannConfig::set_allocated_exact_reordering(::research_scann::ExactReordering* exact_reordering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exact_reordering_);
  }
  if (exact_reordering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exact_reordering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact_reordering, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  exact_reordering_ = exact_reordering;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.exact_reordering)
}

// optional .research_scann.InputOutputConfig input_output = 6;
inline bool ScannConfig::has_input_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::research_scann::InputOutputConfig& ScannConfig::input_output() const {
  const ::research_scann::InputOutputConfig* p = input_output_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.input_output)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::InputOutputConfig*>(
      &::research_scann::_InputOutputConfig_default_instance_);
}
inline ::research_scann::InputOutputConfig* ScannConfig::release_input_output() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.input_output)
  _has_bits_[0] &= ~0x00000008u;
  ::research_scann::InputOutputConfig* temp = input_output_;
  input_output_ = nullptr;
  return temp;
}
inline ::research_scann::InputOutputConfig* ScannConfig::mutable_input_output() {
  _has_bits_[0] |= 0x00000008u;
  if (input_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::InputOutputConfig>(GetArenaNoVirtual());
    input_output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.input_output)
  return input_output_;
}
inline void ScannConfig::set_allocated_input_output(::research_scann::InputOutputConfig* input_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_output_);
  }
  if (input_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  input_output_ = input_output;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.input_output)
}

// optional .research_scann.BruteForceConfig brute_force = 7;
inline bool ScannConfig::has_brute_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::research_scann::BruteForceConfig& ScannConfig::brute_force() const {
  const ::research_scann::BruteForceConfig* p = brute_force_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.brute_force)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::BruteForceConfig*>(
      &::research_scann::_BruteForceConfig_default_instance_);
}
inline ::research_scann::BruteForceConfig* ScannConfig::release_brute_force() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.brute_force)
  _has_bits_[0] &= ~0x00000010u;
  ::research_scann::BruteForceConfig* temp = brute_force_;
  brute_force_ = nullptr;
  return temp;
}
inline ::research_scann::BruteForceConfig* ScannConfig::mutable_brute_force() {
  _has_bits_[0] |= 0x00000010u;
  if (brute_force_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::BruteForceConfig>(GetArenaNoVirtual());
    brute_force_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.brute_force)
  return brute_force_;
}
inline void ScannConfig::set_allocated_brute_force(::research_scann::BruteForceConfig* brute_force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brute_force_);
  }
  if (brute_force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brute_force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brute_force, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  brute_force_ = brute_force;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.brute_force)
}

// optional .research_scann.PartitioningConfig partitioning = 8;
inline bool ScannConfig::has_partitioning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::research_scann::PartitioningConfig& ScannConfig::partitioning() const {
  const ::research_scann::PartitioningConfig* p = partitioning_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.partitioning)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::PartitioningConfig*>(
      &::research_scann::_PartitioningConfig_default_instance_);
}
inline ::research_scann::PartitioningConfig* ScannConfig::release_partitioning() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.partitioning)
  _has_bits_[0] &= ~0x00000020u;
  ::research_scann::PartitioningConfig* temp = partitioning_;
  partitioning_ = nullptr;
  return temp;
}
inline ::research_scann::PartitioningConfig* ScannConfig::mutable_partitioning() {
  _has_bits_[0] |= 0x00000020u;
  if (partitioning_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::PartitioningConfig>(GetArenaNoVirtual());
    partitioning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.partitioning)
  return partitioning_;
}
inline void ScannConfig::set_allocated_partitioning(::research_scann::PartitioningConfig* partitioning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioning_);
  }
  if (partitioning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      partitioning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  partitioning_ = partitioning;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.partitioning)
}

// optional .research_scann.HashConfig hash = 13;
inline bool ScannConfig::has_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::research_scann::HashConfig& ScannConfig::hash() const {
  const ::research_scann::HashConfig* p = hash_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.hash)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::HashConfig*>(
      &::research_scann::_HashConfig_default_instance_);
}
inline ::research_scann::HashConfig* ScannConfig::release_hash() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.hash)
  _has_bits_[0] &= ~0x00000040u;
  ::research_scann::HashConfig* temp = hash_;
  hash_ = nullptr;
  return temp;
}
inline ::research_scann::HashConfig* ScannConfig::mutable_hash() {
  _has_bits_[0] |= 0x00000040u;
  if (hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::HashConfig>(GetArenaNoVirtual());
    hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.hash)
  return hash_;
}
inline void ScannConfig::set_allocated_hash(::research_scann::HashConfig* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.hash)
}

// optional .research_scann.MetadataConfig metadata = 20;
inline bool ScannConfig::has_metadata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::research_scann::MetadataConfig& ScannConfig::metadata() const {
  const ::research_scann::MetadataConfig* p = metadata_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::MetadataConfig*>(
      &::research_scann::_MetadataConfig_default_instance_);
}
inline ::research_scann::MetadataConfig* ScannConfig::release_metadata() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.metadata)
  _has_bits_[0] &= ~0x00000100u;
  ::research_scann::MetadataConfig* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::research_scann::MetadataConfig* ScannConfig::mutable_metadata() {
  _has_bits_[0] |= 0x00000100u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::MetadataConfig>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.metadata)
  return metadata_;
}
inline void ScannConfig::set_allocated_metadata(::research_scann::MetadataConfig* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.metadata)
}

// optional int32 num_single_shard_neighbors = 21;
inline bool ScannConfig::has_num_single_shard_neighbors() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ScannConfig::clear_num_single_shard_neighbors() {
  num_single_shard_neighbors_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScannConfig::num_single_shard_neighbors() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.num_single_shard_neighbors)
  return num_single_shard_neighbors_;
}
inline void ScannConfig::set_num_single_shard_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  num_single_shard_neighbors_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.num_single_shard_neighbors)
}

// optional bytes custom_search_method = 22;
inline bool ScannConfig::has_custom_search_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScannConfig::clear_custom_search_method() {
  custom_search_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScannConfig::custom_search_method() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.custom_search_method)
  return custom_search_method_.GetNoArena();
}
inline void ScannConfig::set_custom_search_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_search_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.custom_search_method)
}
inline void ScannConfig::set_custom_search_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_search_method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:research_scann.ScannConfig.custom_search_method)
}
inline void ScannConfig::set_custom_search_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  custom_search_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:research_scann.ScannConfig.custom_search_method)
}
inline void ScannConfig::set_custom_search_method(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  custom_search_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:research_scann.ScannConfig.custom_search_method)
}
inline std::string* ScannConfig::mutable_custom_search_method() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.custom_search_method)
  return custom_search_method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScannConfig::release_custom_search_method() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.custom_search_method)
  if (!has_custom_search_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return custom_search_method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScannConfig::set_allocated_custom_search_method(std::string* custom_search_method) {
  if (custom_search_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_search_method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_search_method);
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.custom_search_method)
}

// optional .research_scann.DisjointRestrictToken disjoint_restrict_token = 31;
inline bool ScannConfig::has_disjoint_restrict_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::research_scann::DisjointRestrictToken& ScannConfig::disjoint_restrict_token() const {
  const ::research_scann::DisjointRestrictToken* p = disjoint_restrict_token_;
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.disjoint_restrict_token)
  return p != nullptr ? *p : *reinterpret_cast<const ::research_scann::DisjointRestrictToken*>(
      &::research_scann::_DisjointRestrictToken_default_instance_);
}
inline ::research_scann::DisjointRestrictToken* ScannConfig::release_disjoint_restrict_token() {
  // @@protoc_insertion_point(field_release:research_scann.ScannConfig.disjoint_restrict_token)
  _has_bits_[0] &= ~0x00000400u;
  ::research_scann::DisjointRestrictToken* temp = disjoint_restrict_token_;
  disjoint_restrict_token_ = nullptr;
  return temp;
}
inline ::research_scann::DisjointRestrictToken* ScannConfig::mutable_disjoint_restrict_token() {
  _has_bits_[0] |= 0x00000400u;
  if (disjoint_restrict_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::DisjointRestrictToken>(GetArenaNoVirtual());
    disjoint_restrict_token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:research_scann.ScannConfig.disjoint_restrict_token)
  return disjoint_restrict_token_;
}
inline void ScannConfig::set_allocated_disjoint_restrict_token(::research_scann::DisjointRestrictToken* disjoint_restrict_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disjoint_restrict_token_);
  }
  if (disjoint_restrict_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disjoint_restrict_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disjoint_restrict_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  disjoint_restrict_token_ = disjoint_restrict_token;
  // @@protoc_insertion_point(field_set_allocated:research_scann.ScannConfig.disjoint_restrict_token)
}

// optional .research_scann.ScannConfig.SearchParadigm search_paradigm = 1;
inline bool ScannConfig::has_search_paradigm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ScannConfig::clear_search_paradigm() {
  search_paradigm_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::research_scann::ScannConfig_SearchParadigm ScannConfig::search_paradigm() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.search_paradigm)
  return static_cast< ::research_scann::ScannConfig_SearchParadigm >(search_paradigm_);
}
inline void ScannConfig::set_search_paradigm(::research_scann::ScannConfig_SearchParadigm value) {
  assert(::research_scann::ScannConfig_SearchParadigm_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  search_paradigm_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.search_paradigm)
}

// optional .research_scann.ScannConfig.SearchType search_type = 2;
inline bool ScannConfig::has_search_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ScannConfig::clear_search_type() {
  search_type_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::research_scann::ScannConfig_SearchType ScannConfig::search_type() const {
  // @@protoc_insertion_point(field_get:research_scann.ScannConfig.search_type)
  return static_cast< ::research_scann::ScannConfig_SearchType >(search_type_);
}
inline void ScannConfig::set_search_type(::research_scann::ScannConfig_SearchType value) {
  assert(::research_scann::ScannConfig_SearchType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  search_type_ = value;
  // @@protoc_insertion_point(field_set:research_scann.ScannConfig.search_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::research_scann::ScannConfig_SearchParadigm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::ScannConfig_SearchParadigm>() {
  return ::research_scann::ScannConfig_SearchParadigm_descriptor();
}
template <> struct is_proto_enum< ::research_scann::ScannConfig_SearchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::ScannConfig_SearchType>() {
  return ::research_scann::ScannConfig_SearchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fscann_2eproto
